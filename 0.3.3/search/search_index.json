{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Biotope","text":"<p>CLI integration for BioCypher ecosystem packages</p> <p>Biotope is still under development</p> <p>Biotope is still under development and the API is subject to change. The package is currently only meant for developer use and prototyping.</p> <p>The Biotope CLI integration is our attempt to integrate BioCypher ecosystem packages into an accessible suite for scientific knowledge management. We are first approaching the project from a CLI perspective, as this is the most basic technology for prototyping automated workflows. We aim to extend this towards other user-interfaces, such as web apps, in the future.</p> <p>Biotope contains various modules for different tasks, some of which are straightfoward applications of existing BioCypher packages, while others are prototypes for new features. See more information in the API documentation.</p> <ul> <li><code>biotope init</code>: Initialize a new project in the BioCypher suite</li> <li><code>biotope build</code>: Build a BioCypher knowledge representation</li> <li><code>biotope chat</code>: Chat with a BioCypher project (BioChatter)</li> <li><code>biotope read</code>: Extract information from unstructured modalities (BioGather)</li> <li><code>biotope view</code>: Use visual analysis tools to interpret your data and metadata</li> <li><code>biotope get</code>: Download files from a URL and stage them for annotation and version control</li> <li><code>biotope annotate</code>: Annotate your data with consistent metadata in Croissant ML</li> <li><code>biotope config</code>: Manage project configuration and metadata settings</li> </ul>"},{"location":"#git-integration-for-metadata-version-control","title":"Git Integration for Metadata Version Control","text":"<p>Biotope uses a Git-on-Top strategy for metadata version control, providing:</p> <ul> <li>Version control for all metadata changes using Git</li> <li>Collaboration through standard Git workflows</li> <li>Data integrity through checksum verification</li> <li>Familiar tooling - all Git tools work seamlessly</li> </ul>"},{"location":"#core-git-integrated-commands","title":"Core Git-Integrated Commands","text":"<ul> <li><code>biotope add</code>: Stage data files for metadata creation</li> <li><code>biotope get</code>: Download remote files and stage them for metadata creation</li> <li><code>biotope status</code>: Show current project status</li> <li><code>biotope commit</code>: Commit metadata changes using Git</li> <li><code>biotope log</code>: View commit history</li> <li><code>biotope push/pull</code>: Share metadata with remote repositories</li> <li><code>biotope check-data</code>: Verify data integrity against checksums</li> </ul>"},{"location":"#basic-workflow","title":"Basic Workflow","text":"<pre><code># Initialize project (with Git and optional project metadata)\nbiotope init\n\n# Add local data files\nbiotope add data/raw/experiment.csv\n\n# Or download and stage remote files\nbiotope get https://example.com/data/experiment.csv\n\n# Check status\nbiotope status\n\n# Create metadata for staged files (with project metadata pre-fill)\nbiotope annotate interactive --staged\n\n# Or complete incomplete annotations\nbiotope annotate interactive --incomplete\n\n# Commit changes\nbiotope commit -m \"Add experiment dataset\"\n\n# View history\nbiotope log --oneline\n</code></pre>"},{"location":"#project-level-metadata","title":"Project-Level Metadata","text":"<p>Biotope supports project-level metadata collection during initialization that can be used to pre-fill annotation fields:</p> <ul> <li>Description: Project description and purpose</li> <li>URL: Project homepage or repository</li> <li>Creator: Project maintainer information</li> <li>License: Data usage license</li> <li>Citation: How to cite the project</li> </ul> <p>This metadata is stored in <code>.biotope/config/biotope.yaml</code> and automatically pre-fills fields when using <code>biotope annotate interactive</code>.</p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Git Integration for Users: Learn how to use biotope's Git integration, leveraging your existing Git knowledge</li> <li>Git Integration for Developers: Understand the technical implementation and architecture</li> <li>Cluster Compliance: How to enforce and check metadata validation policies across clusters</li> </ul>"},{"location":"#metadata-annotation-using-croissant-short-guide","title":"Metadata annotation using Croissant, short guide","text":"<p>The <code>biotope</code> package features a metadata annotation assistant using the recently introduced Croissant schema. It is available as the <code>biotope annotate</code> module. Usage:</p> <pre><code>pip install biotope\nbiotope annotate interactive\n</code></pre> <p>You can also use the <code>biotope get</code> command to download files and stage them for annotation and version control:</p> <pre><code>biotope get https://example.com/data/file.txt\nbiotope status\nbiotope annotate interactive --staged\nbiotope commit -m \"Add new dataset from URL\"\n</code></pre> <p>This will download the file, stage it for annotation, and fit into the same workflow as local files.</p> <p>Project Metadata Pre-fill: If you've set up project-level metadata during <code>biotope init</code>, the annotation form will be pre-filled with this information, making the annotation process faster and more consistent.</p> <p>After creation, <code>biotope</code> can also be used to validate the JSON-LD (CAVE: being a prototype, biotope does not yet implement all croissant fields):</p> <pre><code>biotope annotate validate \u2013jsonld &lt;file_name.json&gt;\n</code></pre> <p><code>biotope</code> also has the method <code>biotope annotate create</code> to create metadata files from CLI parameters (no interactive mode) and <code>biotope annotate load</code> to load an existing record (the use of this is not well-defined yet). Further improvements would be the integration of LLMs for the automation of metadata annotations from file contents (using the <code>biochatter</code> module of <code>biotope</code>).</p> <p>Unit tests to inform about further functions and details can be found at https://github.com/biocypher/biotope/blob/main/tests/commands/test_annotate.py and https://github.com/biocypher/biotope/blob/main/tests/commands/test_get.py</p>"},{"location":"#further-reading","title":"Further Reading","text":"<ul> <li>Annotation Validation and Status Reporting: How to ensure your datasets are properly annotated and how to configure requirements (user guide).</li> <li>Developer &amp; Admin Guide: Annotation Validation: How to customize, extend, and manage annotation validation (admin/dev guide).</li> <li>Cluster Compliance: Cluster-wide enforcement, compliance checking, and best practices.</li> </ul>"},{"location":"#copyright","title":"Copyright","text":"<ul> <li>Copyright \u00a9 2025 Sebastian Lobentanzer.</li> <li>Free software distributed under the MIT License.</li> </ul>"},{"location":"cluster-compliance/","title":"Cluster Compliance with Biotope","text":"<p>Biotope supports robust cluster compliance workflows for institutional and collaborative environments. This page explains how to enforce, check, and monitor metadata validation policies across multiple projects, especially in shared or high-performance computing (HPC) clusters.</p>"},{"location":"cluster-compliance/#overview","title":"Overview","text":"<p>Cluster compliance ensures that all biotope projects on a cluster adhere to organization-wide metadata requirements. This is critical for:</p> <ul> <li>Data integrity and reproducibility</li> <li>Institutional policy enforcement</li> <li>Automated project onboarding and review</li> <li>Long-term storage and archival</li> </ul> <p>Biotope enables compliance through:</p> <ul> <li>Validation patterns: Project-level configuration for required metadata fields</li> <li>Remote validation: Centralized, cluster-wide validation policies</li> <li>Compliance checking: Automated tools for admins to scan and report on project compliance</li> </ul>"},{"location":"cluster-compliance/#admin-workflow-enforcing-compliance","title":"Admin Workflow: Enforcing Compliance","text":"<ol> <li>Define Cluster Requirements</li> <li>Create a requirements file (e.g., <code>cluster-requirements.json</code>) with required fields and patterns.</li> <li>Example:      <pre><code>{\n  \"cluster_name\": \"Example HPC Cluster\",\n  \"required_pattern\": \"cluster-strict\",\n  \"required_fields\": [\n    \"name\", \"description\", \"creator\", \"dateCreated\", \"distribution\", \"license\", \"project_id\"\n  ],\n  \"require_remote_validation\": true\n}\n</code></pre></li> <li>Set Up Remote Validation</li> <li>Deploy a remote validation server (see examples/remote-validation-server.py).</li> <li>Provide users with the remote validation URL.</li> <li>Automate Compliance Checking</li> <li>Use the cluster compliance checker to scan all projects:      <pre><code>python cluster-compliance-checker.py --scan-dir /cluster/projects --requirements /etc/biotope/cluster-requirements.json --report /var/log/biotope/compliance-$(date +%Y%m%d).txt\n</code></pre></li> <li>Integrate with cron or CI/CD for regular monitoring.</li> <li>Monitor and Alert</li> <li>Track compliance rates and alert administrators if compliance drops below a threshold.</li> </ol>"},{"location":"cluster-compliance/#user-workflow-ensuring-project-compliance","title":"User Workflow: Ensuring Project Compliance","text":"<ol> <li>Initialize your project <pre><code>biotope init\n</code></pre></li> <li>Set the cluster validation pattern <pre><code>biotope config set-validation-pattern --pattern cluster-strict\n</code></pre></li> <li>Configure remote validation <pre><code>biotope config set-remote-validation --url https://cluster.example.com/validation/cluster-strict\n</code></pre></li> <li>Check your configuration <pre><code>biotope config show-validation-pattern\nbiotope config show-validation\n</code></pre></li> <li>Annotate and validate your data</li> <li>Use <code>biotope annotate</code> and <code>biotope status</code> to ensure all required fields are present.</li> </ol>"},{"location":"cluster-compliance/#example-compliance-report","title":"Example Compliance Report","text":"<pre><code>================================================================================\nBIOTOPE CLUSTER COMPLIANCE REPORT\n================================================================================\n\nSUMMARY:\n  Total projects: 25\n  Compliant projects: 18\n  Using default pattern: 5\n  Errors: 2\n  Compliance rate: 72.0%\n\nDETAILED REPORT:\n--------------------------------------------------------------------------------\n\nProject: /cluster/projects/user1/experiment\n  Pattern: cluster-strict\n  Status: cluster_compliant\n  Remote validation: https://cluster.example.com/validation/cluster-strict\n  Required fields: name, description, creator, dateCreated, distribution, license, project_id\n  **\u2705 COMPLIANT**\n\nProject: /cluster/projects/user2/data\n  Pattern: default\n  Status: default_pattern\n  Required fields: name, description, creator, dateCreated, distribution\n  **\u274c NON-COMPLIANT**\n    - Wrong validation pattern: default (required: cluster-strict)\n    - Missing required fields: license, project_id\n    - Remote validation not configured\n\n================================================================================\nRECOMMENDATIONS:\n- 5 projects are using default validation pattern\n  Consider configuring cluster-specific validation for these projects\n- 2 projects have configuration errors\n  Review these projects and fix configuration issues\n- 7 projects are non-compliant\n  Contact project owners to update validation configuration\n</code></pre>"},{"location":"cluster-compliance/#integration-with-cluster-management","title":"Integration with Cluster Management","text":"<ul> <li>Automated Checks: Integrate compliance checking into cron jobs or CI/CD pipelines.</li> <li>User Onboarding: Provide setup instructions for new users (see above).</li> <li>Monitoring: Use scripts to monitor compliance rates and send alerts.</li> </ul>"},{"location":"cluster-compliance/#best-practices","title":"Best Practices","text":""},{"location":"cluster-compliance/#for-cluster-administrators","title":"For Cluster Administrators","text":"<ul> <li>Define clear requirements and validation patterns</li> <li>Automate compliance checking and reporting</li> <li>Provide clear documentation and onboarding for users</li> <li>Monitor compliance trends and support users</li> </ul>"},{"location":"cluster-compliance/#for-users","title":"For Users","text":"<ul> <li>Set the correct validation pattern for your project</li> <li>Use remote validation if required</li> <li>Regularly check your compliance status</li> <li>Seek help from administrators if needed</li> </ul>"},{"location":"cluster-compliance/#for-developers","title":"For Developers","text":"<ul> <li>Extend validation patterns for new use cases</li> <li>Test compliance workflows with different configurations</li> <li>Document new patterns and requirements</li> </ul>"},{"location":"cluster-compliance/#references-and-further-reading","title":"References and Further Reading","text":"<ul> <li>Remote Validation Server Example</li> <li>Cluster Compliance Checker Script</li> <li>Validation Patterns and Examples</li> <li>Git Integration for Users</li> <li>Developer &amp; Admin Guide: Annotation Validation </li> </ul>"},{"location":"git-integration-dev/","title":"Git Integration for Developers","text":"<p>This document explains the technical implementation of biotope's Git-on-Top strategy for metadata version control.</p>"},{"location":"git-integration-dev/#architecture-overview","title":"Architecture Overview","text":"<p>Biotope implements a Git-on-Top strategy where all version control operations delegate to Git via <code>subprocess.run()</code> calls. No custom version control is implemented.</p>"},{"location":"git-integration-dev/#key-principles","title":"Key Principles","text":"<ol> <li>Git Wrapper Pattern: All biotope commands wrap Git operations with metadata-specific logic</li> <li>No Custom Version Control: Zero custom commit history, branching, or remote handling</li> <li>Separation of Concerns: Data files in <code>data/</code>, metadata in <code>.biotope/datasets/</code></li> <li>Croissant ML Integration: Metadata follows Croissant ML standard with validation</li> <li>Project Metadata Management: Project-level metadata stored in <code>.biotope/config/biotope.yaml</code> for annotation pre-fill</li> </ol>"},{"location":"git-integration-dev/#project-structure","title":"Project Structure","text":"<pre><code>your-project/\n\u251c\u2500\u2500 .git/                  # Git repository (handled by Git)\n\u251c\u2500\u2500 .biotope/              # Git-tracked metadata\n\u2502   \u251c\u2500\u2500 datasets/          # Croissant ML JSON-LD files\n\u2502   \u251c\u2500\u2500 config/            # Biotope configuration (Git-like approach)\n\u2502   \u2502   \u2514\u2500\u2500 biotope.yaml   # Consolidated configuration and project metadata\n\u2502   \u251c\u2500\u2500 workflows/         # Bioinformatics workflows\n\u2502   \u2514\u2500\u2500 logs/              # Command execution logs\n\u251c\u2500\u2500 data/                  # Data files (not in Git)\n\u2502   \u251c\u2500\u2500 raw/\n\u2502   \u2514\u2500\u2500 processed/\n\u251c\u2500\u2500 config/                # User configuration\n\u251c\u2500\u2500 schemas/               # Knowledge schemas\n\u2514\u2500\u2500 outputs/               # Generated outputs\n</code></pre>"},{"location":"git-integration-dev/#implementation-details","title":"Implementation Details","text":""},{"location":"git-integration-dev/#core-commands","title":"Core Commands","text":""},{"location":"git-integration-dev/#biotope-init-biotopecommandsinitpy","title":"<code>biotope init</code> (<code>biotope/commands/init.py</code>)","text":"<pre><code>def _init_git_repo(directory: Path) -&gt; None:\n    \"\"\"Initialize a Git repository in the directory.\"\"\"\n    subprocess.run([\"git\", \"init\"], cwd=directory, check=True)\n    subprocess.run([\"git\", \"add\", \".\"], cwd=directory, check=True)\n    subprocess.run([\"git\", \"commit\", \"-m\", \"Initial biotope project setup\"], cwd=directory, check=True)\n\ndef _collect_project_metadata() -&gt; Dict:\n    \"\"\"Collect project-level metadata for annotation pre-fill.\"\"\"\n    metadata = {}\n    if click.confirm(\"Would you like to collect project-level metadata for annotation pre-fill?\"):\n        metadata[\"description\"] = click.prompt(\"Project description\")\n        metadata[\"url\"] = click.prompt(\"Project URL\")\n        metadata[\"creator\"] = {\n            \"name\": click.prompt(\"Creator name\"),\n            \"email\": click.prompt(\"Creator email\")\n        }\n        metadata[\"license\"] = click.prompt(\"License\")\n        metadata[\"citation\"] = click.prompt(\"Citation\")\n    return metadata\n\ndef _create_biotope_config(biotope_root: Path, config: Dict) -&gt; None:\n    \"\"\"Create biotope configuration file with project metadata.\"\"\"\n    config_dir = biotope_root / \".biotope\" / \"config\"\n    config_dir.mkdir(parents=True, exist_ok=True)\n\n    config_data = {\n        \"project_name\": config.get(\"project_name\"),\n        \"git_integration\": config.get(\"git_integration\", True),\n        \"knowledge_graph\": config.get(\"knowledge_graph\", {}),\n        \"project_metadata\": config.get(\"project_metadata\", {}),\n        \"annotation_validation\": config.get(\"annotation_validation\", {})\n    }\n\n    with open(config_dir / \"biotope.yaml\", \"w\") as f:\n        yaml.dump(config_data, f, default_flow_style=False)\n</code></pre> <ul> <li>Creates <code>.biotope/</code> directory structure</li> <li>Initializes Git repository with <code>subprocess.run([\"git\", \"init\"])</code></li> <li>Collects project-level metadata for annotation pre-fill</li> <li>Creates initial commit with project setup</li> <li>Conditionally shows output format selection only when knowledge graph is enabled</li> </ul>"},{"location":"git-integration-dev/#biotope-config-biotopecommandsconfigpy","title":"<code>biotope config</code> (<code>biotope/commands/config.py</code>)","text":"<pre><code>def set_project_metadata() -&gt; None:\n    \"\"\"Set project-level metadata for annotation pre-fill.\"\"\"\n    biotope_root = find_biotope_root()\n    if not biotope_root:\n        click.echo(\"\u274c Not in a biotope project. Run 'biotope init' first.\")\n        raise click.Abort\n\n    config = load_biotope_config(biotope_root)\n    project_metadata = config.get(\"project_metadata\", {})\n\n    # Interactive metadata collection\n    project_metadata[\"description\"] = click.prompt(\"Project description\", default=project_metadata.get(\"description\", \"\"))\n    project_metadata[\"url\"] = click.prompt(\"Project URL\", default=project_metadata.get(\"url\", \"\"))\n    project_metadata[\"creator\"] = {\n        \"name\": click.prompt(\"Creator name\", default=project_metadata.get(\"creator\", {}).get(\"name\", \"\")),\n        \"email\": click.prompt(\"Creator email\", default=project_metadata.get(\"creator\", {}).get(\"email\", \"\"))\n    }\n    project_metadata[\"license\"] = click.prompt(\"License\", default=project_metadata.get(\"license\", \"\"))\n    project_metadata[\"citation\"] = click.prompt(\"Citation\", default=project_metadata.get(\"citation\", \"\"))\n\n    # Update configuration\n    config[\"project_metadata\"] = project_metadata\n    save_biotope_config(biotope_root, config)\n\ndef show_project_metadata() -&gt; None:\n    \"\"\"Display current project-level metadata configuration.\"\"\"\n    biotope_root = find_biotope_root()\n    if not biotope_root:\n        click.echo(\"\u274c Not in a biotope project. Run 'biotope init' first.\")\n        raise click.Abort\n\n    config = load_biotope_config(biotope_root)\n    project_metadata = config.get(\"project_metadata\", {})\n\n    console = Console()\n    console.print(\"\\n[bold blue]Project Metadata Configuration[/]\")\n    console.print(f\"Description: {project_metadata.get('description', 'Not set')}\")\n    console.print(f\"URL: {project_metadata.get('url', 'Not set')}\")\n    console.print(f\"Creator: {project_metadata.get('creator', {}).get('name', 'Not set')} ({project_metadata.get('creator', {}).get('email', 'Not set')})\")\n    console.print(f\"License: {project_metadata.get('license', 'Not set')}\")\n    console.print(f\"Citation: {project_metadata.get('citation', 'Not set')}\")\n</code></pre> <ul> <li>Manages project-level metadata for annotation pre-fill</li> <li>Provides interactive metadata collection and display</li> <li>Stores metadata in <code>.biotope/config/biotope.yaml</code></li> </ul>"},{"location":"git-integration-dev/#biotope-commit-biotopecommandscommitpy","title":"<code>biotope commit</code> (<code>biotope/commands/commit.py</code>)","text":"<pre><code>def _create_git_commit(biotope_root: Path, message: str, author: Optional[str], amend: bool) -&gt; Optional[str]:\n    \"\"\"Create a Git commit for .biotope/ changes.\"\"\"\n    cmd = [\"git\", \"commit\"]\n    if amend:\n        cmd.append(\"--amend\")\n    if author:\n        cmd.extend([\"--author\", author])\n    cmd.extend([\"-m\", message])\n\n    result = subprocess.run(cmd, cwd=biotope_root, capture_output=True, text=True, check=True)\n    # Extract commit hash from output\n</code></pre> <ul> <li>Validates Croissant ML metadata before committing</li> <li>Stages <code>.biotope/</code> directory with <code>git add .biotope/</code></li> <li>Delegates actual commit to Git via <code>subprocess.run()</code></li> <li>Supports standard Git options (<code>--amend</code>, <code>--author</code>)</li> </ul>"},{"location":"git-integration-dev/#biotope-status-biotopecommandsstatuspy","title":"<code>biotope status</code> (<code>biotope/commands/status.py</code>)","text":"<pre><code>def _get_git_status(biotope_root: Path, biotope_only: bool) -&gt; Dict[str, List]:\n    \"\"\"Get Git status for .biotope/ directory.\"\"\"\n    cmd = [\"git\", \"status\", \"--porcelain\"]\n    if biotope_only:\n        cmd.append(\".biotope/\")\n\n    result = subprocess.run(cmd, cwd=biotope_root, capture_output=True, text=True, check=True)\n    # Parse Git's porcelain output format\n</code></pre> <ul> <li>Uses <code>git status --porcelain</code> for machine-readable output</li> <li>Parses Git's status format (A, M, D, ??)</li> <li>Focuses on <code>.biotope/</code> directory changes</li> </ul>"},{"location":"git-integration-dev/#biotope-log-biotopecommandslogpy","title":"<code>biotope log</code> (<code>biotope/commands/log.py</code>)","text":"<pre><code>def _get_git_log(biotope_root: Path, max_count: Optional[int] = None, since: Optional[str] = None, author: Optional[str] = None, biotope_only: bool = False) -&gt; List[Dict]:\n    \"\"\"Get Git log with optional filtering.\"\"\"\n    cmd = [\"git\", \"log\", \"--pretty=format:%H|%an|%ad|%s\", \"--date=short\"]\n    if biotope_only:\n        cmd.append(\"--\")\n        cmd.append(\".biotope/\")\n\n    result = subprocess.run(cmd, cwd=biotope_root, capture_output=True, text=True, check=True)\n    # Parse commit lines: hash|author|date|message\n</code></pre> <ul> <li>Uses <code>git log</code> with custom format for parsing</li> <li>Supports all standard Git log options</li> <li>Filters for <code>.biotope/</code> directory with <code>-- .biotope/</code></li> </ul>"},{"location":"git-integration-dev/#biotope-push-biotope-pull-biotopecommandspushpy-biotopecommandspullpy","title":"<code>biotope push</code> / <code>biotope pull</code> (<code>biotope/commands/push.py</code>, <code>biotope/commands/pull.py</code>)","text":"<pre><code>def _push_changes(biotope_root: Path, remote: str, branch: str, force: bool) -&gt; bool:\n    \"\"\"Push changes to remote repository.\"\"\"\n    cmd = [\"git\", \"push\"]\n    if force:\n        cmd.append(\"--force\")\n    cmd.extend([remote, branch])\n\n    result = subprocess.run(cmd, cwd=biotope_root, capture_output=True, text=True, check=True)\n    return True\n</code></pre> <ul> <li>Direct delegation to <code>git push</code> and <code>git pull</code></li> <li>Supports standard Git options (<code>--force</code>, <code>--rebase</code>)</li> <li>No custom remote handling</li> </ul>"},{"location":"git-integration-dev/#supporting-commands","title":"Supporting Commands","text":""},{"location":"git-integration-dev/#biotope-add-biotopecommandsaddpy","title":"<code>biotope add</code> (<code>biotope/commands/add.py</code>)","text":"<pre><code>def _stage_git_changes(biotope_root: Path) -&gt; None:\n    \"\"\"Stage .biotope/ changes in Git.\"\"\"\n    subprocess.run([\"git\", \"add\", \".biotope/\"], cwd=biotope_root, check=True)\n</code></pre> <ul> <li>Creates Croissant ML metadata files in <code>.biotope/datasets/</code></li> <li>Calculates SHA256 checksums for data integrity</li> <li>Stages changes with <code>git add .biotope/</code></li> </ul>"},{"location":"git-integration-dev/#biotope-check-data-biotopecommandscheck_datapy","title":"<code>biotope check-data</code> (<code>biotope/commands/check_data.py</code>)","text":"<pre><code>def _get_recorded_checksum(file_path: Path, biotope_root: Path) -&gt; Optional[str]:\n    \"\"\"Get the recorded checksum for a file.\"\"\"\n    datasets_dir = biotope_root / \".biotope\" / \"datasets\"\n    for dataset_file in datasets_dir.glob(\"*.jsonld\"):\n        with open(dataset_file) as f:\n            metadata = json.load(f)\n            for distribution in metadata.get(\"distribution\", []):\n                if distribution.get(\"@type\") == \"sc:FileObject\":\n                    content_url = distribution.get(\"contentUrl\")\n                    if content_url and (biotope_root / content_url) == file_path:\n                        return distribution.get(\"sha256\")\n</code></pre> <ul> <li>Reads checksums from Croissant ML metadata files</li> <li>Validates data integrity against recorded checksums</li> <li>No version control functionality</li> </ul>"},{"location":"git-integration-dev/#project-metadata-integration","title":"Project Metadata Integration","text":""},{"location":"git-integration-dev/#configuration-management","title":"Configuration Management","text":"<p>Project metadata is managed through a centralized configuration system:</p> <pre><code>def load_biotope_config(biotope_root: Path) -&gt; Dict:\n    \"\"\"Load biotope configuration with project metadata.\"\"\"\n    config_path = biotope_root / \".biotope\" / \"config\" / \"biotope.yaml\"\n    if not config_path.exists():\n        return {}\n\n    try:\n        with open(config_path) as f:\n            config = yaml.safe_load(f) or {}\n    except (yaml.YAMLError, IOError):\n        return {}\n\n    return config\n\ndef save_biotope_config(biotope_root: Path, config: Dict) -&gt; None:\n    \"\"\"Save biotope configuration with project metadata.\"\"\"\n    config_path = biotope_root / \".biotope\" / \"config\" / \"biotope.yaml\"\n    config_path.parent.mkdir(parents=True, exist_ok=True)\n\n    with open(config_path, \"w\") as f:\n        yaml.dump(config, f, default_flow_style=False)\n</code></pre>"},{"location":"git-integration-dev/#annotation-pre-fill-integration","title":"Annotation Pre-fill Integration","text":"<p>The annotation system integrates project metadata for pre-filling:</p> <pre><code>def load_project_metadata(biotope_root: Path) -&gt; Dict:\n    \"\"\"Load project-level metadata from biotope configuration for pre-filling annotations.\"\"\"\n    config_path = biotope_root / \".biotope\" / \"config\" / \"biotope.yaml\"\n    if not config_path.exists():\n        return {}\n\n    try:\n        import yaml\n        with open(config_path) as f:\n            config = yaml.safe_load(f) or {}\n    except (yaml.YAMLError, IOError):\n        return {}\n\n    # Extract project metadata from configuration\n    project_metadata = config.get(\"project_metadata\", {})\n\n    # Convert to Croissant format for pre-filling\n    croissant_metadata = {}\n\n    if project_metadata.get(\"description\"):\n        croissant_metadata[\"description\"] = project_metadata[\"description\"]\n    if project_metadata.get(\"url\"):\n        croissant_metadata[\"url\"] = project_metadata[\"url\"]\n    if project_metadata.get(\"creator\"):\n        croissant_metadata[\"creator\"] = project_metadata[\"creator\"]\n    if project_metadata.get(\"license\"):\n        croissant_metadata[\"license\"] = project_metadata[\"license\"]\n    if project_metadata.get(\"citation\"):\n        croissant_metadata[\"citation\"] = project_metadata[\"citation\"]\n\n    return croissant_metadata\n</code></pre>"},{"location":"git-integration-dev/#configuration-file-structure","title":"Configuration File Structure","text":"<p>The <code>.biotope/config/biotope.yaml</code> file structure (Git-like approach):</p> <pre><code>version: \"1.0\"\ncroissant_schema_version: \"1.0\"\ndefault_metadata_template: \"scientific\"\ndata_storage:\n  type: \"local\"\n  path: \"data\"\nchecksum_algorithm: \"sha256\"\nauto_stage: true\ncommit_message_template: \"Update metadata: {description}\"\n\n# Project information (consolidated internal metadata)\nproject_info:\n  name: \"my-project\"\n  created_at: \"2024-01-01T00:00:00Z\"\n  biotope_version: \"0.1.0\"\n  last_modified: \"2024-01-01T00:00:00Z\"\n  builds: []\n  knowledge_sources: []\n\n# Project-level metadata for annotation pre-fill\nproject_metadata:\n  description: \"Project description\"\n  url: \"https://example.com/project\"\n  creator:\n    name: \"John Doe\"\n    email: \"john@example.com\"\n  license: \"MIT\"\n  citation: \"Doe, J. (2024). Project Title. Journal Name.\"\n\n# Validation configuration\nannotation_validation:\n  enabled: true\n  minimum_required_fields:\n    - \"name\"\n    - \"description\"\n    - \"creator\"\n    - \"dateCreated\"\n    - \"distribution\"\n  field_validation:\n    name:\n      type: \"string\"\n      min_length: 1\n    description:\n      type: \"string\"\n      min_length: 10\n    creator:\n      type: \"object\"\n      required_keys: [\"name\"]\n    dateCreated:\n      type: \"string\"\n      format: \"date\"\n    distribution:\n      type: \"array\"\n      min_length: 1\n  remote_config:\n    url: \"https://cluster.example.com/validation.yaml\"\n    cache_duration: 3600\n    fallback: true\n</code></pre>"},{"location":"git-integration-dev/#git-integration-patterns","title":"Git Integration Patterns","text":""},{"location":"git-integration-dev/#common-helper-functions","title":"Common Helper Functions","text":"<p>All commands use these shared helper functions:</p> <pre><code>def _is_git_repo(directory: Path) -&gt; bool:\n    \"\"\"Check if directory is a Git repository.\"\"\"\n    try:\n        result = subprocess.run([\"git\", \"rev-parse\", \"--git-dir\"], cwd=directory, capture_output=True, text=True, check=True)\n        return True\n    except subprocess.CalledProcessError:\n        return False\n\ndef find_biotope_root() -&gt; Optional[Path]:\n    \"\"\"Find the biotope project root directory.\"\"\"\n    current = Path.cwd()\n    while current != current.parent:\n        if (current / \".biotope\").exists():\n            return current\n        current = current.parent\n    return None\n</code></pre>"},{"location":"git-integration-dev/#error-handling","title":"Error Handling","text":"<p>All commands follow consistent error handling:</p> <pre><code>try:\n    result = subprocess.run(cmd, cwd=biotope_root, capture_output=True, text=True, check=True)\n    return result.stdout.strip()\nexcept subprocess.CalledProcessError as e:\n    click.echo(f\"\u274c Git error: {e}\")\n    if e.stderr:\n        click.echo(f\"Error details: {e.stderr}\")\n    return None\n</code></pre>"},{"location":"git-integration-dev/#metadata-validation","title":"Metadata Validation","text":"<p>All metadata is validated against the Croissant ML schema before being committed. The validation process checks:</p> <ol> <li>Required Fields: Ensures all minimum required fields are present</li> <li>Field Types: Validates data types match expected schemas</li> <li>Field Constraints: Checks length, format, and content requirements</li> <li>Schema Compliance: Ensures metadata follows Croissant ML standards</li> </ol>"},{"location":"git-integration-dev/#remote-validation-configuration","title":"Remote Validation Configuration","text":"<p>Biotope supports remote validation configurations to enforce institutional or cluster-wide policies. This allows administrators to maintain centralized validation requirements that are automatically applied to all projects.</p>"},{"location":"git-integration-dev/#architecture","title":"Architecture","text":"<pre><code>def load_biotope_config(biotope_root: Path) -&gt; Dict:\n    \"\"\"Load biotope configuration with remote validation support.\"\"\"\n    config = load_local_config(biotope_root)\n\n    # Check for remote validation configuration\n    remote_config = config.get(\"annotation_validation\", {}).get(\"remote_config\", {})\n    if remote_config and remote_config.get(\"url\"):\n        remote_validation = _load_remote_validation_config(remote_config, biotope_root)\n        if remote_validation:\n            # Merge remote config with local config (local takes precedence)\n            merged_validation = _merge_validation_configs(remote_validation, validation_config)\n            config[\"annotation_validation\"] = merged_validation\n\n    return config\n</code></pre>"},{"location":"git-integration-dev/#configuration-structure","title":"Configuration Structure","text":"<pre><code># .biotope/config/biotope.yaml\nannotation_validation:\n  enabled: true\n  remote_config:\n    url: \"https://cluster.example.com/biotope-validation.yaml\"\n    cache_duration: 3600  # seconds\n    fallback_to_local: true\n  # Local overrides (optional)\n  minimum_required_fields: [\"name\", \"description\", \"creator\"]\n</code></pre>"},{"location":"git-integration-dev/#remote-configuration-format","title":"Remote Configuration Format","text":"<pre><code># https://cluster.example.com/biotope-validation.yaml\nannotation_validation:\n  enabled: true\n  minimum_required_fields:\n    - name\n    - description\n    - creator\n    - dateCreated\n    - distribution\n    - license\n  field_validation:\n    name:\n      type: string\n      min_length: 1\n    description:\n      type: string\n      min_length: 10\n    creator:\n      type: object\n      required_keys: [name]\n    dateCreated:\n      type: string\n      format: date\n    distribution:\n      type: array\n      min_length: 1\n    license:\n      type: string\n      min_length: 5\n</code></pre>"},{"location":"git-integration-dev/#caching-strategy","title":"Caching Strategy","text":"<p>Remote configurations are cached locally to improve performance and enable offline operation:</p> <pre><code>def _load_remote_validation_config(remote_config: Dict, biotope_root: Path) -&gt; Optional[Dict]:\n    \"\"\"Load validation configuration from a remote URL with caching.\"\"\"\n    url = remote_config[\"url\"]\n    cache_duration = remote_config.get(\"cache_duration\", 3600)\n\n    # Check cache first\n    cache_file = _get_cache_file_path(url, biotope_root)\n    if cache_file.exists():\n        cache_age = datetime.now() - datetime.fromtimestamp(cache_file.stat().st_mtime)\n        if cache_age.total_seconds() &lt; cache_duration:\n            return load_cached_config(cache_file)\n\n    # Fetch from remote and cache\n    remote_config_data = fetch_remote_config(url)\n    cache_remote_config(remote_config_data, cache_file)\n    return remote_config_data\n</code></pre>"},{"location":"git-integration-dev/#configuration-merging","title":"Configuration Merging","text":"<p>Local configurations can extend or override remote requirements:</p> <pre><code>def _merge_validation_configs(remote_config: Dict, local_config: Dict) -&gt; Dict:\n    \"\"\"Merge remote and local validation configurations.\"\"\"\n    merged = remote_config.copy()\n\n    # Merge required fields (union)\n    remote_fields = set(remote_config.get(\"minimum_required_fields\", []))\n    local_fields = set(local_config.get(\"minimum_required_fields\", []))\n    merged[\"minimum_required_fields\"] = list(remote_fields | local_fields)\n\n    # Merge field validation (local overrides remote)\n    remote_validation = remote_config.get(\"field_validation\", {})\n    local_validation = local_config.get(\"field_validation\", {})\n    merged[\"field_validation\"] = {**remote_validation, **local_validation}\n\n    return merged\n</code></pre>"},{"location":"git-integration-dev/#cli-commands","title":"CLI Commands","text":"<pre><code># Set remote validation URL\nbiotope config set-remote-validation --url https://cluster.example.com/validation.yaml\n\n# Show remote validation status\nbiotope config show-remote-validation\n\n# Clear validation cache\nbiotope config clear-validation-cache\n\n# Remove remote validation\nbiotope config remove-remote-validation\n</code></pre>"},{"location":"git-integration-dev/#use-cases","title":"Use Cases","text":"<ol> <li>Institutional Clusters: Enforce consistent metadata standards across all research projects</li> <li>Multi-site Collaborations: Share validation requirements between institutions</li> <li>Compliance Requirements: Ensure datasets meet regulatory or funding requirements</li> <li>Quality Assurance: Maintain high metadata quality standards</li> </ol>"},{"location":"git-integration-dev/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Fallback Behavior: Projects can fall back to local configuration if remote is unavailable</li> <li>Cache Management: Automatic cache invalidation based on configurable duration</li> <li>Security: HTTPS URLs recommended for production use</li> <li>Performance: Caching reduces network overhead and improves reliability </li> </ul>"},{"location":"git-integration-dev/#croissant-ml-integration","title":"Croissant ML Integration","text":""},{"location":"git-integration-dev/#metadata-structure","title":"Metadata Structure","text":"<p>All metadata follows Croissant ML standard:</p> <pre><code>{\n  \"@context\": {\"@vocab\": \"https://schema.org/\"},\n  \"@type\": \"Dataset\",\n  \"name\": \"experiment-dataset\",\n  \"description\": \"RNA-seq experiment data\",\n  \"distribution\": [\n    {\n      \"@type\": \"sc:FileObject\",\n      \"@id\": \"file_abc123\",\n      \"name\": \"experiment.csv\",\n      \"contentUrl\": \"data/raw/experiment.csv\",\n      \"sha256\": \"abc123...\",\n      \"contentSize\": 1024\n    }\n  ]\n}\n</code></pre>"},{"location":"git-integration-dev/#data-integrity","title":"Data Integrity","text":"<ul> <li>SHA256 checksums embedded in metadata</li> <li>Automatic validation before commits</li> <li>Data integrity checking via <code>biotope check-data</code></li> </ul>"},{"location":"git-integration-dev/#testing","title":"Testing","text":""},{"location":"git-integration-dev/#test-structure","title":"Test Structure","text":"<p>Tests verify Git integration without mocking Git:</p> <pre><code>def test_commit_success(self, runner, biotope_project):\n    \"\"\"Test successful commit.\"\"\"\n    with patch(\"biotope.commands.commit.find_biotope_root\", return_value=biotope_project):\n        # Create a change\n        with open(biotope_project / \".biotope\" / \"datasets\" / \"new.jsonld\", \"w\") as f:\n            json.dump({\"name\": \"new-dataset\"}, f)\n\n        result = runner.invoke(commit, [\"-m\", \"Add new dataset\"])\n        assert result.exit_code == 0\n        assert \"Commit\" in result.output\n</code></pre>"},{"location":"git-integration-dev/#git-command-testing","title":"Git Command Testing","text":"<p>Tests use actual Git commands:</p> <pre><code># Initialize Git repository\nsubprocess.run([\"git\", \"init\"], cwd=tmp_path, check=True)\nsubprocess.run([\"git\", \"add\", \".\"], cwd=tmp_path, check=True)\nsubprocess.run([\"git\", \"commit\", \"-m\", \"Initial commit\"], cwd=tmp_path, check=True)\n</code></pre>"},{"location":"git-integration-dev/#configuration","title":"Configuration","text":""},{"location":"git-integration-dev/#biotope-configuration","title":"Biotope Configuration","text":"<p><code>.biotope/config/biotope.yaml</code>:</p> <pre><code>version: \"1.0\"\ncroissant_schema_version: \"1.0\"\ndefault_metadata_template: \"scientific\"\ndata_storage:\n  type: \"local\"\n  path: \"data\"\nchecksum_algorithm: \"sha256\"\nauto_stage: true\ncommit_message_template: \"Update metadata: {description}\"\n</code></pre>"},{"location":"git-integration-dev/#git-configuration","title":"Git Configuration","text":"<p>Standard Git configuration applies - no biotope-specific Git config.</p>"},{"location":"git-integration-dev/#security-considerations","title":"Security Considerations","text":"<ul> <li>No custom version control reduces attack surface</li> <li>Git's battle-tested security model applies</li> <li>Checksums provide data integrity verification</li> <li>Metadata validation prevents malformed commits</li> </ul>"},{"location":"git-integration-dev/#performance","title":"Performance","text":"<ul> <li>Git operations are delegated to native Git binary</li> <li>No custom parsing or storage overhead</li> <li>Metadata files are small JSON-LD files</li> <li>Checksum calculation only on file changes</li> </ul>"},{"location":"git-integration-dev/#future-enhancements","title":"Future Enhancements","text":"<p>Planned improvements while maintaining Git-on-Top:</p> <ul> <li>Enhanced Croissant ML validation</li> <li>Metadata conflict resolution tools</li> <li>Integration with external metadata repositories</li> <li>Workflow automation features</li> </ul>"},{"location":"git-integration-dev/#conclusion","title":"Conclusion","text":"<p>The Git-on-Top implementation provides:</p> <ul> <li>Reliability: Battle-tested Git infrastructure</li> <li>Simplicity: No custom version control complexity</li> <li>Familiarity: Standard Git workflows and tools</li> <li>Maintainability: Minimal custom code to maintain</li> <li>Performance: Native Git performance</li> </ul> <p>This approach eliminates the need for custom version control while providing robust metadata management capabilities. </p>"},{"location":"git-integration-dev/#developer-admin-guide-annotation-validation","title":"Developer &amp; Admin Guide: Annotation Validation","text":"<p>This document describes the internals and configuration of the annotation validation system in Biotope (git-on-top mode).</p>"},{"location":"git-integration-dev/#configuration-structure_1","title":"Configuration Structure","text":"<p>Annotation validation is configured in <code>.biotope/config/biotope.yaml</code> under the <code>annotation_validation</code> key:</p> <pre><code>annotation_validation:\n  enabled: true\n  minimum_required_fields:\n    - name\n    - description\n    - creator\n    - dateCreated\n    - distribution\n  field_validation:\n    name:\n      type: string\n      min_length: 1\n    description:\n      type: string\n      min_length: 10\n    creator:\n      type: object\n      required_keys: [name]\n    dateCreated:\n      type: string\n      format: date\n    distribution:\n      type: array\n      min_length: 1\n</code></pre> <ul> <li>enabled: Toggle validation on/off.</li> <li>minimum_required_fields: List of fields that must be present in each metadata file.</li> <li>field_validation: Per-field validation rules (type, min_length, required_keys, etc).</li> </ul>"},{"location":"git-integration-dev/#validation-logic","title":"Validation Logic","text":"<p>Validation is implemented in <code>biotope/validation.py</code>: - <code>is_metadata_annotated(metadata, config)</code> checks if a metadata dict meets requirements. - <code>_validate_field(value, field_name, validation_rules)</code> applies per-field rules. - <code>get_annotation_status_for_files(biotope_root, file_paths)</code> returns annotation status for a list of files.</p> <p>The system supports: - Type checks (<code>string</code>, <code>object</code>, <code>array</code>) - Minimum length for strings/arrays - Required keys for objects - ISO date format for date fields</p>"},{"location":"git-integration-dev/#extending-validation","title":"Extending Validation","text":"<p>To add new validation rules: - Update the <code>field_validation</code> structure in the config (via CLI or manually). - Extend <code>_validate_field</code> in <code>biotope/validation.py</code></p>"},{"location":"git-integration/","title":"Git Integration for Users","text":"<p>Biotope makes metadata version control simple by using Git under the hood. If you know Git, you already know how to use biotope's version control!</p>"},{"location":"git-integration/#quick-start","title":"Quick Start","text":"<p>Think of biotope as Git for your scientific metadata. The workflow is familiar:</p> <pre><code># 1. Initialize your project\nbiotope init\n\n# 2. Add your data files\nbiotope add data/raw/experiment.csv\n\n# 3. Create metadata (like staging changes)\nbiotope annotate interactive --staged\n\n# Or complete incomplete annotations\nbiotope annotate interactive --incomplete\n\n# 4. Commit your metadata\nbiotope commit -m \"Add RNA-seq dataset with quality metrics\"\n\n# 5. Share with others\nbiotope push\n</code></pre>"},{"location":"git-integration/#how-it-works","title":"How It Works","text":"<p>Biotope stores your metadata in a <code>.biotope/</code> folder that Git tracks automatically. Your data files stay in the <code>data/</code> folder (not in Git), but biotope keeps track of them through metadata.</p> <pre><code>your-project/\n\u251c\u2500\u2500 .biotope/              # Your metadata (tracked by Git)\n\u2502   \u2514\u2500\u2500 datasets/          # Metadata files\n\u251c\u2500\u2500 data/                  # Your data files (not in Git)\n\u2502   \u251c\u2500\u2500 raw/\n\u2502   \u2514\u2500\u2500 processed/\n\u2514\u2500\u2500 .git/                  # Git repository\n</code></pre>"},{"location":"git-integration/#commands-youll-use","title":"Commands You'll Use","text":""},{"location":"git-integration/#biotope-init","title":"<code>biotope init</code>","text":"<p>Sets up your project and optionally initializes Git. Now includes project-level metadata collection for annotation pre-filling.</p> <pre><code>biotope init\n# Follow the prompts to configure your project\n# - Project name\n# - Git integration\n# - Knowledge graph (optional)\n# - Project metadata (optional, for annotation pre-fill)\n</code></pre>"},{"location":"git-integration/#biotope-config","title":"<code>biotope config</code>","text":"<p>Manage project configuration and metadata settings.</p> <pre><code># Set project-level metadata for annotation pre-fill\nbiotope config set-project-metadata\n\n# View current project metadata\nbiotope config show-project-metadata\n\n# Configure validation requirements\nbiotope config show-validation\n</code></pre>"},{"location":"git-integration/#biotope-add","title":"<code>biotope add</code>","text":"<p>Adds data files to your project and prepares them for metadata creation.</p> <pre><code>biotope add data/raw/experiment.csv\nbiotope add data/raw/ --recursive  # Add entire directory\n</code></pre>"},{"location":"git-integration/#biotope-status","title":"<code>biotope status</code>","text":"<p>Shows what metadata changes are ready to commit.</p> <pre><code>biotope status                    # See all changes\nbiotope status --biotope-only     # See only metadata changes\n</code></pre>"},{"location":"git-integration/#biotope-commit","title":"<code>biotope commit</code>","text":"<p>Saves your metadata changes (just like <code>git commit</code>).</p> <pre><code>biotope commit -m \"Add experiment dataset\"\nbiotope commit -m \"Update metadata\" --author \"Your Name &lt;email@example.com&gt;\"\nbiotope commit -m \"Fix typo\" --amend  # Fix last commit\n</code></pre>"},{"location":"git-integration/#biotope-log","title":"<code>biotope log</code>","text":"<p>Shows your metadata history.</p> <pre><code>biotope log                       # Full history\nbiotope log --oneline             # One line per commit\nbiotope log -n 5                  # Last 5 commits\nbiotope log --since \"2024-01-01\"  # Commits since date\n</code></pre>"},{"location":"git-integration/#biotope-push-biotope-pull","title":"<code>biotope push</code> / <code>biotope pull</code>","text":"<p>Share metadata with your team.</p> <pre><code>biotope push                      # Share your changes\nbiotope pull                      # Get latest changes from team\nbiotope pull --rebase             # Pull with rebase\n</code></pre>"},{"location":"git-integration/#biotope-check-data","title":"<code>biotope check-data</code>","text":"<p>Verify your data files haven't been corrupted.</p> <pre><code>biotope check-data                # Check all files\nbiotope check-data -f data/raw/experiment.csv  # Check specific file\n</code></pre>"},{"location":"git-integration/#your-git-knowledge-applies","title":"Your Git Knowledge Applies","text":"<p>Since biotope uses Git, all your Git skills work:</p> <pre><code># Branching\ngit checkout -b new-experiment\nbiotope add data/raw/new-data.csv\nbiotope commit -m \"Add new experiment\"\ngit checkout main\ngit merge new-experiment\n\n# Viewing changes\ngit diff .biotope/               # See metadata changes\ngit log -- .biotope/             # View metadata history\n\n# Collaboration\ngit remote add origin https://github.com/team/project.git\nbiotope push\n</code></pre>"},{"location":"git-integration/#common-workflows","title":"Common Workflows","text":""},{"location":"git-integration/#setting-up-a-new-project","title":"Setting Up a New Project","text":"<pre><code># 1. Initialize project with project metadata\nbiotope init\n# Enter project name, enable Git, set project metadata\n\n# 2. Add your data files\nbiotope add data/raw/experiment.csv\n\n# 3. Create metadata (pre-filled with project metadata)\nbiotope annotate interactive --staged\n\n# 4. Commit and share\nbiotope commit -m \"Add experiment dataset\"\nbiotope push\n</code></pre>"},{"location":"git-integration/#adding-new-data","title":"Adding New Data","text":"<pre><code># 1. Add your data files\nbiotope add data/raw/new-experiment.csv\n\n# 2. Create metadata (with project metadata pre-fill)\nbiotope annotate interactive --staged\n\n# 3. Commit and share\nbiotope commit -m \"Add new experiment: 24 samples, 3 conditions\"\nbiotope push\n</code></pre>"},{"location":"git-integration/#updating-existing-metadata","title":"Updating Existing Metadata","text":"<pre><code># 1. Check what needs updating\nbiotope status\n\n# 2. Edit metadata files or re-annotate\nbiotope annotate interactive -f data/raw/experiment.csv\n\n# 3. Commit changes\nbiotope commit -m \"Update experiment description and add QC metrics\"\n</code></pre>"},{"location":"git-integration/#completing-incomplete-annotations","title":"Completing Incomplete Annotations","text":"<pre><code># 1. Check which files need annotation\nbiotope status\n\n# 2. Complete annotations for all incomplete tracked files\nbiotope annotate interactive --incomplete\n\n# 3. Commit the completed annotations\nbiotope commit -m \"Complete metadata for all tracked datasets\"\n</code></pre>"},{"location":"git-integration/#managing-project-metadata","title":"Managing Project Metadata","text":"<pre><code># 1. Set or update project metadata\nbiotope config set-project-metadata\n# Enter: description, URL, creator, license, citation\n\n# 2. View current project metadata\nbiotope config show-project-metadata\n\n# 3. Use in annotation (automatically pre-filled)\nbiotope annotate interactive --staged\n</code></pre>"},{"location":"git-integration/#working-with-your-team","title":"Working with Your Team","text":"<pre><code># 1. Get latest changes\nbiotope pull\n\n# 2. Make your changes\nbiotope add data/raw/my-experiment.csv\nbiotope annotate interactive --staged\n\n# 3. Share your work\nbiotope commit -m \"Add my experiment dataset\"\nbiotope push\n</code></pre>"},{"location":"git-integration/#project-metadata-benefits","title":"Project Metadata Benefits","text":"<p>Setting up project-level metadata provides several benefits:</p> <ol> <li>Faster Annotation: Forms are pre-filled with project information</li> <li>Consistency: All datasets use the same project metadata</li> <li>Team Coordination: Everyone uses consistent project details</li> <li>Reduced Errors: Less manual entry means fewer typos</li> </ol>"},{"location":"git-integration/#example-project-metadata","title":"Example Project Metadata","text":"<pre><code>project_metadata:\n  description: \"Comprehensive protein structure analysis dataset\"\n  url: \"https://github.com/team/protein-project\"\n  creator:\n    name: \"Dr. Jane Smith\"\n    email: \"jane.smith@university.edu\"\n  license: \"MIT\"\n  citation: \"Smith, J. et al. (2024). Protein Structure Dataset. Nature Data.\"\n</code></pre>"},{"location":"git-integration/#best-practices","title":"Best Practices","text":""},{"location":"git-integration/#project-setup","title":"Project Setup","text":"<ul> <li>Set project metadata during initialization or early in the project</li> <li>Use consistent project metadata across all team members</li> <li>Update project metadata when project details change</li> </ul>"},{"location":"git-integration/#commit-messages","title":"Commit Messages","text":"<p>Write clear, descriptive commit messages:</p> <pre><code># Good\nbiotope commit -m \"Add RNA-seq dataset with quality metrics\"\n\n# Better\nbiotope commit -m \"Add RNA-seq dataset: 24 samples, 3 conditions, QC passed\"\n</code></pre>"},{"location":"git-integration/#data-organization","title":"Data Organization","text":"<p>Keep your data organized:</p> <pre><code>data/\n\u251c\u2500\u2500 raw/\n\u2502   \u251c\u2500\u2500 experiment_1/\n\u2502   \u2502   \u251c\u2500\u2500 samples.csv\n\u2502   \u2502   \u2514\u2500\u2500 measurements.csv\n\u2502   \u2514\u2500\u2500 experiment_2/\n\u2514\u2500\u2500 processed/\n    \u2514\u2500\u2500 combined_results.csv\n</code></pre>"},{"location":"git-integration/#regular-checks","title":"Regular Checks","text":"<ul> <li>Run <code>biotope check-data</code> regularly to ensure data integrity</li> <li>Use <code>biotope status</code> before committing to see what's changing</li> <li>Keep metadata and data in sync</li> <li>Review project metadata periodically with <code>biotope config show-project-metadata</code></li> </ul>"},{"location":"git-integration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"git-integration/#not-in-a-git-repository","title":"\"Not in a Git repository\"","text":"<pre><code># Initialize Git\ngit init\n# Or run biotope init which offers Git initialization\n</code></pre>"},{"location":"git-integration/#no-changes-to-commit","title":"\"No changes to commit\"","text":"<pre><code># Check if files are staged\nbiotope status\n# Stage changes if needed\ngit add .biotope/\n</code></pre>"},{"location":"git-integration/#remote-origin-not-found","title":"\"Remote 'origin' not found\"","text":"<pre><code># Add remote repository\ngit remote add origin https://github.com/username/repo.git\n</code></pre>"},{"location":"git-integration/#data-integrity-issues","title":"Data integrity issues","text":"<pre><code># Check for corrupted files\nbiotope check-data\n# Re-download or regenerate corrupted files\n</code></pre>"},{"location":"git-integration/#whats-different-from-git","title":"What's Different from Git?","text":"<ul> <li>Focus: Biotope focuses on metadata, not code</li> <li>Validation: Metadata is automatically validated before commits</li> <li>Checksums: Data integrity is tracked automatically</li> <li>Croissant ML: Metadata follows scientific standards</li> </ul>"},{"location":"git-integration/#whats-the-same-as-git","title":"What's the Same as Git?","text":"<ul> <li>Commands: Same workflow (add, commit, push, pull)</li> <li>Options: Same flags and options work</li> <li>Collaboration: Same branching, merging, and remote workflows</li> <li>History: Same log, diff, and status functionality</li> </ul> <p>That's it! Your Git knowledge transfers directly to biotope. The only difference is that you're versioning scientific metadata instead of code. </p>"},{"location":"git-integration/#annotation-validation-and-status-reporting","title":"Annotation Validation and Status Reporting","text":"<p>Biotope now supports project-specific annotation requirements, allowing administrators to define what fields must be present in dataset metadata for it to be considered \"annotated\". This helps ensure data quality and consistency across your project.</p>"},{"location":"git-integration/#how-annotation-status-works","title":"How Annotation Status Works","text":"<ul> <li>The <code>biotope status</code> command now shows, for each tracked and staged dataset, whether it is considered annotated (\u2705) or not (\u26a0\ufe0f), based on the current project requirements.</li> <li>The summary section reports how many datasets are annotated and how many are not.</li> </ul>"},{"location":"git-integration/#what-is-annotated","title":"What is \"Annotated\"?","text":"<p>A dataset is considered annotated if its metadata file (in <code>.biotope/datasets/</code>) contains all required fields, and those fields meet the validation rules set by your project admin. By default, required fields include <code>name</code>, <code>description</code>, <code>creator</code>, <code>dateCreated</code>, and <code>distribution</code>, but this can be customized.</p>"},{"location":"git-integration/#example-status-output","title":"Example: Status Output","text":"<pre><code>$ biotope status\n\n**Biotope Project Status**\nProject: my-biotope\nLocation: /path/to/project\nGit Repository: \u2705\n\n**Changes to be committed:**\nStatus  File                              Annotated\nA       .biotope/datasets/mydata.jsonld   \u2705\n\n**Tracked Datasets:**\nDataset         Annotated   Status\nmydata          \u2705          Complete\nrawdata         \u26a0\ufe0f          Incomplete (2 issues)\n\n**Summary:**\n  Staged: 1 file(s) (1 annotated, 0 unannotated)\n  Tracked datasets: 2 (1 annotated, 1 unannotated)\n</code></pre>"},{"location":"git-integration/#customizing-annotation-requirements","title":"Customizing Annotation Requirements","text":"<p>Admins can configure what fields are required and how they are validated using the <code>biotope config</code> command group.</p>"},{"location":"git-integration/#show-current-requirements","title":"Show Current Requirements","text":"<pre><code>$ biotope config show-validation\n\n**Annotation Validation Configuration**\nEnabled: \u2705\n\n**Required Fields:**\nField        Type      Validation Rules\nname         string    min_length: 1\ndescription  string    min_length: 10\ncreator      object    required_keys: name\ndateCreated  string    format: date\ndistribution array     min_length: 1\n</code></pre>"},{"location":"git-integration/#add-a-required-field","title":"Add a Required Field","text":"<pre><code>$ biotope config set-validation --field license --type string --min-length 3\n</code></pre>"},{"location":"git-integration/#remove-a-required-field","title":"Remove a Required Field","text":"<pre><code>$ biotope config remove-validation --field license\n</code></pre>"},{"location":"git-integration/#enabledisable-validation","title":"Enable/Disable Validation","text":"<pre><code>$ biotope config toggle-validation --enabled\n$ biotope config toggle-validation --disabled\n</code></pre>"},{"location":"git-integration/#remote-validation-configuration","title":"Remote Validation Configuration","text":"<p>For institutional clusters or multi-site collaborations, you can use remote validation configurations to enforce consistent policies across all projects.</p>"},{"location":"git-integration/#set-remote-validation-url","title":"Set Remote Validation URL","text":"<pre><code># Set a remote validation configuration\n$ biotope config set-remote-validation --url https://cluster.example.com/validation.yaml\n\n# With custom cache duration (in seconds)\n$ biotope config set-remote-validation --url https://cluster.example.com/validation.yaml --cache-duration 7200\n\n# Disable fallback to local config if remote fails\n$ biotope config set-remote-validation --url https://cluster.example.com/validation.yaml --no-fallback\n</code></pre>"},{"location":"git-integration/#show-remote-validation-status","title":"Show Remote Validation Status","text":"<pre><code>$ biotope config show-remote-validation\n</code></pre> <p>This shows: - Remote URL and configuration - Cache status and age - Effective configuration (remote + local merged)</p>"},{"location":"git-integration/#clear-validation-cache","title":"Clear Validation Cache","text":"<pre><code>$ biotope config clear-validation-cache\n</code></pre>"},{"location":"git-integration/#remove-remote-validation","title":"Remove Remote Validation","text":"<pre><code>$ biotope config remove-remote-validation\n</code></pre>"},{"location":"git-integration/#example-remote-configuration","title":"Example Remote Configuration","text":"<pre><code># https://cluster.example.com/validation.yaml\nannotation_validation:\n  enabled: true\n  minimum_required_fields:\n    - name\n    - description\n    - creator\n    - dateCreated\n    - distribution\n    - license\n  field_validation:\n    name:\n      type: string\n      min_length: 1\n    description:\n      type: string\n      min_length: 10\n    creator:\n      type: object\n      required_keys: [name]\n    license:\n      type: string\n      min_length: 5\n</code></pre>"},{"location":"git-integration/#how-remote-validation-works","title":"How Remote Validation Works","text":"<ol> <li>Caching: Remote configurations are cached locally for performance</li> <li>Merging: Local configurations can extend or override remote requirements</li> <li>Fallback: If remote is unavailable, falls back to local configuration</li> <li>Updates: Cache is refreshed based on configurable duration</li> </ol>"},{"location":"git-integration/#use-cases","title":"Use Cases","text":"<ul> <li>Institutional Clusters: Enforce consistent metadata standards</li> <li>Multi-site Collaborations: Share validation requirements</li> <li>Compliance: Ensure datasets meet regulatory requirements</li> <li>Quality Assurance: Maintain high metadata quality standards</li> </ul> <p>See also: Admin documentation for advanced configuration and developer details. </p>"},{"location":"api-docs/add/","title":"Biotope Add","text":"<p>Draft stage</p> <p>Biotope is in draft stage. Functionality may be missing or incomplete. The API is subject to change.</p> <p>The <code>biotope add</code> command adds data files to your biotope project and prepares them for metadata creation. It calculates checksums for data integrity and creates basic Croissant ML metadata files.</p>"},{"location":"api-docs/add/#command-signature","title":"Command Signature","text":"<pre><code>biotope add [OPTIONS] [PATHS]...\n</code></pre>"},{"location":"api-docs/add/#arguments","title":"Arguments","text":"<ul> <li><code>PATHS</code>: One or more file or directory paths to add. Can be absolute or relative paths.</li> </ul>"},{"location":"api-docs/add/#options","title":"Options","text":"<ul> <li><code>--recursive, -r</code>: Add directories recursively (default: False)</li> <li><code>--force, -f</code>: Force add even if file already tracked (default: False)</li> </ul>"},{"location":"api-docs/add/#examples","title":"Examples","text":""},{"location":"api-docs/add/#add-a-single-file","title":"Add a single file","text":"<pre><code>biotope add data/raw/experiment.csv\n</code></pre>"},{"location":"api-docs/add/#add-multiple-files","title":"Add multiple files","text":"<pre><code>biotope add data/raw/experiment1.csv data/raw/experiment2.csv\n</code></pre>"},{"location":"api-docs/add/#add-directory-recursively","title":"Add directory recursively","text":"<pre><code>biotope add data/raw/ --recursive\n</code></pre>"},{"location":"api-docs/add/#force-add-already-tracked-file","title":"Force add already tracked file","text":"<pre><code>biotope add data/raw/experiment.csv --force\n</code></pre>"},{"location":"api-docs/add/#add-files-with-absolute-paths","title":"Add files with absolute paths","text":"<pre><code>biotope add /absolute/path/to/experiment.csv\n</code></pre>"},{"location":"api-docs/add/#what-it-does","title":"What It Does","text":"<ol> <li>Validates Environment: Checks that you're in a biotope project and Git repository</li> <li>Calculates Checksums: Computes SHA256 checksums for data integrity</li> <li>Creates Metadata: Generates basic Croissant ML metadata files in <code>.biotope/datasets/</code></li> <li>Stages Changes: Automatically stages metadata changes in Git</li> <li>Reports Results: Shows which files were added and which were skipped</li> </ol>"},{"location":"api-docs/add/#output","title":"Output","text":"<p>The command provides detailed feedback:</p> <pre><code>\ud83d\udcc1 Added data/raw/experiment.csv (SHA256: e471e5fc...)\n\n\u2705 Added 1 file(s) to biotope project:\n  + data/raw/experiment.csv\n\n\ud83d\udca1 Next steps:\n  1. Run 'biotope status' to see staged files\n  2. Run 'biotope annotate interactive --staged' to create metadata\n  3. Run 'biotope commit -m \"message\"' to save changes\n\n\ud83d\udca1 For incomplete annotations:\n  1. Run 'biotope status' to see which files need annotation\n  2. Run 'biotope annotate interactive --incomplete' to complete them\n</code></pre>"},{"location":"api-docs/add/#metadata-structure","title":"Metadata Structure","text":"<p>Creates JSON-LD files in <code>.biotope/datasets/</code> with this structure:</p> <pre><code>{\n  \"@context\": {\"@vocab\": \"https://schema.org/\"},\n  \"@type\": \"Dataset\",\n  \"name\": \"experiment\",\n  \"description\": \"Dataset for experiment.csv\",\n  \"distribution\": [\n    {\n      \"@type\": \"sc:FileObject\",\n      \"@id\": \"file_e471e5fc\",\n      \"name\": \"experiment.csv\",\n      \"contentUrl\": \"data/raw/experiment.csv\",\n      \"sha256\": \"e471e5fc1234567890abcdef...\",\n      \"contentSize\": 1024,\n      \"dateCreated\": \"2024-01-15T10:30:00Z\"\n    }\n  ]\n}\n</code></pre>"},{"location":"api-docs/add/#error-handling","title":"Error Handling","text":""},{"location":"api-docs/add/#common-errors","title":"Common Errors","text":"<ul> <li>\"Not in a biotope project\": Run <code>biotope init</code> first</li> <li>\"Not in a Git repository\": Initialize Git with <code>git init</code></li> <li>\"File already tracked\": Use <code>--force</code> to override</li> <li>\"Path does not exist\": Check the file path</li> </ul>"},{"location":"api-docs/add/#error-messages","title":"Error Messages","text":"<pre><code>\u274c Not in a biotope project. Run 'biotope init' first.\n\u274c Not in a Git repository. Initialize Git first with 'git init'.\n\u26a0\ufe0f  File 'data/raw/experiment.csv' already tracked (use --force to override)\n\u26a0\ufe0f  Skipping directory 'data/raw/' (use --recursive to add contents)\n</code></pre>"},{"location":"api-docs/add/#integration","title":"Integration","text":""},{"location":"api-docs/add/#with-other-commands","title":"With Other Commands","text":"<ul> <li><code>biotope status</code>: See what files are staged</li> <li><code>biotope annotate</code>: Create detailed metadata</li> <li><code>biotope commit</code>: Save metadata changes</li> <li><code>biotope check-data</code>: Verify data integrity</li> </ul>"},{"location":"api-docs/add/#workflow-integration","title":"Workflow Integration","text":"<pre><code># 1. Add files\nbiotope add data/raw/experiment.csv\n\n# 2. Create metadata\nbiotope annotate interactive --staged\n\n# 3. Commit changes\nbiotope commit -m \"Add experiment dataset\"\n</code></pre>"},{"location":"api-docs/add/#technical-details","title":"Technical Details","text":""},{"location":"api-docs/add/#file-tracking","title":"File Tracking","text":"<p>Files are tracked by their relative path from the biotope project root. The command handles both absolute and relative paths correctly.</p>"},{"location":"api-docs/add/#checksum-calculation","title":"Checksum Calculation","text":"<p>Uses SHA256 algorithm for data integrity verification:</p> <pre><code>def calculate_file_checksum(file_path: Path) -&gt; str:\n    \"\"\"Calculate SHA256 checksum of a file.\"\"\"\n    sha256_hash = hashlib.sha256()\n    with open(file_path, \"rb\") as f:\n        for chunk in iter(lambda: f.read(4096), b\"\"):\n            sha256_hash.update(chunk)\n    return sha256_hash.hexdigest()\n</code></pre>"},{"location":"api-docs/add/#git-integration","title":"Git Integration","text":"<p>Automatically stages metadata changes:</p> <pre><code>def _stage_git_changes(biotope_root: Path) -&gt; None:\n    \"\"\"Stage .biotope/ changes in Git.\"\"\"\n    subprocess.run([\"git\", \"add\", \".biotope/\"], cwd=biotope_root, check=True)\n</code></pre>"},{"location":"api-docs/add/#best-practices","title":"Best Practices","text":"<ol> <li>Use Relative Paths: Prefer relative paths for better portability</li> <li>Organize Data: Keep data files in structured directories</li> <li>Check Status: Use <code>biotope status</code> to verify what was added</li> <li>Review Metadata: Always review generated metadata before committing</li> </ol>"},{"location":"api-docs/add/#limitations","title":"Limitations","text":"<ul> <li>Only supports local files (not URLs)</li> <li>Requires Git repository</li> <li>Metadata is basic and should be enhanced with <code>biotope annotate</code></li> <li>No support for symbolic links</li> </ul> <p>Add command implementation for tracking data files and metadata.</p>"},{"location":"api-docs/add/#biotope.commands.add.add","title":"<code>add(paths, recursive, force)</code>","text":"<p>Add data files to biotope project and stage for metadata creation.</p> <p>This command calculates checksums for data files and prepares them for metadata annotation. Files are tracked in the .biotope/datasets/ directory with their checksums embedded in Croissant ML metadata.</p> <p>Parameters:</p> Name Type Description Default <code>paths</code> <code>tuple[Path, ...]</code> <p>Files or directories to add</p> required <code>recursive</code> <code>bool</code> <p>Add directories recursively</p> required <code>force</code> <code>bool</code> <p>Force add even if already tracked</p> required Source code in <code>biotope/commands/add.py</code> <pre><code>@click.command()\n@click.argument(\"paths\", nargs=-1, type=click.Path(exists=True, path_type=Path))\n@click.option(\n    \"--recursive\",\n    \"-r\",\n    is_flag=True,\n    help=\"Add directories recursively\",\n)\n@click.option(\n    \"--force\",\n    \"-f\",\n    is_flag=True,\n    help=\"Force add even if file already tracked\",\n)\ndef add(paths: tuple[Path, ...], recursive: bool, force: bool) -&gt; None:\n    \"\"\"\n    Add data files to biotope project and stage for metadata creation.\n\n    This command calculates checksums for data files and prepares them for metadata\n    annotation. Files are tracked in the .biotope/datasets/ directory with their\n    checksums embedded in Croissant ML metadata.\n\n    Args:\n        paths: Files or directories to add\n        recursive: Add directories recursively\n        force: Force add even if already tracked\n    \"\"\"\n    if not paths:\n        click.echo(\"\u274c No paths specified. Use 'biotope add &lt;file_or_directory&gt;'\")\n        raise click.Abort\n\n    # Find biotope project root\n    biotope_root = find_biotope_root()\n    if not biotope_root:\n        click.echo(\"\u274c Not in a biotope project. Run 'biotope init' first.\")\n        raise click.Abort\n\n    # Check if we're in a Git repository\n    if not is_git_repo(biotope_root):\n        click.echo(\"\u274c Not in a Git repository. Initialize Git first with 'git init'.\")\n        raise click.Abort\n\n    datasets_dir = biotope_root / \".biotope\" / \"datasets\"\n    datasets_dir.mkdir(parents=True, exist_ok=True)\n\n    added_files = []\n    skipped_files = []\n\n    for path in paths:\n        if path.is_file():\n            result = _add_file(path, biotope_root, datasets_dir, force)\n            if result:\n                added_files.append(path)\n            else:\n                skipped_files.append(path)\n        elif path.is_dir() and recursive:\n            for file_path in path.rglob(\"*\"):\n                if file_path.is_file():\n                    result = _add_file(file_path, biotope_root, datasets_dir, force)\n                    if result:\n                        added_files.append(file_path)\n                    else:\n                        skipped_files.append(file_path)\n        elif path.is_dir():\n            click.echo(f\"\u26a0\ufe0f  Skipping directory '{path}' (use --recursive to add contents)\")\n            skipped_files.append(path)\n\n    # Stage changes in Git\n    if added_files:\n        _stage_git_changes(biotope_root)\n\n    # Report results\n    if added_files:\n        click.echo(f\"\\n\u2705 Added {len(added_files)} file(s) to biotope project:\")\n        for file_path in added_files:\n            click.echo(f\"  + {file_path}\")\n\n    if skipped_files:\n        click.echo(f\"\\n\u26a0\ufe0f  Skipped {len(skipped_files)} file(s):\")\n        for file_path in skipped_files:\n            click.echo(f\"  - {file_path}\")\n\n    if added_files:\n        click.echo(f\"\\n\ud83d\udca1 Next steps:\")\n        click.echo(f\"  1. Run 'biotope status' to see staged files\")\n        click.echo(f\"  2. Run 'biotope annotate interactive --staged' to create metadata\")\n        click.echo(f\"  3. Run 'biotope commit -m \\\"message\\\"' to save changes\")\n</code></pre>"},{"location":"api-docs/add/#biotope.commands.add.calculate_file_checksum","title":"<code>calculate_file_checksum(file_path)</code>","text":"<p>Calculate SHA256 checksum of a file.</p> Source code in <code>biotope/commands/add.py</code> <pre><code>def calculate_file_checksum(file_path: Path) -&gt; str:\n    \"\"\"Calculate SHA256 checksum of a file.\"\"\"\n    sha256_hash = hashlib.sha256()\n    with open(file_path, \"rb\") as f:\n        for chunk in iter(lambda: f.read(4096), b\"\"):\n            sha256_hash.update(chunk)\n    return sha256_hash.hexdigest()\n</code></pre>"},{"location":"api-docs/add/#biotope.commands.add.is_file_tracked","title":"<code>is_file_tracked(file_path, biotope_root)</code>","text":"<p>Check if a file is already tracked in biotope.</p> Source code in <code>biotope/commands/add.py</code> <pre><code>def is_file_tracked(file_path: Path, biotope_root: Path) -&gt; bool:\n    \"\"\"Check if a file is already tracked in biotope.\"\"\"\n    # Resolve the file path to absolute path if it's relative\n    if not file_path.is_absolute():\n        file_path = file_path.resolve()\n\n    # Check datasets directory\n    datasets_dir = biotope_root / \".biotope\" / \"datasets\"\n    for dataset_file in datasets_dir.glob(\"*.jsonld\"):\n        try:\n            with open(dataset_file) as f:\n                metadata = json.load(f)\n                for distribution in metadata.get(\"distribution\", []):\n                    if distribution.get(\"contentUrl\") == str(file_path.relative_to(biotope_root)):\n                        return True\n        except (json.JSONDecodeError, KeyError):\n            continue\n\n    return False\n</code></pre>"},{"location":"api-docs/annotate/","title":"Biotope Annotate","text":"<p>Draft stage</p> <p>Biotope is in draft stage. Functionality may be missing or incomplete. The API is subject to change.</p>"},{"location":"api-docs/annotate/#overview","title":"Overview","text":"<p>The <code>biotope annotate</code> command creates dataset metadata definitions in Croissant format. It provides interactive and programmatic ways to annotate your data with consistent metadata.</p>"},{"location":"api-docs/annotate/#features","title":"Features","text":""},{"location":"api-docs/annotate/#interactive-annotation","title":"Interactive Annotation","text":"<p>The <code>biotope annotate interactive</code> command provides a user-friendly interface for creating metadata:</p> <ul> <li>Project Metadata Pre-fill: Automatically pre-fills fields with project-level metadata if available</li> <li>Staged Files: Annotate files that have been staged with <code>biotope add</code> or <code>biotope get</code></li> <li>Incomplete Annotations: Complete or update existing metadata files</li> <li>Validation: Built-in validation of metadata structure and content</li> </ul>"},{"location":"api-docs/annotate/#project-metadata-integration","title":"Project Metadata Integration","text":"<p>When using interactive annotation, biotope automatically loads project-level metadata from <code>.biotope/config/biotope.yaml</code> and pre-fills the annotation form with:</p> <ul> <li>Description: Project description (if not already specified)</li> <li>URL: Project URL</li> <li>Creator: Project creator information</li> <li>License: Project license</li> <li>Citation: Project citation information</li> </ul> <p>This makes the annotation process faster and ensures consistency across all datasets in the project.</p>"},{"location":"api-docs/annotate/#commands","title":"Commands","text":""},{"location":"api-docs/annotate/#biotope-annotate-interactive","title":"<code>biotope annotate interactive</code>","text":"<p>Interactive annotation process for files with project metadata pre-fill.</p> <p>Usage: <pre><code>biotope annotate interactive [OPTIONS]\n</code></pre></p> <p>Options: - <code>--file, -f</code>: Specific file to annotate - <code>--prefill-metadata</code>: JSON string with metadata to pre-fill - <code>--staged</code>: Annotate all staged files - <code>--incomplete</code>: Complete incomplete annotations</p> <p>Examples: <pre><code># Interactive annotation with project metadata pre-fill\nbiotope annotate interactive\n\n# Annotate a specific file\nbiotope annotate interactive --file data/raw/experiment.csv\n\n# Annotate all staged files\nbiotope annotate interactive --staged\n\n# Complete incomplete annotations\nbiotope annotate interactive --incomplete\n\n# Pre-fill with custom metadata\nbiotope annotate interactive --prefill-metadata '{\"description\": \"Custom description\"}'\n</code></pre></p>"},{"location":"api-docs/annotate/#biotope-annotate-create","title":"<code>biotope annotate create</code>","text":"<p>Create metadata from command line parameters (non-interactive mode).</p> <p>Usage: <pre><code>biotope annotate create [OPTIONS]\n</code></pre></p> <p>Required Options: - <code>--name, -n</code>: Name of the dataset - <code>--data-source, -s</code>: URL or path to the data source - <code>--access-restrictions, -a</code>: Note on access restrictions (e.g., public, restricted, private)</p> <p>Optional Options: - <code>--output, -o</code>: Output file path (default: metadata.json) - <code>--description, -d</code>: Description of the dataset - <code>--contact, -c</code>: Responsible contact person (default: current user) - <code>--date</code>: Date of creation in ISO format (default: today) - <code>--format, -f</code>: Description of file format - <code>--legal-obligations, -l</code>: Note on legal obligations - <code>--collaboration-partner, -p</code>: Collaboration partner and institute</p> <p>Examples: <pre><code># Create metadata with required fields only\nbiotope annotate create \\\n  --name \"RNA-seq Dataset\" \\\n  --data-source \"https://example.com/rna-seq-data\" \\\n  --access-restrictions \"Public\"\n\n# Create metadata with all fields\nbiotope annotate create \\\n  --name \"Proteomics Dataset\" \\\n  --description \"Mass spectrometry data from protein samples\" \\\n  --data-source \"https://example.com/proteomics-data\" \\\n  --contact \"researcher@university.edu\" \\\n  --date \"2024-01-15\" \\\n  --access-restrictions \"Restricted to academic use\" \\\n  --format \"mzML\" \\\n  --legal-obligations \"Data sharing agreement required\" \\\n  --collaboration-partner \"Proteomics Center, University Hospital\" \\\n  --output \"proteomics_metadata.json\"\n</code></pre></p> <p>Generated Metadata Structure: <pre><code>{\n  \"@context\": {\n    \"@vocab\": \"https://schema.org/\",\n    \"cr\": \"https://mlcommons.org/croissant/\",\n    \"ml\": \"http://ml-schema.org/\",\n    \"sc\": \"https://schema.org/\",\n    \"dct\": \"http://purl.org/dc/terms/\",\n    \"data\": \"https://mlcommons.org/croissant/data/\",\n    \"rai\": \"https://mlcommons.org/croissant/rai/\",\n    \"format\": \"https://mlcommons.org/croissant/format/\",\n    \"citeAs\": \"https://mlcommons.org/croissant/citeAs/\",\n    \"conformsTo\": \"https://mlcommons.org/croissant/conformsTo/\",\n    \"@language\": \"en\",\n    \"repeated\": \"https://mlcommons.org/croissant/repeated/\",\n    \"field\": \"https://mlcommons.org/croissant/field/\",\n    \"examples\": \"https://mlcommons.org/croissant/examples/\",\n    \"recordSet\": \"https://mlcommons.org/croissant/recordSet/\",\n    \"fileObject\": \"https://mlcommons.org/croissant/fileObject/\",\n    \"fileSet\": \"https://mlcommons.org/croissant/fileSet/\",\n    \"source\": \"https://mlcommons.org/croissant/source/\",\n    \"references\": \"https://mlcommons.org/croissant/references/\",\n    \"key\": \"https://mlcommons.org/croissant/key/\",\n    \"parentField\": \"https://mlcommons.org/croissant/parentField/\",\n    \"isLiveDataset\": \"https://mlcommons.org/croissant/isLiveDataset/\",\n    \"separator\": \"https://mlcommons.org/croissant/separator/\",\n    \"extract\": \"https://mlcommons.org/croissant/extract/\",\n    \"subField\": \"https://mlcommons.org/croissant/subField/\",\n    \"regex\": \"https://mlcommons.org/croissant/regex/\",\n    \"column\": \"https://mlcommons.org/croissant/column/\",\n    \"path\": \"https://mlcommons.org/croissant/path/\",\n    \"fileProperty\": \"https://mlcommons.org/croissant/fileProperty/\",\n    \"md5\": \"https://mlcommons.org/croissant/md5/\",\n    \"jsonPath\": \"https://mlcommons.org/croissant/jsonPath/\",\n    \"transform\": \"https://mlcommons.org/croissant/transform/\",\n    \"replace\": \"https://mlcommons.org/croissant/replace/\",\n    \"dataType\": \"https://mlcommons.org/croissant/dataType/\"\n  },\n  \"@type\": \"Dataset\",\n  \"name\": \"Proteomics Dataset\",\n  \"description\": \"Mass spectrometry data from protein samples\",\n  \"url\": \"https://example.com/proteomics-data\",\n  \"creator\": {\n    \"@type\": \"Person\",\n    \"name\": \"researcher@university.edu\"\n  },\n  \"dateCreated\": \"2024-01-15\",\n  \"datePublished\": \"2024-01-15\",\n  \"version\": \"1.0\",\n  \"license\": \"https://creativecommons.org/licenses/by/4.0/\",\n  \"citation\": \"Please cite this dataset as: Proteomics Dataset (2024)\",\n  \"cr:accessRestrictions\": \"Restricted to academic use\",\n  \"encodingFormat\": \"mzML\",\n  \"cr:legalObligations\": \"Data sharing agreement required\",\n  \"cr:collaborationPartner\": \"Proteomics Center, University Hospital\",\n  \"distribution\": []\n}\n</code></pre></p>"},{"location":"api-docs/annotate/#biotope-annotate-validate","title":"<code>biotope annotate validate</code>","text":"<p>Validate a Croissant metadata file using the mlcroissant CLI.</p> <p>Usage: <pre><code>biotope annotate validate --jsonld &lt;file_name.json&gt;\n</code></pre></p> <p>Options: - <code>--jsonld, -j</code>: Path to the JSON-LD metadata file to validate (required)</p> <p>Examples: <pre><code># Validate a metadata file\nbiotope annotate validate --jsonld metadata.json\n\n# Validate with full path\nbiotope annotate validate --jsonld /path/to/dataset_metadata.json\n</code></pre></p> <p>Output: <pre><code>Validation successful! The metadata file is valid.\n</code></pre></p> <p>Error Handling: - If validation fails, the command will exit with an error code and display validation errors - Warnings are displayed but don't cause the command to fail - The command uses the <code>mlcroissant</code> CLI under the hood for validation</p>"},{"location":"api-docs/annotate/#biotope-annotate-load","title":"<code>biotope annotate load</code>","text":"<p>Load records from a dataset using its Croissant metadata.</p> <p>Usage: <pre><code>biotope annotate load [OPTIONS]\n</code></pre></p> <p>Required Options: - <code>--jsonld, -j</code>: Path to the JSON-LD metadata file - <code>--record-set, -r</code>: Name of the record set to load</p> <p>Optional Options: - <code>--num-records, -n</code>: Number of records to load (default: 10)</p> <p>Examples: <pre><code># Load 10 records from the default record set\nbiotope annotate load \\\n  --jsonld metadata.json \\\n  --record-set samples\n\n# Load 50 records from a specific record set\nbiotope annotate load \\\n  --jsonld metadata.json \\\n  --record-set measurements \\\n  --num-records 50\n</code></pre></p> <p>Output: <pre><code>Record 1: {'patient_id': 'P001', 'gene_expression': [0.1, 0.2, 0.3]}\nRecord 2: {'patient_id': 'P002', 'gene_expression': [0.4, 0.5, 0.6]}\n...\nLoaded 10 records from record set 'samples'\n</code></pre></p>"},{"location":"api-docs/annotate/#metadata-pre-fill-priority","title":"Metadata Pre-fill Priority","text":"<p>When pre-filling metadata, the following priority order is used:</p> <ol> <li>Command-line prefill: Metadata provided via <code>--prefill-metadata</code></li> <li>Project metadata: Metadata from <code>.biotope/config/biotope.yaml</code></li> <li>Default values: Built-in defaults for required fields</li> </ol> <p>This allows you to override project-level metadata when needed while still benefiting from the convenience of pre-filled values.</p>"},{"location":"api-docs/annotate/#croissant-ml-format","title":"Croissant ML Format","text":"<p>Biotope uses the Croissant ML metadata format for dataset annotations. This format provides:</p> <ul> <li>Standardized structure: Consistent metadata across different datasets</li> <li>Rich annotations: Support for complex metadata relationships</li> <li>Validation: Built-in validation of metadata structure</li> <li>Interoperability: Compatible with other ML metadata tools</li> </ul>"},{"location":"api-docs/annotate/#key-croissant-ml-concepts","title":"Key Croissant ML Concepts","text":"<ol> <li>Dataset: The top-level container for all metadata</li> <li>Distribution: How the dataset is distributed (FileObject, FileSet)</li> <li>RecordSet: Structure of data records</li> <li>Field: Individual data fields with types and constraints</li> <li>Context: JSON-LD context for semantic meaning</li> </ol>"},{"location":"api-docs/annotate/#scientific-metadata-fields","title":"Scientific Metadata Fields","text":"<p>Biotope includes additional scientific metadata fields:</p> <ul> <li><code>cr:accessRestrictions</code>: Data access restrictions</li> <li><code>cr:legalObligations</code>: Legal requirements for data usage</li> <li><code>cr:collaborationPartner</code>: Collaboration partner information</li> <li><code>cr:projectName</code>: Project name for context</li> </ul>"},{"location":"api-docs/annotate/#configuration","title":"Configuration","text":"<p>Project metadata is managed through the <code>biotope config</code> command:</p> <pre><code># Set project metadata for pre-filling\nbiotope config set-project-metadata\n\n# View current project metadata\nbiotope config show-project-metadata\n</code></pre>"},{"location":"api-docs/annotate/#best-practices","title":"Best Practices","text":"<ol> <li>Use Interactive Mode: For most use cases, <code>biotope annotate interactive</code> provides the best user experience</li> <li>Set Project Metadata: Configure project-level metadata early for consistent annotations</li> <li>Validate Regularly: Use <code>biotope annotate validate</code> to ensure metadata quality</li> <li>Use Descriptive Names: Choose clear, descriptive dataset names</li> <li>Include All Required Fields: Ensure all required metadata fields are completed</li> <li>Test with Load: Use <code>biotope annotate load</code> to verify metadata works with actual data</li> </ol>"},{"location":"api-docs/annotate/#integration-with-git-workflow","title":"Integration with Git Workflow","text":"<p>The annotate commands integrate seamlessly with biotope's Git workflow:</p> <pre><code># Add files to staging\nbiotope add data/raw/experiment.csv\n\n# Create metadata interactively\nbiotope annotate interactive --staged\n\n# Validate the metadata\nbiotope annotate validate --jsonld .biotope/datasets/experiment.csv.jsonld\n\n# Commit the changes\nbiotope commit -m \"Add experiment dataset with metadata\"\n</code></pre>"},{"location":"api-docs/annotate/#troubleshooting","title":"Troubleshooting","text":""},{"location":"api-docs/annotate/#validation-errors","title":"Validation Errors","text":"<ul> <li>Ensure all required fields are present</li> <li>Check that field values meet validation requirements</li> <li>Verify JSON-LD syntax is correct</li> </ul>"},{"location":"api-docs/annotate/#load-errors","title":"Load Errors","text":"<ul> <li>Ensure the record set name exists in the metadata</li> <li>Check that the data source is accessible</li> <li>Verify the metadata file is valid</li> </ul>"},{"location":"api-docs/annotate/#interactive-mode-issues","title":"Interactive Mode Issues","text":"<ul> <li>Make sure you're in a biotope project directory</li> <li>Check that files are properly staged with <code>biotope add</code></li> <li>Verify project metadata is configured if using pre-fill</li> </ul> <p>Command for creating dataset metadata definitions in Croissant format.</p>"},{"location":"api-docs/annotate/#biotope.commands.annotate.annotate","title":"<code>annotate()</code>","text":"<p>Create dataset metadata definitions in Croissant format.</p> Source code in <code>biotope/commands/annotate.py</code> <pre><code>@click.group()\ndef annotate() -&gt; None:\n    \"\"\"Create dataset metadata definitions in Croissant format.\"\"\"\n</code></pre>"},{"location":"api-docs/annotate/#biotope.commands.annotate.create","title":"<code>create(output, name, description, data_source, contact, date, access_restrictions, format, legal_obligations, collaboration_partner)</code>","text":"<p>Create a new Croissant metadata file with required scientific metadata fields.</p> Source code in <code>biotope/commands/annotate.py</code> <pre><code>@annotate.command()\n@click.option(\n    \"--output\",\n    \"-o\",\n    type=click.Path(),\n    default=\"metadata.json\",\n    help=\"Output file path for the metadata JSON-LD.\",\n)\n@click.option(\n    \"--name\",\n    \"-n\",\n    required=True,\n    help=\"Name of the dataset.\",\n)\n@click.option(\n    \"--description\",\n    \"-d\",\n    default=\"\",\n    help=\"Description of the dataset.\",\n)\n@click.option(\n    \"--data-source\",\n    \"-s\",\n    required=True,\n    help=\"URL or path to the data source.\",\n)\n@click.option(\n    \"--contact\",\n    \"-c\",\n    default=getpass.getuser(),\n    help=\"Responsible contact person for the dataset.\",\n)\n@click.option(\n    \"--date\",\n    default=datetime.datetime.now(tz=datetime.timezone.utc).date().isoformat(),\n    help=\"Date of creation (ISO format: YYYY-MM-DD).\",\n)\n@click.option(\n    \"--access-restrictions\",\n    \"-a\",\n    required=True,\n    help=\"Note on access restrictions (e.g., public, restricted, private).\",\n)\n@click.option(\n    \"--format\",\n    \"-f\",\n    help=\"Description of file format.\",\n)\n@click.option(\n    \"--legal-obligations\",\n    \"-l\",\n    help=\"Note on legal obligations.\",\n)\n@click.option(\n    \"--collaboration-partner\",\n    \"-p\",\n    help=\"Collaboration partner and institute.\",\n)\ndef create(\n    output,\n    name,\n    description,\n    data_source,\n    contact,\n    date,\n    access_restrictions,\n    format,\n    legal_obligations,\n    collaboration_partner,\n):\n    \"\"\"Create a new Croissant metadata file with required scientific metadata fields.\"\"\"\n    # Create a basic metadata structure with proper Croissant context\n    metadata = {\n        \"@context\": {\n            \"@vocab\": \"https://schema.org/\",\n            \"cr\": \"https://mlcommons.org/croissant/\",\n            \"ml\": \"http://ml-schema.org/\",\n            \"sc\": \"https://schema.org/\",\n            \"dct\": \"http://purl.org/dc/terms/\",\n            \"data\": \"https://mlcommons.org/croissant/data/\",\n            \"rai\": \"https://mlcommons.org/croissant/rai/\",\n            \"format\": \"https://mlcommons.org/croissant/format/\",\n            \"citeAs\": \"https://mlcommons.org/croissant/citeAs/\",\n            \"conformsTo\": \"https://mlcommons.org/croissant/conformsTo/\",\n            \"@language\": \"en\",\n            \"repeated\": \"https://mlcommons.org/croissant/repeated/\",\n            \"field\": \"https://mlcommons.org/croissant/field/\",\n            \"examples\": \"https://mlcommons.org/croissant/examples/\",\n            \"recordSet\": \"https://mlcommons.org/croissant/recordSet/\",\n            \"fileObject\": \"https://mlcommons.org/croissant/fileObject/\",\n            \"fileSet\": \"https://mlcommons.org/croissant/fileSet/\",\n            \"source\": \"https://mlcommons.org/croissant/source/\",\n            \"references\": \"https://mlcommons.org/croissant/references/\",\n            \"key\": \"https://mlcommons.org/croissant/key/\",\n            \"parentField\": \"https://mlcommons.org/croissant/parentField/\",\n            \"isLiveDataset\": \"https://mlcommons.org/croissant/isLiveDataset/\",\n            \"separator\": \"https://mlcommons.org/croissant/separator/\",\n            \"extract\": \"https://mlcommons.org/croissant/extract/\",\n            \"subField\": \"https://mlcommons.org/croissant/subField/\",\n            \"regex\": \"https://mlcommons.org/croissant/regex/\",\n            \"column\": \"https://mlcommons.org/croissant/column/\",\n            \"path\": \"https://mlcommons.org/croissant/path/\",\n            \"fileProperty\": \"https://mlcommons.org/croissant/fileProperty/\",\n            \"md5\": \"https://mlcommons.org/croissant/md5/\",\n            \"jsonPath\": \"https://mlcommons.org/croissant/jsonPath/\",\n            \"transform\": \"https://mlcommons.org/croissant/transform/\",\n            \"replace\": \"https://mlcommons.org/croissant/replace/\",\n            \"dataType\": \"https://mlcommons.org/croissant/dataType/\",\n        },\n        \"@type\": \"Dataset\",\n        \"name\": name,\n        \"description\": description,\n        \"url\": data_source,  # Changed from dataSource to url for schema.org compatibility\n        \"creator\": {\n            \"@type\": \"Person\",\n            \"name\": contact,\n        },\n        \"dateCreated\": date,\n        # Add recommended properties\n        \"datePublished\": date,  # Use creation date as publication date by default\n        \"version\": \"1.0\",  # Default version\n        \"license\": \"https://creativecommons.org/licenses/by/4.0/\",  # Default license\n        \"citation\": f\"Please cite this dataset as: {name} ({date.split('-')[0]})\",  # Simple citation\n    }\n\n    # Add custom fields with proper namespacing\n    metadata[\"cr:accessRestrictions\"] = access_restrictions\n\n    # Add optional fields if provided\n    if format:\n        metadata[\"encodingFormat\"] = format  # Using schema.org standard property\n    if legal_obligations:\n        metadata[\"cr:legalObligations\"] = legal_obligations\n    if collaboration_partner:\n        metadata[\"cr:collaborationPartner\"] = collaboration_partner\n\n    # Add distribution property with empty array for FileObjects/FileSets\n    metadata[\"distribution\"] = []\n\n    # Write to file\n    with open(output, \"w\") as f:\n        json.dump(metadata, f, indent=2)\n\n    # Stage the changes in Git if we're in a biotope project\n    try:\n        biotope_root = find_biotope_root()\n        if biotope_root:\n            import subprocess\n            subprocess.run(\n                [\"git\", \"add\", \".biotope/\"],\n                cwd=biotope_root,\n                check=True\n            )\n            click.echo(f\"\u2705 Staged changes in Git\")\n    except (subprocess.CalledProcessError, FileNotFoundError):\n        pass  # Not in a biotope project or Git not available\n\n    click.echo(f\"Created Croissant metadata file at {output}\")\n</code></pre>"},{"location":"api-docs/annotate/#biotope.commands.annotate.get_staged_files","title":"<code>get_staged_files(biotope_root)</code>","text":"<p>Get list of staged files from Git.</p> Source code in <code>biotope/commands/annotate.py</code> <pre><code>def get_staged_files(biotope_root: Path) -&gt; list:\n    \"\"\"Get list of staged files from Git.\"\"\"\n    import json\n    import subprocess\n    staged_files = []\n\n    try:\n        # Get staged files from Git\n        result = subprocess.run(\n            [\"git\", \"diff\", \"--cached\", \"--name-only\"],\n            cwd=biotope_root,\n            capture_output=True,\n            text=True,\n            check=True\n        )\n\n        for file_path in result.stdout.splitlines():\n            if file_path.startswith(\".biotope/datasets/\") and file_path.endswith(\".jsonld\"):\n                # Read the metadata file to get file information\n                metadata_file = biotope_root / file_path\n                try:\n                    with open(metadata_file) as f:\n                        metadata = json.load(f)\n                        for distribution in metadata.get(\"distribution\", []):\n                            if distribution.get(\"@type\") == \"sc:FileObject\":\n                                staged_files.append({\n                                    \"file_path\": distribution.get(\"contentUrl\"),\n                                    \"sha256\": distribution.get(\"sha256\"),\n                                    \"size\": distribution.get(\"contentSize\")\n                                })\n                except (json.JSONDecodeError, KeyError):\n                    continue\n\n    except subprocess.CalledProcessError:\n        pass\n\n    return staged_files\n</code></pre>"},{"location":"api-docs/annotate/#biotope.commands.annotate.get_standard_context","title":"<code>get_standard_context()</code>","text":"<p>Get the standard Croissant context.</p> Source code in <code>biotope/commands/annotate.py</code> <pre><code>def get_standard_context() -&gt; dict:\n    \"\"\"Get the standard Croissant context.\"\"\"\n    return {\n        \"@vocab\": \"https://schema.org/\",\n        \"cr\": \"https://mlcommons.org/croissant/\",\n        \"ml\": \"http://ml-schema.org/\",\n        \"sc\": \"https://schema.org/\",\n        \"dct\": \"http://purl.org/dc/terms/\",\n        \"data\": \"https://mlcommons.org/croissant/data/\",\n        \"rai\": \"https://mlcommons.org/croissant/rai/\",\n        \"format\": \"https://mlcommons.org/croissant/format/\",\n        \"citeAs\": \"https://mlcommons.org/croissant/citeAs/\",\n        \"conformsTo\": \"https://mlcommons.org/croissant/conformsTo/\",\n        \"@language\": \"en\",\n        \"repeated\": \"https://mlcommons.org/croissant/repeated/\",\n        \"field\": \"https://mlcommons.org/croissant/field/\",\n        \"examples\": \"https://mlcommons.org/croissant/examples/\",\n        \"recordSet\": \"https://mlcommons.org/croissant/recordSet/\",\n        \"fileObject\": \"https://mlcommons.org/croissant/fileObject/\",\n        \"fileSet\": \"https://mlcommons.org/croissant/fileSet/\",\n        \"source\": \"https://mlcommons.org/croissant/source/\",\n        \"references\": \"https://mlcommons.org/croissant/references/\",\n        \"key\": \"https://mlcommons.org/croissant/key/\",\n        \"parentField\": \"https://mlcommons.org/croissant/parentField/\",\n        \"isLiveDataset\": \"https://mlcommons.org/croissant/isLiveDataset/\",\n        \"separator\": \"https://mlcommons.org/croissant/separator/\",\n        \"extract\": \"https://mlcommons.org/croissant/extract/\",\n        \"subField\": \"https://mlcommons.org/croissant/subField/\",\n        \"regex\": \"https://mlcommons.org/croissant/regex/\",\n        \"column\": \"https://mlcommons.org/croissant/column/\",\n        \"path\": \"https://mlcommons.org/croissant/path/\",\n        \"fileProperty\": \"https://mlcommons.org/croissant/fileProperty/\",\n        \"md5\": \"https://mlcommons.org/croissant/md5/\",\n        \"jsonPath\": \"https://mlcommons.org/croissant/jsonPath/\",\n        \"transform\": \"https://mlcommons.org/croissant/transform/\",\n        \"replace\": \"https://mlcommons.org/croissant/replace/\",\n        \"dataType\": \"https://mlcommons.org/croissant/dataType/\",\n        \"includes\": \"https://mlcommons.org/croissant/includes/\",\n        \"excludes\": \"https://mlcommons.org/croissant/excludes/\",\n    }\n</code></pre>"},{"location":"api-docs/annotate/#biotope.commands.annotate.interactive","title":"<code>interactive(file_path=None, prefill_metadata=None, staged=False, incomplete=False)</code>","text":"<p>Interactive annotation process for files.</p> Source code in <code>biotope/commands/annotate.py</code> <pre><code>@annotate.command()\n@click.option(\n    \"--file-path\",\n    \"-f\",\n    type=click.Path(exists=True),\n    help=\"Path to the file to annotate\",\n)\n@click.option(\n    \"--prefill-metadata\",\n    \"-p\",\n    type=str,\n    help=\"JSON string containing pre-filled metadata\",\n)\n@click.option(\n    \"--staged\",\n    \"-s\",\n    is_flag=True,\n    help=\"Annotate all staged files\",\n)\n@click.option(\n    \"--incomplete\",\n    \"-i\",\n    is_flag=True,\n    help=\"Annotate all tracked files with incomplete metadata\",\n)\ndef interactive(file_path: str | None = None, prefill_metadata: str | None = None, staged: bool = False, incomplete: bool = False) -&gt; None:\n    \"\"\"Interactive annotation process for files.\"\"\"\n    console = Console()\n\n    # Initialize metadata with pre-filled values if provided\n    dynamic_metadata = json.loads(prefill_metadata) if prefill_metadata else {}\n\n    # Load project-level metadata for pre-filling if we're in a biotope project\n    biotope_root = find_biotope_root()\n    if biotope_root:\n        from biotope.utils import load_project_metadata\n        project_metadata = load_project_metadata(biotope_root)\n\n        # Merge project metadata with any provided prefill metadata\n        # Project metadata takes precedence for common fields\n        for key, value in project_metadata.items():\n            if key not in dynamic_metadata:\n                dynamic_metadata[key] = value\n\n    # Merge with standard context and structure\n    metadata = merge_metadata(dynamic_metadata)\n\n    # Handle staged files\n    if staged:\n        if not biotope_root:\n            click.echo(\"\u274c Not in a biotope project. Run 'biotope init' first.\")\n            raise click.Abort\n\n        staged_files = get_staged_files(biotope_root)\n        if not staged_files:\n            click.echo(\"\u274c No files staged. Use 'biotope add &lt;file&gt;' first.\")\n            raise click.Abort\n\n        console.print(f\"[bold blue]Annotating {len(staged_files)} staged file(s)[/]\")\n\n        for i, file_info in enumerate(staged_files):\n            file_path = biotope_root / file_info[\"file_path\"]\n            console.print(f\"\\n[bold green]File {i+1}/{len(staged_files)}: {file_path.name}[/]\")\n\n            # Pre-fill with file information\n            file_metadata = {\n                \"name\": file_path.stem,\n                \"description\": f\"Dataset for {file_path.name}\",\n                \"distribution\": [\n                    {\n                        \"@type\": \"sc:FileObject\",\n                        \"@id\": f\"file_{file_info['sha256'][:8]}\",\n                        \"name\": file_path.name,\n                        \"contentUrl\": str(file_path.relative_to(biotope_root)),\n                        \"sha256\": file_info[\"sha256\"],\n                        \"contentSize\": file_info[\"size\"]\n                    }\n                ]\n            }\n\n            # Merge with project metadata\n            if biotope_root:\n                from biotope.utils import load_project_metadata\n                project_metadata = load_project_metadata(biotope_root)\n                for key, value in project_metadata.items():\n                    if key not in file_metadata:\n                        file_metadata[key] = value\n\n            # Run interactive annotation for this file\n            _run_interactive_annotation(console, file_path, file_metadata, biotope_root)\n\n        return\n\n    # Handle incomplete files\n    if incomplete:\n        if not biotope_root:\n            click.echo(\"\u274c Not in a biotope project. Run 'biotope init' first.\")\n            raise click.Abort\n\n        # Get all tracked files and check their annotation status\n        from biotope.validation import get_all_tracked_files, get_annotation_status_for_files\n\n        tracked_files = get_all_tracked_files(biotope_root)\n        if not tracked_files:\n            click.echo(\"\u274c No tracked files found. Use 'biotope add &lt;file&gt;' first.\")\n            raise click.Abort\n\n        annotation_status = get_annotation_status_for_files(biotope_root, tracked_files)\n        incomplete_files = [\n            file_path for file_path, (is_annotated, _) in annotation_status.items() \n            if not is_annotated\n        ]\n\n        if not incomplete_files:\n            click.echo(\"\u2705 All tracked files are properly annotated!\")\n            return\n\n        console.print(f\"[bold blue]Found {len(incomplete_files)} file(s) with incomplete annotation[/]\")\n\n        for i, file_path in enumerate(incomplete_files):\n            metadata_file = biotope_root / file_path\n            console.print(f\"\\n[bold green]File {i+1}/{len(incomplete_files)}: {metadata_file.stem}[/]\")\n\n            # Load existing metadata to pre-fill\n            try:\n                with open(metadata_file) as f:\n                    existing_metadata = json.load(f)\n            except (json.JSONDecodeError, IOError):\n                existing_metadata = {}\n\n            # Extract file information from existing metadata\n            file_info = {\n                \"name\": existing_metadata.get(\"name\", metadata_file.stem),\n                \"description\": existing_metadata.get(\"description\", f\"Dataset for {metadata_file.stem}\"),\n                \"distribution\": existing_metadata.get(\"distribution\", [])\n            }\n\n            # Merge with project metadata for missing fields\n            if biotope_root:\n                from biotope.utils import load_project_metadata\n                project_metadata = load_project_metadata(biotope_root)\n                for key, value in project_metadata.items():\n                    if key not in file_info and key not in existing_metadata:\n                        file_info[key] = value\n\n            # Run interactive annotation for this file (updating existing)\n            _run_interactive_annotation(console, metadata_file, file_info, biotope_root, update_existing=True)\n\n        return\n\n    # If file path is provided, use it\n    if file_path:\n        metadata[\"file_path\"] = file_path\n\n    # Create a nice header\n    console.print(\n        Panel(\n            \"[bold blue]Biotope Dataset Metadata Creator[/]\",\n            subtitle=\"Create scientific dataset metadata in Croissant format\",\n        ),\n    )\n\n    console.print(Markdown(\"This wizard will help you document your scientific dataset with standardized metadata.\"))\n    console.print()\n\n    # Show project metadata info if available\n    if biotope_root:\n        from biotope.utils import load_project_metadata\n        project_metadata = load_project_metadata(biotope_root)\n        if project_metadata:\n            console.print(\"[bold green]Project Metadata Available[/]\")\n            console.print(\"\u2500\" * 50)\n            console.print(\"The following project-level metadata will be used as defaults:\")\n\n            table = Table(show_header=False)\n            table.add_column(\"Field\", style=\"cyan\")\n            table.add_column(\"Value\", style=\"green\")\n\n            for key, value in project_metadata.items():\n                if key == \"creator\" and isinstance(value, dict):\n                    display_value = value.get(\"name\", str(value))\n                else:\n                    display_value = str(value)\n                table.add_row(key, display_value)\n\n            console.print(table)\n            console.print()\n\n    # Section: Basic Information\n    console.print(\"[bold green]Basic Dataset Information[/]\")\n    console.print(\"\u2500\" * 50)\n\n    # Use pre-filled name if available, otherwise prompt\n    dataset_name = metadata.get(\"name\", \"\")\n    if not dataset_name:\n        dataset_name = click.prompt(\n            \"Dataset name (a short, descriptive title; no spaces allowed)\",\n            default=\"\",\n        )\n    else:\n        dataset_name = click.prompt(\n            \"Dataset name (a short, descriptive title; no spaces allowed)\",\n            default=dataset_name,\n        )\n\n    description = click.prompt(\n        \"Dataset description (what does this dataset contain and what is it used for?)\",\n        default=metadata.get(\"description\", \"\"),\n    )\n\n    # Section: Source Information\n    console.print(\"\\n[bold green]Data Source Information[/]\")\n    console.print(\"\u2500\" * 50)\n    console.print(\"Where did this data come from? (e.g., a URL, database name, or experiment)\")\n    data_source = click.prompt(\"Data source\", default=metadata.get(\"url\", \"\"))\n\n    # Section: Ownership and Dates\n    console.print(\"\\n[bold green]Ownership and Dates[/]\")\n    console.print(\"\u2500\" * 50)\n\n    project_name = click.prompt(\n        \"Project name\",\n        default=metadata.get(\"cr:projectName\", Path.cwd().name),\n    )\n\n    contact = click.prompt(\n        \"Contact person (email preferred)\",\n        default=metadata.get(\"creator\", {}).get(\"name\", getpass.getuser()),\n    )\n\n    date = click.prompt(\n        \"Creation date (YYYY-MM-DD)\",\n        default=metadata.get(\"dateCreated\", datetime.date.today().isoformat()),\n    )\n\n    # Section: Access Information\n    console.print(\"\\n[bold green]Access Information[/]\")\n    console.print(\"\u2500\" * 50)\n\n    # Create a table for examples\n    table = Table(title=\"Access Restriction Examples\")\n    table.add_column(\"Type\", style=\"cyan\")\n    table.add_column(\"Description\", style=\"green\")\n    table.add_row(\"Public\", \"Anyone can access and use the data\")\n    table.add_row(\"Academic\", \"Restricted to academic/research use only\")\n    table.add_row(\"Approval\", \"Requires explicit approval from data owner\")\n    table.add_row(\"Embargo\", \"Will become public after a specific date\")\n    console.print(table)\n\n    has_access_restrictions = Confirm.ask(\n        \"Does this dataset have access restrictions?\",\n        default=bool(metadata.get(\"cr:accessRestrictions\")),\n    )\n\n    access_restrictions = None\n    if has_access_restrictions:\n        access_restrictions = Prompt.ask(\n            \"Please describe the access restrictions\",\n            default=metadata.get(\"cr:accessRestrictions\", \"\"),\n        )\n        if not access_restrictions.strip():\n            access_restrictions = None\n\n    # Section: Additional Information\n    console.print(\"\\n[bold green]Additional Information[/]\")\n    console.print(\"\u2500\" * 50)\n    console.print(\"[italic]The following fields are optional but recommended for scientific datasets[/]\")\n\n    # Get default format from distribution if available\n    default_format = \"\"\n    distribution = metadata.get(\"distribution\", [])\n    if distribution and len(distribution) &gt; 0:\n        default_format = distribution[0].get(\"encodingFormat\", \"\")\n\n    format = click.prompt(\n        \"File format (MIME type, e.g., text/csv, application/json, application/x-hdf5, application/fastq)\",\n        default=metadata.get(\"encodingFormat\")\n        or metadata.get(\"format\")\n        or default_format,\n    )\n\n    legal_obligations = click.prompt(\n        \"Legal obligations (e.g., citation requirements, licenses)\",\n        default=metadata.get(\"cr:legalObligations\", \"\"),\n    )\n\n    collaboration_partner = click.prompt(\n        \"Collaboration partner and institute\",\n        default=metadata.get(\"cr:collaborationPartner\", \"\"),\n    )\n\n    # Section: Publication Information\n    console.print(\"\\n[bold green]Publication Information[/]\")\n    console.print(\"\u2500\" * 50)\n    console.print(\"[italic]The following fields are recommended for proper dataset citation[/]\")\n\n    publication_date = click.prompt(\n        \"Publication date (YYYY-MM-DD)\",\n        default=metadata.get(\"datePublished\", date),  # Use creation date as default\n    )\n\n    version = click.prompt(\n        \"Dataset version\",\n        default=metadata.get(\"version\", \"1.0\"),\n    )\n\n    license_url = click.prompt(\n        \"License URL\",\n        default=metadata.get(\"license\", \"https://creativecommons.org/licenses/by/4.0/\"),\n    )\n\n    citation = click.prompt(\n        \"Citation text\",\n        default=metadata.get(\"citation\", f\"Please cite this dataset as: {dataset_name} ({date.split('-')[0]})\"),\n    )\n\n    # Update metadata with new values while preserving any existing fields\n    new_metadata = {\n        \"@context\": get_standard_context(),  # Use the standard context\n        \"@type\": \"Dataset\",\n        \"name\": dataset_name,\n        \"description\": description,\n        \"url\": data_source,\n        \"creator\": {\n            \"@type\": \"Person\",\n            \"name\": contact,\n        },\n        \"dateCreated\": date,\n        \"cr:projectName\": project_name,\n        \"datePublished\": publication_date,\n        \"version\": version,\n        \"license\": license_url,\n        \"citation\": citation,\n    }\n\n    # Only add access restrictions if they exist\n    if access_restrictions:\n        new_metadata[\"cr:accessRestrictions\"] = access_restrictions\n\n    # Add optional fields if provided\n    if format:\n        new_metadata[\"encodingFormat\"] = format\n    if legal_obligations:\n        new_metadata[\"cr:legalObligations\"] = legal_obligations\n    if collaboration_partner:\n        new_metadata[\"cr:collaborationPartner\"] = collaboration_partner\n\n    # Update metadata while preserving pre-filled values\n    for key, value in new_metadata.items():\n        if key not in [\"distribution\"]:  # Don't overwrite distribution\n            metadata[key] = value\n\n    # Initialize distribution array for FileObjects/FileSets if it doesn't exist\n    if \"distribution\" not in metadata:\n        metadata[\"distribution\"] = []\n\n    # Section: File Resources\n    console.print(\"\\n[bold green]File Resources[/]\")\n    console.print(\"\u2500\" * 50)\n    console.print(\"Croissant datasets can include file resources (FileObject) and file collections (FileSet).\")\n\n    # If we have pre-filled distribution, use it\n    if prefill_metadata and \"distribution\" in dynamic_metadata:\n        # Create a table to display pre-filled file information\n        table = Table(title=\"Pre-filled File Resources\")\n        table.add_column(\"Type\", style=\"cyan\")\n        table.add_column(\"Name\", style=\"green\")\n        table.add_column(\"Format\", style=\"yellow\")\n        table.add_column(\"Hash\", style=\"magenta\")\n\n        for resource in dynamic_metadata[\"distribution\"]:\n            resource_type = resource.get(\"@type\", \"\").replace(\"sc:\", \"\").replace(\"cr:\", \"\")\n            name = resource.get(\"name\", \"\")\n            format = resource.get(\"encodingFormat\", \"\")\n            hash = resource.get(\"sha256\", \"\")[:8] + \"...\" if resource.get(\"sha256\") else \"\"\n\n            table.add_row(resource_type, name, format, hash)\n\n        console.print(table)\n\n        if click.confirm(\"Would you like to use these pre-filled file resources?\", default=True):\n            metadata[\"distribution\"] = dynamic_metadata[\"distribution\"]\n            console.print(\"[bold green]Using pre-filled file resources[/]\")\n        else:\n            console.print(\"[yellow]You can now add new file resources manually[/]\")\n            metadata[\"distribution\"] = []\n    elif click.confirm(\"Would you like to add file resources to your dataset?\", default=True):\n        while True:\n            resource_type = click.prompt(\n                \"Resource type\",\n                type=click.Choice([\"FileObject\", \"FileSet\"]),\n                default=\"FileObject\",\n            )\n\n            if resource_type == \"FileObject\":\n                file_id = click.prompt(\"File ID (unique identifier for this file)\")\n                file_name = click.prompt(\"File name (including extension)\")\n                content_url = click.prompt(\"Content URL (where the file can be accessed)\")\n                encoding_format = click.prompt(\n                    \"Encoding format (MIME type, e.g., text/csv, application/json, application/x-hdf5, application/fastq)\",\n                )\n\n                file_object = {\n                    \"@type\": \"sc:FileObject\",\n                    \"@id\": file_id,\n                    \"name\": file_name,\n                    \"contentUrl\": content_url,\n                    \"encodingFormat\": encoding_format,\n                    \"sha256\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n                }\n\n                # Optional SHA256 checksum\n                if click.confirm(\"Add SHA256 checksum?\", default=False):\n                    sha256 = click.prompt(\"SHA256 checksum\")\n                    file_object[\"sha256\"] = sha256\n\n                # Optional containedIn property\n                if click.confirm(\"Is this file contained in another file (e.g., in an archive)?\", default=False):\n                    container_id = click.prompt(\"Container file ID\")\n                    file_object[\"containedIn\"] = {\"@id\": container_id}\n\n                metadata[\"distribution\"].append(file_object)\n\n            else:  # FileSet\n                fileset_id = click.prompt(\"FileSet ID (unique identifier for this file set)\")\n\n                # Container information\n                container_id = click.prompt(\"Container file ID (archive or directory)\")\n\n                fileset = {\n                    \"@type\": \"cr:FileSet\",\n                    \"@id\": fileset_id,\n                    \"containedIn\": {\"@id\": container_id},\n                }\n\n                # File pattern information\n                encoding_format = click.prompt(\n                    \"Encoding format of files in this set (MIME type, e.g., text/csv, application/json, application/x-hdf5, application/fastq)\",\n                    default=\"\",\n                )\n                if encoding_format:\n                    fileset[\"encodingFormat\"] = encoding_format\n\n                includes_pattern = click.prompt(\"Include pattern (e.g., *.jpg, data/*.csv)\", default=\"\")\n                if includes_pattern:\n                    fileset[\"includes\"] = includes_pattern\n\n                # Optional exclude pattern\n                if click.confirm(\"Add exclude pattern?\", default=False):\n                    excludes_pattern = click.prompt(\"Exclude pattern\")\n                    fileset[\"excludes\"] = excludes_pattern\n\n                metadata[\"distribution\"].append(fileset)\n\n            if not click.confirm(\"Add another file resource?\", default=False):\n                break\n\n    # Section: Data Structure\n    console.print(\"\\n[bold green]Data Structure[/]\")\n    console.print(\"\u2500\" * 50)\n\n    # Create a table for record set examples\n    table = Table(title=\"Record Set Examples\")\n    table.add_column(\"Dataset Type\", style=\"cyan\")\n    table.add_column(\"Record Sets\", style=\"green\")\n    table.add_row(\"Genomics\", \"patients, samples, gene_expressions\")\n    table.add_row(\"Climate\", \"locations, time_series, measurements\")\n    table.add_row(\"Medical\", \"patients, visits, treatments, outcomes\")\n    console.print(table)\n\n    console.print(\"Record sets describe the structure of your data.\")\n\n    if click.confirm(\"Would you like to add a record set to describe your data structure?\", default=True):\n        metadata[\"cr:recordSet\"] = []\n\n        while True:\n            record_set_name = click.prompt(\"Record set name (e.g., 'patients', 'samples')\")\n            record_set_description = click.prompt(f\"Description of the '{record_set_name}' record set\", default=\"\")\n\n            # Create record set with proper Croissant format\n            record_set = {\n                \"@type\": \"cr:RecordSet\",\n                \"@id\": f\"#{record_set_name}\",\n                \"name\": record_set_name,\n                \"description\": record_set_description,\n            }\n\n            # Ask about data type\n            if click.confirm(\n                f\"Would you like to specify a data type for the '{record_set_name}' record set?\",\n                default=False,\n            ):\n                data_type = click.prompt(\"Data type (e.g., sc:GeoCoordinates, sc:Person)\")\n                record_set[\"dataType\"] = data_type\n\n            # Ask about fields with examples\n            console.print(f\"\\n[bold]Fields in '{record_set_name}'[/]\")\n            console.print(\"Fields describe the data columns or attributes in this record set.\")\n\n            if click.confirm(f\"Would you like to add fields to the '{record_set_name}' record set?\", default=True):\n                record_set[\"cr:field\"] = []\n\n                while True:\n                    field_name = click.prompt(\"Field name (column or attribute name)\")\n                    field_description = click.prompt(f\"Description of '{field_name}'\", default=\"\")\n\n                    # Create field with proper Croissant format\n                    field = {\n                        \"@type\": \"cr:Field\",\n                        \"@id\": f\"#{record_set_name}/{field_name}\",\n                        \"name\": field_name,\n                        \"description\": field_description,\n                    }\n\n                    # Ask about data type\n                    if click.confirm(\n                        f\"Would you like to specify a data type for the '{field_name}' field?\",\n                        default=False,\n                    ):\n                        data_type = click.prompt(\"Data type (e.g., sc:Text, sc:Integer, sc:Float, sc:ImageObject)\")\n                        field[\"dataType\"] = data_type\n\n                    # Ask about source\n                    if click.confirm(\n                        f\"Would you like to specify a data source for the '{field_name}' field?\",\n                        default=False,\n                    ):\n                        source_type = click.prompt(\n                            \"Source type\",\n                            type=click.Choice([\"FileObject\", \"FileSet\"]),\n                            default=\"FileObject\",\n                        )\n                        source_id = click.prompt(f\"{source_type} ID\")\n\n                        source = {\"source\": {}}\n                        if source_type == \"FileObject\":\n                            source[\"source\"][\"fileObject\"] = {\"@id\": source_id}\n                        else:\n                            source[\"source\"][\"fileSet\"] = {\"@id\": source_id}\n\n                        # Ask about extraction method\n                        extract_type = click.prompt(\n                            \"Extraction method\",\n                            type=click.Choice([\"column\", \"jsonPath\", \"fileProperty\", \"none\"]),\n                            default=\"none\",\n                        )\n\n                        if extract_type != \"none\":\n                            source[\"source\"][\"extract\"] = {}\n                            if extract_type == \"column\":\n                                column_name = click.prompt(\"Column name\")\n                                source[\"source\"][\"extract\"][\"column\"] = column_name\n                            elif extract_type == \"jsonPath\":\n                                json_path = click.prompt(\"JSONPath expression\")\n                                source[\"source\"][\"extract\"][\"jsonPath\"] = json_path\n                            elif extract_type == \"fileProperty\":\n                                file_property = click.prompt(\n                                    \"File property\",\n                                    type=click.Choice([\"fullpath\", \"filename\", \"content\", \"lines\", \"lineNumbers\"]),\n                                )\n                                source[\"source\"][\"extract\"][\"fileProperty\"] = file_property\n\n                        # Add source to field\n                        for key, value in source[\"source\"].items():\n                            field[key] = value\n\n                    # Ask if the field is repeated (array)\n                    if click.confirm(f\"Is '{field_name}' a repeated field (array/list)?\", default=False):\n                        field[\"repeated\"] = True\n\n                    # Ask if the field references another field\n                    if click.confirm(f\"Does '{field_name}' reference another field (foreign key)?\", default=False):\n                        ref_record_set = click.prompt(\"Referenced record set name\")\n                        ref_field = click.prompt(\"Referenced field name\")\n                        field[\"references\"] = {\"@id\": f\"#{ref_record_set}/{ref_field}\"}\n\n                    # Add field to record set\n                    record_set[\"cr:field\"].append(field)\n\n                    if not click.confirm(\"Add another field?\", default=True):\n                        break\n\n            # Ask about key fields\n            if click.confirm(\n                f\"Would you like to specify key fields for the '{record_set_name}' record set?\",\n                default=False,\n            ):\n                record_set[\"key\"] = []\n                while True:\n                    key_field = click.prompt(\"Key field name\")\n                    record_set[\"key\"].append({\"@id\": f\"#{record_set_name}/{key_field}\"})\n\n                    if not click.confirm(\"Add another key field?\", default=False):\n                        break\n\n            # Add record set to metadata\n            metadata[\"cr:recordSet\"].append(record_set)\n\n            if not click.confirm(\"Add another record set?\", default=False):\n                break\n\n    # Save metadata with a suggested filename\n    default_filename = f\"{dataset_name.lower().replace(' ', '_')}_metadata.json\"\n    output_path = click.prompt(\"Output file path\", default=default_filename)\n\n    with open(output_path, \"w\") as f:\n        json.dump(metadata, f, indent=2)\n\n    # Stage the changes in Git if we're in a biotope project\n    try:\n        biotope_root = find_biotope_root()\n        if biotope_root:\n            import subprocess\n            subprocess.run(\n                [\"git\", \"add\", \".biotope/\"],\n                cwd=biotope_root,\n                check=True\n            )\n            console.print(f\"\u2705 Staged changes in Git\")\n    except (subprocess.CalledProcessError, FileNotFoundError):\n        pass  # Not in a biotope project or Git not available\n\n    # Final success message with rich formatting\n    console.print()\n    console.print(\n        Panel(\n            f\"[bold green]\u2705 Created Croissant metadata file at:[/] [blue]{output_path}[/]\",\n            title=\"Success\",\n            border_style=\"green\",\n        ),\n    )\n\n    console.print(\"[italic]Validate this file with:[/]\")\n    console.print(f\"[bold yellow]biotope annotate validate --jsonld {output_path}[/]\")\n</code></pre>"},{"location":"api-docs/annotate/#biotope.commands.annotate.load","title":"<code>load(jsonld, record_set, num_records)</code>","text":"<p>Load records from a dataset using its Croissant metadata.</p> Source code in <code>biotope/commands/annotate.py</code> <pre><code>@annotate.command()\n@click.option(\n    \"--jsonld\",\n    \"-j\",\n    type=click.Path(exists=True),\n    required=True,\n    help=\"Path to the JSON-LD metadata file.\",\n)\n@click.option(\n    \"--record-set\",\n    \"-r\",\n    required=True,\n    help=\"Name of the record set to load.\",\n)\n@click.option(\n    \"--num-records\",\n    \"-n\",\n    type=int,\n    default=10,\n    help=\"Number of records to load.\",\n)\ndef load(jsonld, record_set, num_records):\n    \"\"\"Load records from a dataset using its Croissant metadata.\"\"\"\n    try:\n        # Use mlcroissant CLI to load the dataset\n        result = subprocess.run(\n            [\n                \"mlcroissant\",\n                \"load\",\n                \"--jsonld\",\n                jsonld,\n                \"--record_set\",\n                record_set,\n                \"--num_records\",\n                str(num_records),\n            ],\n            capture_output=True,\n            text=True,\n            check=True,\n        )\n\n        # Display the output\n        if result.stdout:\n            click.echo(result.stdout)\n\n        click.echo(f\"Loaded {num_records} records from record set '{record_set}'\")\n    except subprocess.CalledProcessError as e:\n        click.echo(f\"Error loading dataset: {e.stderr}\", err=True)\n        exit(1)\n    except Exception as e:\n        click.echo(f\"Error running load command: {e!s}\", err=True)\n        exit(1)\n</code></pre>"},{"location":"api-docs/annotate/#biotope.commands.annotate.merge_metadata","title":"<code>merge_metadata(dynamic_metadata)</code>","text":"<p>Merge dynamic metadata with standard context and structure.</p> Source code in <code>biotope/commands/annotate.py</code> <pre><code>def merge_metadata(dynamic_metadata: dict) -&gt; dict:\n    \"\"\"Merge dynamic metadata with standard context and structure.\"\"\"\n    # Start with standard context\n    metadata = {\n        \"@context\": get_standard_context(),\n        \"@type\": \"Dataset\",\n    }\n\n    # Update with dynamic content\n    metadata.update(dynamic_metadata)\n\n    return metadata\n</code></pre>"},{"location":"api-docs/annotate/#biotope.commands.annotate.validate","title":"<code>validate(jsonld)</code>","text":"<p>Validate a Croissant metadata file.</p> Source code in <code>biotope/commands/annotate.py</code> <pre><code>@annotate.command()\n@click.option(\n    \"--jsonld\",\n    \"-j\",\n    type=click.Path(exists=True),\n    required=True,\n    help=\"Path to the JSON-LD metadata file to validate.\",\n)\ndef validate(jsonld):\n    \"\"\"Validate a Croissant metadata file.\"\"\"\n    try:\n        # Use mlcroissant CLI to validate the file\n        result = subprocess.run(\n            [\"mlcroissant\", \"validate\", \"--jsonld\", jsonld],\n            capture_output=True,\n            text=True,\n            check=True,\n        )\n        click.echo(\"Validation successful! The metadata file is valid.\")\n        if result.stdout:\n            # Filter out informational log messages\n            filtered_output = \"\\n\".join(\n                line for line in result.stdout.splitlines() if not line.startswith(\"I\") or not line.endswith(\"Done.\")\n            )\n            if filtered_output:\n                click.echo(f\"Output: {filtered_output}\")\n        if result.stderr:\n            # Filter out informational log messages\n            filtered_stderr = \"\\n\".join(\n                line for line in result.stderr.splitlines() if not line.startswith(\"I\") or not line.endswith(\"Done.\")\n            )\n            if filtered_stderr:\n                click.echo(f\"Warnings: {filtered_stderr}\")\n    except subprocess.CalledProcessError as e:\n        click.echo(f\"Validation failed: {e.stderr}\", err=True)\n        exit(1)\n    except Exception as e:\n        click.echo(f\"Error running validation: {e!s}\", err=True)\n        exit(1)\n</code></pre>"},{"location":"api-docs/build/","title":"Biotope Build","text":"<p>Draft stage</p> <p>Biotope is in draft stage. Functionality may be missing or incomplete. The API is subject to change.</p> <p>Build command implementation.</p>"},{"location":"api-docs/build/#biotope.commands.build.build","title":"<code>build(config, output)</code>","text":"<p>Build knowledge representation from configured sources.</p> Source code in <code>biotope/commands/build.py</code> <pre><code>@click.command()\n@click.option(\n    \"--config\",\n    \"-c\",\n    type=click.Path(exists=True),\n    help=\"Path to configuration file\",\n)\n@click.option(\n    \"--output\",\n    \"-o\",\n    type=click.Path(),\n    help=\"Output directory for built knowledge graph\",\n)\ndef build(config: str, output: str) -&gt; None:\n    \"\"\"Build knowledge representation from configured sources.\"\"\"\n    click.echo(f\"Building using config from {config} to {output}\")\n</code></pre>"},{"location":"api-docs/build/#biotope.commands.build.build_knowledge","title":"<code>build_knowledge()</code>","text":"<p>Build knowledge representation from configured sources.</p> Source code in <code>biotope/commands/build.py</code> <pre><code>def build_knowledge() -&gt; None:\n    \"\"\"Build knowledge representation from configured sources.\"\"\"\n</code></pre>"},{"location":"api-docs/chat/","title":"Biotope Chat","text":"<p>Draft stage</p> <p>Biotope is in draft stage. Functionality may be missing or incomplete. The API is subject to change.</p> <p>Chat command implementation using biochatter.</p>"},{"location":"api-docs/chat/#biotope.commands.chat.chat","title":"<code>chat(ctx, model_name, prompts, interactive, correct, api_key)</code>","text":"<p>Start a chat session with biochatter.</p> <p>This command provides an interface to the biochatter library, allowing interactive conversations with LLMs about biomedical knowledge.</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Context</code> <p>The click context.</p> required <code>model_name</code> <code>str</code> <p>The name of the LLM model to use.</p> required <code>prompts</code> <code>dict | None</code> <p>A dictionary of prompts for the chat. Use 'primary_model_prompts' as the key for system prompts.</p> required <code>interactive</code> <code>bool</code> <p>Whether to run in interactive mode.</p> required <code>correct</code> <code>bool</code> <p>Whether to correct the output of the LLM.</p> required <code>api_key</code> <code>str | None</code> <p>The API key for the LLM.</p> required Source code in <code>biotope/commands/chat.py</code> <pre><code>@click.command()\n@click.option(\n    \"--model-name\",\n    \"-m\",\n    default=\"gpt-4o-mini\",\n    help=\"LLM model to use (default: gpt-4o-mini)\",\n)\n@click.option(\n    \"--prompts\",\n    \"-p\",\n    default=None,\n    help=\"Custom system prompts for the chat\",\n)\n@click.option(\n    \"--interactive/--no-interactive\",\n    \"-i/-n\",\n    default=True,\n    help=\"Run in interactive mode (default: True)\",\n)\n@click.option(\n    \"--correct/--no-correct\",\n    \"-c/-nc\",\n    default=False,\n    help=\"Correct the output of the LLM (default: False)\",\n)\n@click.option(\n    \"--api-key\",\n    \"-k\",\n    default=None,\n    help=\"API key for the LLM\",\n)\n@click.pass_context\ndef chat(\n    ctx: click.Context,\n    model_name: str,\n    prompts: dict | None,\n    interactive: bool,\n    correct: bool,\n    api_key: str | None,\n) -&gt; None:\n    \"\"\"\n    Start a chat session with biochatter.\n\n    This command provides an interface to the biochatter library, allowing\n    interactive conversations with LLMs about biomedical knowledge.\n\n    Args:\n        ctx: The click context.\n        model_name: The name of the LLM model to use.\n        prompts: A dictionary of prompts for the chat. Use\n            'primary_model_prompts' as the key for system prompts.\n        interactive: Whether to run in interactive mode.\n        correct: Whether to correct the output of the LLM.\n        api_key: The API key for the LLM.\n\n    \"\"\"\n    if not HAS_BIOCHATTER:\n        click.echo(\n            \"Error: biochatter is not installed. Install it with: pip install biotope[chat]\",\n            err=True,\n        )\n        ctx.exit(1)\n\n    try:\n        # Initialize biochatter with the specified model\n        conversation = GptConversation(\n            model_name=model_name,\n            prompts=prompts,\n            correct=correct,\n        )\n\n        if api_key:\n            conversation.set_api_key(api_key)\n        else:\n            conversation.set_api_key(os.getenv(\"OPENAI_API_KEY\"))\n\n        if not api_key and not os.getenv(\"OPENAI_API_KEY\"):\n            click.echo(\n                \"No API key provided. \"\n                \"Please provide an API key using the --api-key option or set the OPENAI_API_KEY environment variable.\",\n                err=True,\n            )\n            ctx.exit(1)\n\n        if interactive:\n            click.echo(\"Starting interactive chat session (Ctrl+C to exit)\")\n            click.echo(\"----------------------------------------\")\n\n            while True:\n                # Get user input\n                user_input = click.prompt(\"You\", type=str)\n\n                if user_input.lower() in [\"exit\", \"quit\"]:\n                    break\n\n                # Get response from biochatter\n                response, _, _ = conversation.query(user_input)\n                click.echo(\"\\nAssistant: \" + response + \"\\n\")\n\n        else:\n            # Read from stdin for non-interactive mode\n            user_input = click.get_text_stream(\"stdin\").read().strip()\n            response, _, _ = conversation.query(user_input)\n            click.echo(response)\n\n    except KeyboardInterrupt:\n        click.echo(\"\\nChat session ended.\")\n    except Exception as e:\n        click.echo(f\"Error: {e!s}\", err=True)\n        ctx.exit(1)\n</code></pre>"},{"location":"api-docs/config/","title":"Biotope Config","text":"<p>Draft stage</p> <p>Biotope is in draft stage. Functionality may be missing or incomplete. The API is subject to change.</p>"},{"location":"api-docs/config/#overview","title":"Overview","text":"<p>The <code>biotope config</code> command manages project configuration and metadata settings. It provides tools for setting up validation requirements, managing project metadata, and configuring remote validation services.</p>"},{"location":"api-docs/config/#commands","title":"Commands","text":""},{"location":"api-docs/config/#project-metadata-management","title":"Project Metadata Management","text":""},{"location":"api-docs/config/#biotope-config-set-project-metadata","title":"<code>biotope config set-project-metadata</code>","text":"<p>Set project-level metadata that will be used to pre-fill annotation fields.</p> <p>Usage: <pre><code>biotope config set-project-metadata\n</code></pre></p> <p>Interactive Prompts: - Description: Brief description of the project and its purpose - URL: Project homepage, repository, or documentation URL - Creator Name: Name of the project maintainer - Creator Email: Email address of the project maintainer - License: Data usage license (e.g., MIT, CC-BY, etc.) - Citation: How to cite the project or dataset</p> <p>Example: <pre><code>$ biotope config set-project-metadata\nProject description: A comprehensive dataset for protein structure analysis\nProject URL: https://github.com/example/protein-data\nCreator name: Dr. Jane Smith\nCreator email: jane.smith@university.edu\nLicense: MIT\nCitation: Smith, J. et al. (2024). Protein Structure Dataset. Nature Data.\n</code></pre></p>"},{"location":"api-docs/config/#biotope-config-show-project-metadata","title":"<code>biotope config show-project-metadata</code>","text":"<p>Display the current project-level metadata configuration.</p> <p>Usage: <pre><code>biotope config show-project-metadata\n</code></pre></p> <p>Output: <pre><code>Project Metadata Configuration:\nDescription: A comprehensive dataset for protein structure analysis\nURL: https://github.com/example/protein-data\nCreator: Dr. Jane Smith (jane.smith@university.edu)\nLicense: MIT\nCitation: Smith, J. et al. (2024). Protein Structure Dataset. Nature Data.\n</code></pre></p>"},{"location":"api-docs/config/#validation-configuration","title":"Validation Configuration","text":""},{"location":"api-docs/config/#biotope-config-show-validation","title":"<code>biotope config show-validation</code>","text":"<p>Show current validation configuration and requirements.</p>"},{"location":"api-docs/config/#biotope-config-set-validation","title":"<code>biotope config set-validation</code>","text":"<p>Set validation requirements for specific fields.</p>"},{"location":"api-docs/config/#biotope-config-remove-validation","title":"<code>biotope config remove-validation</code>","text":"<p>Remove validation requirements for specific fields.</p>"},{"location":"api-docs/config/#biotope-config-toggle-validation","title":"<code>biotope config toggle-validation</code>","text":"<p>Enable or disable validation checking.</p>"},{"location":"api-docs/config/#remote-validation-configuration","title":"Remote Validation Configuration","text":""},{"location":"api-docs/config/#biotope-config-set-remote-validation","title":"<code>biotope config set-remote-validation</code>","text":"<p>Configure remote validation service for cluster-wide policies.</p>"},{"location":"api-docs/config/#biotope-config-show-remote-validation","title":"<code>biotope config show-remote-validation</code>","text":"<p>Show remote validation configuration status.</p>"},{"location":"api-docs/config/#biotope-config-remove-remote-validation","title":"<code>biotope config remove-remote-validation</code>","text":"<p>Remove remote validation configuration.</p>"},{"location":"api-docs/config/#biotope-config-clear-validation-cache","title":"<code>biotope config clear-validation-cache</code>","text":"<p>Clear cached remote validation configuration.</p>"},{"location":"api-docs/config/#configuration-file-structure","title":"Configuration File Structure","text":"<p>Project metadata is stored in <code>.biotope/config/biotope.yaml</code>:</p> <pre><code>project_name: \"my-project\"\ngit_integration: true\n\nproject_metadata:\n  description: \"Project description\"\n  url: \"https://example.com/project\"\n  creator:\n    name: \"John Doe\"\n    email: \"john@example.com\"\n  license: \"MIT\"\n  citation: \"Doe, J. (2024). Project Title. Journal Name.\"\n\nannotation_validation:\n  enabled: true\n  fields:\n    license:\n      type: \"string\"\n      required: true\n      min_length: 3\n  remote_config:\n    url: \"https://cluster.example.com/validation.yaml\"\n    cache_duration: 3600\n    fallback: true\n</code></pre>"},{"location":"api-docs/config/#use-cases","title":"Use Cases","text":""},{"location":"api-docs/config/#setting-up-project-metadata","title":"Setting Up Project Metadata","text":"<ol> <li>During Initialization: Set project metadata during <code>biotope init</code></li> <li>After Initialization: Use <code>biotope config set-project-metadata</code> to add or update metadata</li> <li>Team Projects: Ensure all team members use consistent project metadata</li> </ol>"},{"location":"api-docs/config/#annotation-workflow-integration","title":"Annotation Workflow Integration","text":"<p>Project metadata automatically pre-fills annotation forms:</p> <pre><code># Set project metadata once\nbiotope config set-project-metadata\n\n# Use in annotation (metadata will be pre-filled)\nbiotope annotate interactive --staged\n</code></pre>"},{"location":"api-docs/config/#validation-configuration_1","title":"Validation Configuration","text":"<p>Configure validation requirements for your project:</p> <pre><code># Set required fields\nbiotope config set-validation --field license --type string --required\n\n# Enable validation\nbiotope config toggle-validation --enabled\n\n# Check configuration\nbiotope config show-validation\n</code></pre>"},{"location":"api-docs/config/#best-practices","title":"Best Practices","text":"<ol> <li>Set Project Metadata Early: Configure project metadata during initialization or early in the project lifecycle</li> <li>Use Consistent Metadata: Ensure all team members use the same project metadata for consistency</li> <li>Regular Updates: Update project metadata when project details change</li> <li>Validation Requirements: Set appropriate validation requirements for your use case</li> <li>Remote Validation: Use remote validation for cluster-wide policy enforcement</li> </ol> <p>Configuration management commands for biotope.</p>"},{"location":"api-docs/config/#biotope.commands.config.clear_validation_cache","title":"<code>clear_validation_cache()</code>","text":"<p>Clear cached remote validation configurations.</p> Source code in <code>biotope/commands/config.py</code> <pre><code>@config.command()\ndef clear_validation_cache() -&gt; None:\n    \"\"\"Clear cached remote validation configurations.\"\"\"\n    console = Console()\n\n    # Find biotope project root\n    biotope_root = _find_biotope_root()\n    if not biotope_root:\n        click.echo(\"\u274c Not in a biotope project. Run 'biotope init' first.\")\n        raise click.Abort\n\n    cache_dir = biotope_root / \".biotope\" / \"cache\" / \"validation\"\n    if cache_dir.exists():\n        import shutil\n        shutil.rmtree(cache_dir)\n        console.print(\"\u2705 Cleared validation cache\")\n    else:\n        console.print(\"\u2139\ufe0f  No validation cache found\")\n</code></pre>"},{"location":"api-docs/config/#biotope.commands.config.config","title":"<code>config()</code>","text":"<p>Manage biotope project configuration.</p> Source code in <code>biotope/commands/config.py</code> <pre><code>@click.group()\ndef config() -&gt; None:\n    \"\"\"Manage biotope project configuration.\"\"\"\n</code></pre>"},{"location":"api-docs/config/#biotope.commands.config.remove_remote_validation","title":"<code>remove_remote_validation()</code>","text":"<p>Remove remote validation configuration.</p> Source code in <code>biotope/commands/config.py</code> <pre><code>@config.command()\ndef remove_remote_validation() -&gt; None:\n    \"\"\"Remove remote validation configuration.\"\"\"\n    console = Console()\n\n    # Find biotope project root\n    biotope_root = _find_biotope_root()\n    if not biotope_root:\n        click.echo(\"\u274c Not in a biotope project. Run 'biotope init' first.\")\n        raise click.Abort\n\n    config_path = biotope_root / \".biotope\" / \"config\" / \"biotope.yaml\"\n    if not config_path.exists():\n        click.echo(\"\u274c Biotope configuration not found. Run 'biotope init' first.\")\n        raise click.Abort\n\n    # Load current config\n    try:\n        with open(config_path) as f:\n            config = yaml.safe_load(f) or {}\n    except yaml.YAMLError as e:\n        click.echo(f\"\u274c Error reading configuration: {e}\")\n        raise click.Abort\n\n    # Remove remote configuration\n    if \"annotation_validation\" in config and \"remote_config\" in config[\"annotation_validation\"]:\n        del config[\"annotation_validation\"][\"remote_config\"]\n        console.print(\"\u2705 Removed remote validation configuration\")\n    else:\n        console.print(\"\u26a0\ufe0f  No remote validation configuration found\")\n\n    # Save updated config\n    try:\n        with open(config_path, 'w') as f:\n            yaml.dump(config, f, default_flow_style=False)\n    except yaml.YAMLError as e:\n        click.echo(f\"\u274c Error writing configuration: {e}\")\n        raise click.Abort\n</code></pre>"},{"location":"api-docs/config/#biotope.commands.config.remove_validation","title":"<code>remove_validation(field)</code>","text":"<p>Remove a field from annotation validation requirements.</p> Source code in <code>biotope/commands/config.py</code> <pre><code>@config.command()\n@click.option(\n    \"--field\",\n    \"-f\",\n    required=True,\n    help=\"Field name to remove from required fields\",\n)\ndef remove_validation(field: str) -&gt; None:\n    \"\"\"Remove a field from annotation validation requirements.\"\"\"\n    console = Console()\n\n    # Find biotope project root\n    biotope_root = _find_biotope_root()\n    if not biotope_root:\n        click.echo(\"\u274c Not in a biotope project. Run 'biotope init' first.\")\n        raise click.Abort\n\n    config_path = biotope_root / \".biotope\" / \"config\" / \"biotope.yaml\"\n    if not config_path.exists():\n        click.echo(\"\u274c Biotope configuration not found. Run 'biotope init' first.\")\n        raise click.Abort\n\n    # Load current config\n    try:\n        with open(config_path) as f:\n            config = yaml.safe_load(f) or {}\n    except yaml.YAMLError as e:\n        click.echo(f\"\u274c Error reading configuration: {e}\")\n        raise click.Abort\n\n    # Remove field from required fields\n    if \"annotation_validation\" in config:\n        if field in config[\"annotation_validation\"].get(\"minimum_required_fields\", []):\n            config[\"annotation_validation\"][\"minimum_required_fields\"].remove(field)\n            console.print(f\"\u2705 Removed '{field}' from required fields\")\n        else:\n            console.print(f\"\u26a0\ufe0f  Field '{field}' is not in required fields\")\n\n        # Remove field validation rules\n        if \"field_validation\" in config[\"annotation_validation\"]:\n            if field in config[\"annotation_validation\"][\"field_validation\"]:\n                del config[\"annotation_validation\"][\"field_validation\"][field]\n                console.print(f\"\u2705 Removed validation rules for '{field}'\")\n\n    # Save updated config\n    try:\n        with open(config_path, 'w') as f:\n            yaml.dump(config, f, default_flow_style=False)\n        console.print(\"\u2705 Configuration updated successfully\")\n    except yaml.YAMLError as e:\n        click.echo(f\"\u274c Error writing configuration: {e}\")\n        raise click.Abort\n</code></pre>"},{"location":"api-docs/config/#biotope.commands.config.set_project_metadata","title":"<code>set_project_metadata()</code>","text":"<p>Set project-level metadata for pre-filling annotations.</p> Source code in <code>biotope/commands/config.py</code> <pre><code>@config.command()\ndef set_project_metadata() -&gt; None:\n    \"\"\"Set project-level metadata for pre-filling annotations.\"\"\"\n    console = Console()\n\n    # Find biotope project root\n    biotope_root = _find_biotope_root()\n    if not biotope_root:\n        click.echo(\"\u274c Not in a biotope project. Run 'biotope init' first.\")\n        raise click.Abort\n\n    config_path = biotope_root / \".biotope\" / \"config\" / \"biotope.yaml\"\n    if not config_path.exists():\n        click.echo(\"\u274c Biotope configuration not found. Run 'biotope init' first.\")\n        raise click.Abort\n\n    # Load current config\n    try:\n        with open(config_path) as f:\n            config = yaml.safe_load(f) or {}\n    except yaml.YAMLError as e:\n        click.echo(f\"\u274c Error reading configuration: {e}\")\n        raise click.Abort\n\n    # Initialize project_metadata if it doesn't exist\n    if \"project_metadata\" not in config:\n        config[\"project_metadata\"] = {}\n\n    current_metadata = config[\"project_metadata\"]\n\n    console.print(f\"\\n[bold blue]Project Metadata Setup[/]\")\n    console.print(\"The following information will be used to pre-fill metadata forms when creating dataset annotations.\")\n    console.print(\"You can skip any fields by pressing Enter.\")\n    console.print()\n\n    # Project description\n    project_description = click.prompt(\n        \"Project description (what is this project about?)\",\n        default=current_metadata.get(\"description\", \"\"),\n        show_default=True,\n    )\n    if project_description:\n        current_metadata[\"description\"] = project_description\n    elif \"description\" in current_metadata:\n        del current_metadata[\"description\"]\n\n    # Project URL\n    project_url = click.prompt(\n        \"Project URL (if available)\",\n        default=current_metadata.get(\"url\", \"\"),\n        show_default=True,\n    )\n    if project_url:\n        current_metadata[\"url\"] = project_url\n    elif \"url\" in current_metadata:\n        del current_metadata[\"url\"]\n\n    # Creator/Contact\n    creator = click.prompt(\n        \"Primary contact person (email preferred)\",\n        default=current_metadata.get(\"creator\", \"\"),\n        show_default=True,\n    )\n    if creator:\n        current_metadata[\"creator\"] = creator\n    elif \"creator\" in current_metadata:\n        del current_metadata[\"creator\"]\n\n    # License\n    license_url = click.prompt(\n        \"Default license URL\",\n        default=current_metadata.get(\"license\", \"https://creativecommons.org/licenses/by/4.0/\"),\n        show_default=True,\n    )\n    if license_url:\n        current_metadata[\"license\"] = license_url\n    elif \"license\" in current_metadata:\n        del current_metadata[\"license\"]\n\n    # Citation template\n    citation_template = click.prompt(\n        \"Citation template (use {name} and {year} as placeholders)\",\n        default=current_metadata.get(\"citation\", \"Please cite this dataset as: {name} ({year})\"),\n        show_default=True,\n    )\n    if citation_template:\n        current_metadata[\"citation\"] = citation_template\n    elif \"citation\" in current_metadata:\n        del current_metadata[\"citation\"]\n\n    # Access restrictions\n    has_access_restrictions = click.confirm(\n        \"Does this project have default access restrictions?\",\n        default=bool(current_metadata.get(\"access_restrictions\")),\n    )\n    if has_access_restrictions:\n        access_restrictions = click.prompt(\n            \"Default access restrictions description\",\n            default=current_metadata.get(\"access_restrictions\", \"\"),\n            show_default=True,\n        )\n        if access_restrictions:\n            current_metadata[\"access_restrictions\"] = access_restrictions\n        elif \"access_restrictions\" in current_metadata:\n            del current_metadata[\"access_restrictions\"]\n    elif \"access_restrictions\" in current_metadata:\n        del current_metadata[\"access_restrictions\"]\n\n    # Legal obligations\n    has_legal_obligations = click.confirm(\n        \"Does this project have default legal obligations?\",\n        default=bool(current_metadata.get(\"legal_obligations\")),\n    )\n    if has_legal_obligations:\n        legal_obligations = click.prompt(\n            \"Default legal obligations description\",\n            default=current_metadata.get(\"legal_obligations\", \"\"),\n            show_default=True,\n        )\n        if legal_obligations:\n            current_metadata[\"legal_obligations\"] = legal_obligations\n        elif \"legal_obligations\" in current_metadata:\n            del current_metadata[\"legal_obligations\"]\n    elif \"legal_obligations\" in current_metadata:\n        del current_metadata[\"legal_obligations\"]\n\n    # Collaboration partner\n    has_collaboration_partner = click.confirm(\n        \"Does this project have a collaboration partner?\",\n        default=bool(current_metadata.get(\"collaboration_partner\")),\n    )\n    if has_collaboration_partner:\n        collaboration_partner = click.prompt(\n            \"Collaboration partner and institute\",\n            default=current_metadata.get(\"collaboration_partner\", \"\"),\n            show_default=True,\n        )\n        if collaboration_partner:\n            current_metadata[\"collaboration_partner\"] = collaboration_partner\n        elif \"collaboration_partner\" in current_metadata:\n            del current_metadata[\"collaboration_partner\"]\n    elif \"collaboration_partner\" in current_metadata:\n        del current_metadata[\"collaboration_partner\"]\n\n    # Update config\n    config[\"project_metadata\"] = current_metadata\n\n    # Save updated config\n    try:\n        with open(config_path, 'w') as f:\n            yaml.dump(config, f, default_flow_style=False)\n\n        if current_metadata:\n            console.print(f\"\\n\u2705 Project metadata updated successfully\")\n            console.print(f\"\ud83d\udca1 This metadata will be used to pre-fill annotation forms\")\n        else:\n            console.print(f\"\\n\u2705 Project metadata cleared\")\n            console.print(f\"\ud83d\udca1 No default values will be used for annotations\")\n\n    except yaml.YAMLError as e:\n        click.echo(f\"\u274c Error writing configuration: {e}\")\n        raise click.Abort\n</code></pre>"},{"location":"api-docs/config/#biotope.commands.config.set_remote_validation","title":"<code>set_remote_validation(url, cache_duration, fallback_to_local)</code>","text":"<p>Set remote validation configuration URL.</p> Source code in <code>biotope/commands/config.py</code> <pre><code>@config.command()\n@click.option(\n    \"--url\",\n    \"-u\",\n    required=True,\n    help=\"URL to remote validation configuration\",\n)\n@click.option(\n    \"--cache-duration\",\n    type=int,\n    default=3600,\n    help=\"Cache duration in seconds (default: 3600)\",\n)\n@click.option(\n    \"--fallback-to-local/--no-fallback\",\n    default=True,\n    help=\"Fall back to local config if remote fails (default: true)\",\n)\ndef set_remote_validation(url: str, cache_duration: int, fallback_to_local: bool) -&gt; None:\n    \"\"\"Set remote validation configuration URL.\"\"\"\n    console = Console()\n\n    # Find biotope project root\n    biotope_root = _find_biotope_root()\n    if not biotope_root:\n        click.echo(\"\u274c Not in a biotope project. Run 'biotope init' first.\")\n        raise click.Abort\n\n    config_path = biotope_root / \".biotope\" / \"config\" / \"biotope.yaml\"\n    if not config_path.exists():\n        click.echo(\"\u274c Biotope configuration not found. Run 'biotope init' first.\")\n        raise click.Abort\n\n    # Load current config\n    try:\n        with open(config_path) as f:\n            config = yaml.safe_load(f) or {}\n    except yaml.YAMLError as e:\n        click.echo(f\"\u274c Error reading configuration: {e}\")\n        raise click.Abort\n\n    # Initialize annotation_validation if it doesn't exist\n    if \"annotation_validation\" not in config:\n        config[\"annotation_validation\"] = {}\n\n    # Set remote configuration\n    config[\"annotation_validation\"][\"remote_config\"] = {\n        \"url\": url,\n        \"cache_duration\": cache_duration,\n        \"fallback_to_local\": fallback_to_local\n    }\n\n    # Save updated config\n    try:\n        with open(config_path, 'w') as f:\n            yaml.dump(config, f, default_flow_style=False)\n\n        console.print(f\"\u2705 Set remote validation URL: {url}\")\n        console.print(f\"   Cache duration: {cache_duration} seconds\")\n        console.print(f\"   Fallback to local: {fallback_to_local}\")\n\n        # Test the remote configuration\n        console.print(\"\\n[bold blue]Testing remote configuration...[/]\")\n        try:\n            from biotope.validation import _load_remote_validation_config\n            remote_config = _load_remote_validation_config(\n                config[\"annotation_validation\"][\"remote_config\"], \n                biotope_root\n            )\n            if remote_config:\n                console.print(\"\u2705 Remote configuration loaded successfully\")\n                required_fields = remote_config.get(\"minimum_required_fields\", [])\n                console.print(f\"   Required fields: {', '.join(required_fields)}\")\n            else:\n                console.print(\"\u26a0\ufe0f  Remote configuration not available (using fallback)\")\n        except Exception as e:\n            console.print(f\"\u274c Error testing remote configuration: {e}\")\n\n    except yaml.YAMLError as e:\n        click.echo(f\"\u274c Error writing configuration: {e}\")\n        raise click.Abort\n</code></pre>"},{"location":"api-docs/config/#biotope.commands.config.set_validation","title":"<code>set_validation(field, type, min_length, required_keys)</code>","text":"<p>Set annotation validation requirements.</p> Source code in <code>biotope/commands/config.py</code> <pre><code>@config.command()\n@click.option(\n    \"--field\",\n    \"-f\",\n    help=\"Field name to add to required fields\",\n)\n@click.option(\n    \"--type\",\n    \"-t\",\n    type=click.Choice([\"string\", \"object\", \"array\"]),\n    help=\"Data type for the field\",\n)\n@click.option(\n    \"--min-length\",\n    type=int,\n    help=\"Minimum length for string/array fields\",\n)\n@click.option(\n    \"--required-keys\",\n    help=\"Comma-separated list of required keys for object fields\",\n)\ndef set_validation(field: Optional[str], type: Optional[str], min_length: Optional[int], required_keys: Optional[str]) -&gt; None:\n    \"\"\"Set annotation validation requirements.\"\"\"\n    console = Console()\n\n    # Find biotope project root\n    biotope_root = _find_biotope_root()\n    if not biotope_root:\n        click.echo(\"\u274c Not in a biotope project. Run 'biotope init' first.\")\n        raise click.Abort\n\n    config_path = biotope_root / \".biotope\" / \"config\" / \"biotope.yaml\"\n    if not config_path.exists():\n        click.echo(\"\u274c Biotope configuration not found. Run 'biotope init' first.\")\n        raise click.Abort\n\n    # Load current config\n    try:\n        with open(config_path) as f:\n            config = yaml.safe_load(f) or {}\n    except yaml.YAMLError as e:\n        click.echo(f\"\u274c Error reading configuration: {e}\")\n        raise click.Abort\n\n    # Initialize annotation_validation if it doesn't exist\n    if \"annotation_validation\" not in config:\n        config[\"annotation_validation\"] = {\n            \"enabled\": True,\n            \"minimum_required_fields\": [],\n            \"field_validation\": {}\n        }\n\n    # Add field to required fields\n    if field:\n        if field not in config[\"annotation_validation\"][\"minimum_required_fields\"]:\n            config[\"annotation_validation\"][\"minimum_required_fields\"].append(field)\n            console.print(f\"\u2705 Added '{field}' to required fields\")\n        else:\n            console.print(f\"\u26a0\ufe0f  Field '{field}' is already required\")\n\n    # Add field validation rules\n    if field and type:\n        field_validation = config[\"annotation_validation\"][\"field_validation\"]\n        field_validation[field] = {\"type\": type}\n\n        if min_length is not None:\n            field_validation[field][\"min_length\"] = min_length\n\n        if required_keys:\n            keys_list = [key.strip() for key in required_keys.split(\",\")]\n            field_validation[field][\"required_keys\"] = keys_list\n\n        console.print(f\"\u2705 Added validation rules for '{field}'\")\n\n    # Save updated config\n    try:\n        with open(config_path, 'w') as f:\n            yaml.dump(config, f, default_flow_style=False)\n        console.print(\"\u2705 Configuration updated successfully\")\n    except yaml.YAMLError as e:\n        click.echo(f\"\u274c Error writing configuration: {e}\")\n        raise click.Abort\n</code></pre>"},{"location":"api-docs/config/#biotope.commands.config.set_validation_pattern","title":"<code>set_validation_pattern(pattern)</code>","text":"<p>Set the validation pattern for this project.</p> Source code in <code>biotope/commands/config.py</code> <pre><code>@config.command()\n@click.option(\n    \"--pattern\",\n    \"-p\",\n    required=True,\n    help=\"Validation pattern name (e.g., 'default', 'cluster-strict', 'storage-management')\",\n)\ndef set_validation_pattern(pattern: str) -&gt; None:\n    \"\"\"Set the validation pattern for this project.\"\"\"\n    console = Console()\n\n    # Find biotope project root\n    biotope_root = _find_biotope_root()\n    if not biotope_root:\n        click.echo(\"\u274c Not in a biotope project. Run 'biotope init' first.\")\n        raise click.Abort\n\n    config_path = biotope_root / \".biotope\" / \"config\" / \"biotope.yaml\"\n    if not config_path.exists():\n        click.echo(\"\u274c Biotope configuration not found. Run 'biotope init' first.\")\n        raise click.Abort\n\n    # Load current config\n    try:\n        with open(config_path) as f:\n            config = yaml.safe_load(f) or {}\n    except yaml.YAMLError as e:\n        click.echo(f\"\u274c Error reading configuration: {e}\")\n        raise click.Abort\n\n    # Initialize annotation_validation if it doesn't exist\n    if \"annotation_validation\" not in config:\n        config[\"annotation_validation\"] = {}\n\n    config[\"annotation_validation\"][\"validation_pattern\"] = pattern\n\n    # Save updated config\n    try:\n        with open(config_path, 'w') as f:\n            yaml.dump(config, f, default_flow_style=False)\n\n        console.print(f\"\u2705 Set validation pattern to: [bold green]{pattern}[/]\")\n        console.print(f\"\\n\ud83d\udca1 Cluster administrators can check compliance with:\")\n        console.print(f\"  biotope config show-validation-pattern\")\n\n    except yaml.YAMLError as e:\n        click.echo(f\"\u274c Error writing configuration: {e}\")\n        raise click.Abort\n</code></pre>"},{"location":"api-docs/config/#biotope.commands.config.show_project_metadata","title":"<code>show_project_metadata()</code>","text":"<p>Show current project-level metadata configuration.</p> Source code in <code>biotope/commands/config.py</code> <pre><code>@config.command()\ndef show_project_metadata() -&gt; None:\n    \"\"\"Show current project-level metadata configuration.\"\"\"\n    console = Console()\n\n    # Find biotope project root\n    biotope_root = _find_biotope_root()\n    if not biotope_root:\n        click.echo(\"\u274c Not in a biotope project. Run 'biotope init' first.\")\n        raise click.Abort\n\n    # Load config\n    config = load_biotope_config(biotope_root)\n    project_metadata = config.get(\"project_metadata\", {})\n\n    if project_metadata:\n        console.print(f\"\\n[bold blue]Project Metadata Configuration[/]\")\n        console.print(\"This metadata will be used to pre-fill annotation forms:\")\n\n        table = Table(show_header=False)\n        table.add_column(\"Field\", style=\"cyan\")\n        table.add_column(\"Value\", style=\"green\")\n\n        for key, value in project_metadata.items():\n            if key == \"creator\" and isinstance(value, dict):\n                display_value = value.get(\"name\", str(value))\n            else:\n                display_value = str(value)\n            table.add_row(key, display_value)\n\n        console.print(table)\n        console.print(f\"\\n\ud83d\udca1 Use 'biotope config set-project-metadata' to update these values\")\n    else:\n        console.print(f\"\\n[bold yellow]No project metadata configured[/]\")\n        console.print(\"Use 'biotope config set-project-metadata' to add project-level metadata\")\n</code></pre>"},{"location":"api-docs/config/#biotope.commands.config.show_remote_validation","title":"<code>show_remote_validation()</code>","text":"<p>Show remote validation configuration status.</p> Source code in <code>biotope/commands/config.py</code> <pre><code>@config.command()\ndef show_remote_validation() -&gt; None:\n    \"\"\"Show remote validation configuration status.\"\"\"\n    console = Console()\n\n    # Find biotope project root\n    biotope_root = _find_biotope_root()\n    if not biotope_root:\n        click.echo(\"\u274c Not in a biotope project. Run 'biotope init' first.\")\n        raise click.Abort\n\n    # Load config\n    config = load_biotope_config(biotope_root)\n    validation_config = config.get(\"annotation_validation\", {})\n    remote_config = validation_config.get(\"remote_config\", {})\n\n    if remote_config:\n        console.print(f\"\\n[bold blue]Remote Validation Configuration[/]\")\n        console.print(f\"URL: {remote_config.get('url', 'N/A')}\")\n        console.print(f\"Cache Duration: {remote_config.get('cache_duration', 3600)} seconds\")\n        console.print(f\"Fallback to Local: {remote_config.get('fallback_to_local', True)}\")\n\n        # Check cache status\n        from biotope.validation import _get_cache_file_path\n        cache_file = _get_cache_file_path(remote_config[\"url\"], biotope_root)\n        if cache_file.exists():\n            cache_age = datetime.now() - datetime.fromtimestamp(cache_file.stat().st_mtime)\n            console.print(f\"Cache Status: \u2705 Cached ({cache_age.total_seconds():.0f}s ago)\")\n        else:\n            console.print(\"Cache Status: \u274c Not cached\")\n\n        # Show merged configuration\n        console.print(f\"\\n[bold green]Effective Configuration (Remote + Local)[/]\")\n        required_fields = validation_config.get(\"minimum_required_fields\", [])\n        if required_fields:\n            console.print(f\"Required Fields: {', '.join(required_fields)}\")\n        else:\n            console.print(\"Required Fields: None configured\")\n    else:\n        console.print(f\"\\n[bold yellow]No remote validation configuration[/]\")\n        console.print(\"Use 'biotope config set-remote-validation --url &lt;url&gt;' to add one\")\n</code></pre>"},{"location":"api-docs/config/#biotope.commands.config.show_validation","title":"<code>show_validation()</code>","text":"<p>Show current annotation validation requirements.</p> Source code in <code>biotope/commands/config.py</code> <pre><code>@config.command()\ndef show_validation() -&gt; None:\n    \"\"\"Show current annotation validation requirements.\"\"\"\n    console = Console()\n\n    # Find biotope project root\n    biotope_root = _find_biotope_root()\n    if not biotope_root:\n        click.echo(\"\u274c Not in a biotope project. Run 'biotope init' first.\")\n        raise click.Abort\n\n    # Load config\n    config = load_biotope_config(biotope_root)\n    validation_config = config.get(\"annotation_validation\", {})\n\n    console.print(f\"\\n[bold blue]Annotation Validation Configuration[/]\")\n    console.print(f\"Enabled: {'\u2705' if validation_config.get('enabled', True) else '\u274c'}\")\n\n    # Show validation pattern\n    from biotope.validation import get_validation_pattern\n    pattern = get_validation_pattern(biotope_root)\n    console.print(f\"Validation Pattern: [bold green]{pattern}[/]\")\n\n    # Show required fields\n    required_fields = validation_config.get(\"minimum_required_fields\", [])\n    if required_fields:\n        console.print(f\"\\n[bold green]Required Fields:[/]\")\n        table = Table(show_header=True, header_style=\"bold magenta\")\n        table.add_column(\"Field\", style=\"cyan\")\n        table.add_column(\"Type\", style=\"green\")\n        table.add_column(\"Validation Rules\", style=\"yellow\")\n\n        field_validation = validation_config.get(\"field_validation\", {})\n        for field in required_fields:\n            rules = field_validation.get(field, {})\n            field_type = rules.get(\"type\", \"any\")\n\n            validation_rules = []\n            if \"min_length\" in rules:\n                validation_rules.append(f\"min_length: {rules['min_length']}\")\n            if \"required_keys\" in rules:\n                validation_rules.append(f\"required_keys: {', '.join(rules['required_keys'])}\")\n\n            table.add_row(field, field_type, \"; \".join(validation_rules) if validation_rules else \"none\")\n\n        console.print(table)\n    else:\n        console.print(f\"\\n[bold yellow]No required fields configured[/]\")\n        console.print(\"Use 'biotope config set-validation --field &lt;field_name&gt;' to add requirements\")\n</code></pre>"},{"location":"api-docs/config/#biotope.commands.config.show_validation_pattern","title":"<code>show_validation_pattern()</code>","text":"<p>Show validation pattern information for cluster compliance checking.</p> Source code in <code>biotope/commands/config.py</code> <pre><code>@config.command()\ndef show_validation_pattern() -&gt; None:\n    \"\"\"Show validation pattern information for cluster compliance checking.\"\"\"\n    console = Console()\n\n    # Find biotope project root\n    biotope_root = _find_biotope_root()\n    if not biotope_root:\n        click.echo(\"\u274c Not in a biotope project. Run 'biotope init' first.\")\n        raise click.Abort\n\n    # Get validation info\n    from biotope.validation import get_validation_info\n    info = get_validation_info(biotope_root)\n\n    console.print(f\"\\n[bold blue]Validation Pattern Information[/]\")\n    console.print(f\"Pattern: [bold green]{info['validation_pattern']}[/]\")\n    console.print(f\"Enabled: {'\u2705' if info['enabled'] else '\u274c'}\")\n\n    if info['remote_configured']:\n        console.print(f\"Remote Validation: \u2705 Configured\")\n        console.print(f\"  URL: {info['remote_url']}\")\n        console.print(f\"  Cache Duration: {info['cache_duration']} seconds\")\n        console.print(f\"  Fallback to Local: {info['fallback_to_local']}\")\n    else:\n        console.print(f\"Remote Validation: \u274c Not configured\")\n\n    console.print(f\"\\n[bold green]Required Fields:[/] {len(info['required_fields'])}\")\n    if info['required_fields']:\n        console.print(f\"  {', '.join(info['required_fields'])}\")\n\n    # Show compliance hints for cluster administrators\n    pattern = info['validation_pattern']\n    if 'cluster' in pattern.lower():\n        console.print(f\"\\n[bold green]\u2705 Cluster-compliant validation pattern[/]\")\n    elif 'storage' in pattern.lower():\n        console.print(f\"\\n[bold green]\u2705 Storage management validation pattern[/]\")\n    else:\n        console.print(f\"\\n[bold yellow]\u26a0\ufe0f  Using default validation pattern[/]\")\n        console.print(\"Consider configuring cluster-specific validation if required.\")\n</code></pre>"},{"location":"api-docs/config/#biotope.commands.config.toggle_validation","title":"<code>toggle_validation(enabled)</code>","text":"<p>Enable or disable annotation validation.</p> Source code in <code>biotope/commands/config.py</code> <pre><code>@config.command()\n@click.option(\n    \"--enabled/--disabled\",\n    default=True,\n    help=\"Enable or disable annotation validation\",\n)\ndef toggle_validation(enabled: bool) -&gt; None:\n    \"\"\"Enable or disable annotation validation.\"\"\"\n    console = Console()\n\n    # Find biotope project root\n    biotope_root = _find_biotope_root()\n    if not biotope_root:\n        click.echo(\"\u274c Not in a biotope project. Run 'biotope init' first.\")\n        raise click.Abort\n\n    config_path = biotope_root / \".biotope\" / \"config\" / \"biotope.yaml\"\n    if not config_path.exists():\n        click.echo(\"\u274c Biotope configuration not found. Run 'biotope init' first.\")\n        raise click.Abort\n\n    # Load current config\n    try:\n        with open(config_path) as f:\n            config = yaml.safe_load(f) or {}\n    except yaml.YAMLError as e:\n        click.echo(f\"\u274c Error reading configuration: {e}\")\n        raise click.Abort\n\n    # Initialize annotation_validation if it doesn't exist\n    if \"annotation_validation\" not in config:\n        config[\"annotation_validation\"] = {}\n\n    config[\"annotation_validation\"][\"enabled\"] = enabled\n\n    # Save updated config\n    try:\n        with open(config_path, 'w') as f:\n            yaml.dump(config, f, default_flow_style=False)\n\n        status = \"enabled\" if enabled else \"disabled\"\n        console.print(f\"\u2705 Annotation validation {status}\")\n    except yaml.YAMLError as e:\n        click.echo(f\"\u274c Error writing configuration: {e}\")\n        raise click.Abort\n</code></pre>"},{"location":"api-docs/init/","title":"Biotope Init","text":"<p>Draft stage</p> <p>Biotope is in draft stage. Functionality may be missing or incomplete. The API is subject to change.</p>"},{"location":"api-docs/init/#overview","title":"Overview","text":"<p>The <code>biotope init</code> command initializes a new biotope project with interactive configuration. It sets up the necessary directory structure and configuration files for metadata management.</p>"},{"location":"api-docs/init/#features","title":"Features","text":""},{"location":"api-docs/init/#interactive-configuration","title":"Interactive Configuration","text":"<p>The init process guides you through several configuration options:</p> <ol> <li>Project Name: Set a name for your biotope project</li> <li>Git Integration: Choose whether to initialize Git version control</li> <li>Knowledge Graph: Optionally install a knowledge graph for enhanced data management</li> <li>Output Format: Select output format (only shown if knowledge graph is enabled)</li> <li>Project Metadata: Collect project-level metadata for annotation pre-filling</li> </ol>"},{"location":"api-docs/init/#project-level-metadata-collection","title":"Project-Level Metadata Collection","text":"<p>During initialization, you can optionally collect project-level metadata that will be used to pre-fill annotation fields:</p> <ul> <li>Description: Brief description of the project and its purpose</li> <li>URL: Project homepage, repository, or documentation URL</li> <li>Creator: Name and contact information of the project maintainer</li> <li>License: Data usage license (e.g., MIT, CC-BY, etc.)</li> <li>Citation: How to cite the project or dataset</li> </ul> <p>This metadata is stored in <code>.biotope/config/biotope.yaml</code> and automatically loaded when using <code>biotope annotate interactive</code>.</p>"},{"location":"api-docs/init/#conditional-output-format-selection","title":"Conditional Output Format Selection","text":"<p>The output format selection is only presented if you choose to install a knowledge graph, as it's only relevant for knowledge graph functionality.</p>"},{"location":"api-docs/init/#usage","title":"Usage","text":"<pre><code>biotope init [OPTIONS]\n</code></pre>"},{"location":"api-docs/init/#options","title":"Options","text":"<ul> <li><code>--dir, -d</code>: Directory to initialize biotope project in (default: current directory)</li> </ul>"},{"location":"api-docs/init/#example","title":"Example","text":"<pre><code># Initialize in current directory\nbiotope init\n\n# Initialize in specific directory\nbiotope init --dir /path/to/project\n</code></pre>"},{"location":"api-docs/init/#configuration-file-structure","title":"Configuration File Structure","text":"<p>The initialization creates a <code>.biotope/config/biotope.yaml</code> file with the following structure:</p> <pre><code>version: \"1.0\"\ncroissant_schema_version: \"1.0\"\ndefault_metadata_template: \"scientific\"\ndata_storage:\n  type: \"local\"\n  path: \"data\"\nchecksum_algorithm: \"sha256\"\nauto_stage: true\ncommit_message_template: \"Update metadata: {description}\"\n\n# Project information (consolidated from internal metadata)\nproject_info:\n  name: \"my-project\"\n  created_at: \"2024-01-01T00:00:00Z\"\n  biotope_version: \"0.1.0\"\n  last_modified: \"2024-01-01T00:00:00Z\"\n  builds: []\n  knowledge_sources: []\n\n# Project-level metadata for annotation pre-fill\nproject_metadata:\n  description: \"Project description\"\n  url: \"https://example.com/project\"\n  creator:\n    name: \"John Doe\"\n    email: \"john@example.com\"\n  license: \"MIT\"\n  citation: \"Doe, J. (2024). Project Title. Journal Name.\"\n\n# Validation configuration\nannotation_validation:\n  enabled: true\n  minimum_required_fields:\n    - \"name\"\n    - \"description\"\n    - \"creator\"\n    - \"dateCreated\"\n    - \"distribution\"\n  field_validation:\n    name:\n      type: \"string\"\n      min_length: 1\n    description:\n      type: \"string\"\n      min_length: 10\n    creator:\n      type: \"object\"\n      required_keys: [\"name\"]\n    dateCreated:\n      type: \"string\"\n      format: \"date\"\n    distribution:\n      type: \"array\"\n      min_length: 1\n</code></pre>"},{"location":"api-docs/init/#directory-structure","title":"Directory Structure","text":"<p>The init command creates the following directory structure:</p> <pre><code>project-root/\n\u251c\u2500\u2500 .biotope/\n\u2502   \u251c\u2500\u2500 config/\n\u2502   \u2502   \u2514\u2500\u2500 biotope.yaml          # Consolidated configuration (Git-like)\n\u2502   \u251c\u2500\u2500 datasets/                 # Croissant ML metadata files\n\u2502   \u251c\u2500\u2500 workflows/                # Bioinformatics workflow definitions\n\u2502   \u2514\u2500\u2500 logs/                     # Command execution logs\n\u251c\u2500\u2500 config/\n\u2502   \u2514\u2500\u2500 biotope.yaml              # User-facing configuration\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 raw/\n\u2502   \u2514\u2500\u2500 processed/\n\u251c\u2500\u2500 schemas/\n\u2514\u2500\u2500 outputs/\n</code></pre> <p>Note: The configuration follows a Git-like approach where <code>.biotope/config/biotope.yaml</code> contains all biotope-specific configuration, similar to how Git uses <code>.git/config</code> for its configuration.</p>"},{"location":"api-docs/init/#managing-project-metadata","title":"Managing Project Metadata","text":"<p>After initialization, you can manage project metadata using the <code>biotope config</code> command:</p> <pre><code># Set project metadata\nbiotope config set-project-metadata\n\n# Show current project metadata\nbiotope config show-project-metadata\n</code></pre> <p>Initialize command implementation.</p>"},{"location":"api-docs/init/#biotope.commands.init.create_project_structure","title":"<code>create_project_structure(directory, config, metadata, project_metadata=None)</code>","text":"<p>Create the project directory structure and configuration files.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>Path</code> <p>Project directory path</p> required <code>config</code> <code>dict</code> <p>User-facing configuration dictionary</p> required <code>metadata</code> <code>dict</code> <p>Internal metadata dictionary (now consolidated into biotope config)</p> required <code>project_metadata</code> <code>dict</code> <p>Project-level metadata for pre-filling annotations</p> <code>None</code> Source code in <code>biotope/commands/init.py</code> <pre><code>def create_project_structure(directory: Path, config: dict, metadata: dict, project_metadata: dict = None) -&gt; None:\n    \"\"\"\n    Create the project directory structure and configuration files.\n\n    Args:\n        directory: Project directory path\n        config: User-facing configuration dictionary\n        metadata: Internal metadata dictionary (now consolidated into biotope config)\n        project_metadata: Project-level metadata for pre-filling annotations\n\n    \"\"\"\n    # Create directory structure - git-on-top layout\n    dirs = [\n        \".biotope\",\n        \".biotope/config\",  # Configuration for biotope project\n        \".biotope/datasets\",  # Stores Croissant ML JSON-LD files\n        \".biotope/workflows\",  # Bioinformatics workflow definitions\n        \".biotope/logs\",  # Command execution logs\n        \"config\",\n        \"data\",\n        \"data/raw\",\n        \"data/processed\",\n        \"schemas\",\n        \"outputs\",\n    ]\n\n    for d in dirs:\n        (directory / d).mkdir(parents=True, exist_ok=True)\n\n    # Create user-facing config file\n    (directory / \"config\" / \"biotope.yaml\").write_text(\n        yaml.dump(config, default_flow_style=False),\n    )\n\n    # Create consolidated biotope config (Git-like approach)\n    biotope_config = {\n        \"version\": \"1.0\",\n        \"croissant_schema_version\": \"1.0\",\n        \"default_metadata_template\": \"scientific\",\n        \"data_storage\": {\n            \"type\": \"local\",\n            \"path\": \"data\"\n        },\n        \"checksum_algorithm\": \"sha256\",\n        \"auto_stage\": True,\n        \"commit_message_template\": \"Update metadata: {description}\",\n        \"annotation_validation\": {\n            \"enabled\": True,\n            \"minimum_required_fields\": [\n                \"name\",\n                \"description\", \n                \"creator\",\n                \"dateCreated\",\n                \"distribution\"\n            ],\n            \"field_validation\": {\n                \"name\": {\"type\": \"string\", \"min_length\": 1},\n                \"description\": {\"type\": \"string\", \"min_length\": 10},\n                \"creator\": {\"type\": \"object\", \"required_keys\": [\"name\"]},\n                \"dateCreated\": {\"type\": \"string\", \"format\": \"date\"},\n                \"distribution\": {\"type\": \"array\", \"min_length\": 1}\n            }\n        },\n        # Consolidate internal metadata into config (Git-like approach)\n        \"project_info\": {\n            \"name\": metadata.get(\"project_name\"),\n            \"created_at\": metadata.get(\"created_at\"),\n            \"biotope_version\": metadata.get(\"biotope_version\"),\n            \"last_modified\": metadata.get(\"last_modified\"),\n            \"builds\": metadata.get(\"builds\", []),\n            \"knowledge_sources\": metadata.get(\"knowledge_sources\", [])\n        }\n    }\n\n    # Add project metadata if provided\n    if project_metadata:\n        biotope_config[\"project_metadata\"] = project_metadata\n\n    (directory / \".biotope\" / \"config\" / \"biotope.yaml\").write_text(\n        yaml.dump(biotope_config, default_flow_style=False),\n    )\n\n    # Note: No custom refs needed - Git handles all version control\n\n    # Create README\n    readme_content = f\"\"\"# {config[\"project\"][\"name\"]}\n\nA BioCypher knowledge graph project managed with biotope.\n\n## Project Structure\n\n- `config/`: User configuration files\n- `data/`: Data files\n  - `raw/`: Raw input data\n  - `processed/`: Processed data\n- `schemas/`: Knowledge schema definitions\n- `outputs/`: Generated knowledge graphs\n- `.biotope/`: Biotope project management (Git-tracked)\n  - `datasets/`: Croissant ML metadata files\n  - `workflows/`: Bioinformatics workflow definitions\n  - `config/`: Biotope configuration (Git-like approach)\n  - `logs/`: Command execution history\n\n## Git Integration\n\nThis project uses Git for metadata version control. The `.biotope/` directory is tracked by Git, allowing you to:\n- Version control your metadata changes\n- Collaborate with others on metadata\n- Use standard Git tools and workflows\n\n## Getting Started\n\n1. Add data files: `biotope add &lt;data_file&gt;`\n2. Create metadata: `biotope annotate interactive --staged`\n3. Check status: `biotope status`\n4. Commit changes: `biotope commit -m \"Add new dataset\"`\n5. View history: `biotope log`\n6. Push/pull: `biotope push` / `biotope pull`\n\n## Standard Git Commands\n\nYou can also use standard Git commands:\n- `git status` - See all project changes\n- `git log -- .biotope/` - View metadata history\n- `git diff .biotope/` - See metadata changes\n\"\"\"\n    (directory / \"README.md\").write_text(readme_content)\n</code></pre>"},{"location":"api-docs/init/#biotope.commands.init.init","title":"<code>init(dir)</code>","text":"<p>Initialize a new biotope with interactive configuration in the specified directory.</p> Source code in <code>biotope/commands/init.py</code> <pre><code>@click.command()\n@click.option(\n    \"--dir\",\n    \"-d\",\n    type=click.Path(file_okay=False, path_type=Path),\n    default=\".\",\n    help=\"Directory to initialize biotope project in\",\n)\ndef init(dir: Path) -&gt; None:  # noqa: A002\n    \"\"\"\n    Initialize a new biotope with interactive configuration in the specified directory.\n    \"\"\"\n    # Check if .biotope directory already exists\n    biotope_dir = dir / \".biotope\"\n    if biotope_dir.exists():\n        click.echo(\"\u274c A biotope project already exists in this directory.\")\n        click.echo(\"To start fresh, remove the .biotope directory first.\")\n        raise click.Abort\n\n    click.echo(\"Establishing biotope! Let's set up your project.\\n\")\n\n    # Project name\n    project_name = click.prompt(\n        \"What's your project name?\",\n        type=str,\n        default=dir.absolute().name,\n    )\n\n    # Knowledge sources\n    knowledge_sources = []\n    use_knowledge_graph = click.confirm(\"Would you like to install a knowledge graph now?\", default=False)\n    if use_knowledge_graph:\n        while True:\n            source = click.prompt(\n                \"\\nEnter knowledge source or press enter to finish.\",\n                type=str,\n                default=\"\",\n                show_default=False,\n            )\n            if not source:\n                break\n            source_type = click.prompt(\n                \"What type of source is this?\",\n                type=click.Choice([\"database\", \"file\", \"api\"], case_sensitive=False),\n                default=\"database\",\n            )\n            knowledge_sources.append({\"name\": source, \"type\": source_type})\n\n    # Output preferences - only ask if knowledge graph is being used\n    output_format = \"neo4j\"  # Default\n    if use_knowledge_graph:\n        output_format = click.prompt(\n            \"\\nPreferred output format\",\n            type=click.Choice([\"neo4j\", \"csv\", \"json\"], case_sensitive=False),\n            default=\"neo4j\",\n        )\n\n    # LLM integration\n    use_llm = click.confirm(\"\\nWould you like to set up LLM integration?\", default=False)\n    if use_llm:\n        llm_provider = click.prompt(\n            \"Which LLM provider would you like to use?\",\n            type=click.Choice([\"google\", \"openai\", \"anthropic\", \"local\"], case_sensitive=False),\n            default=\"openai\",\n        )\n\n        if llm_provider in [\"google\", \"openai\", \"anthropic\"]:\n            api_key = click.prompt(\n                f\"Please enter your {llm_provider} API key\",\n                type=str,\n                hide_input=True,\n            )\n\n    # Project-level metadata collection for pre-filling annotations\n    click.echo(\"\\n[bold blue]Project Metadata Setup[/]\")\n    click.echo(\"The following information will be used to pre-fill metadata forms when creating dataset annotations.\")\n    click.echo(\"You can skip any fields and provide them later during annotation.\")\n\n    collect_project_metadata = click.confirm(\n        \"\\nWould you like to set up project-level metadata now? This will be used to pre-fill metadata later.\",\n        default=True,\n    )\n\n    project_metadata = {}\n    if collect_project_metadata:\n        click.echo(\"\\n[bold green]Project Information[/]\")\n        click.echo(\"\u2500\" * 50)\n\n        # Project description\n        project_description = click.prompt(\n            \"Project description (what is this project about?)\",\n            default=\"\",\n            show_default=False,\n        )\n        if project_description:\n            project_metadata[\"description\"] = project_description\n\n        # Project URL\n        project_url = click.prompt(\n            \"Project URL (if available)\",\n            default=\"\",\n            show_default=False,\n        )\n        if project_url:\n            project_metadata[\"url\"] = project_url\n\n        # Creator/Contact\n        creator = click.prompt(\n            \"Primary contact person (email preferred)\",\n            default=\"\",\n            show_default=False,\n        )\n        if creator:\n            project_metadata[\"creator\"] = creator\n\n        # License\n        license_url = click.prompt(\n            \"Default license URL\",\n            default=\"https://creativecommons.org/licenses/by/4.0/\",\n            show_default=True,\n        )\n        if license_url:\n            project_metadata[\"license\"] = license_url\n\n        # Citation template\n        citation_template = click.prompt(\n            \"Citation template (use {name} and {year} as placeholders)\",\n            default=\"Please cite this dataset as: {name} ({year})\",\n            show_default=True,\n        )\n        if citation_template:\n            project_metadata[\"citation\"] = citation_template\n\n        # Access restrictions\n        has_access_restrictions = click.confirm(\n            \"Does this project have default access restrictions?\",\n            default=False,\n        )\n        if has_access_restrictions:\n            access_restrictions = click.prompt(\n                \"Default access restrictions description\",\n                default=\"\",\n                show_default=False,\n            )\n            if access_restrictions:\n                project_metadata[\"access_restrictions\"] = access_restrictions\n\n        # Legal obligations\n        has_legal_obligations = click.confirm(\n            \"Does this project have default legal obligations?\",\n            default=False,\n        )\n        if has_legal_obligations:\n            legal_obligations = click.prompt(\n                \"Default legal obligations description\",\n                default=\"\",\n                show_default=False,\n            )\n            if legal_obligations:\n                project_metadata[\"legal_obligations\"] = legal_obligations\n\n        # Collaboration partner\n        has_collaboration_partner = click.confirm(\n            \"Does this project have a collaboration partner?\",\n            default=False,\n        )\n        if has_collaboration_partner:\n            collaboration_partner = click.prompt(\n                \"Collaboration partner and institute\",\n                default=\"\",\n                show_default=False,\n            )\n            if collaboration_partner:\n                project_metadata[\"collaboration_partner\"] = collaboration_partner\n\n        # Store project name for consistency\n        project_metadata[\"project_name\"] = project_name\n\n    # Create user configuration\n    user_config = {\n        \"project\": {\n            \"name\": project_name,\n            \"output_format\": output_format,\n        },\n        \"knowledge_sources\": knowledge_sources,\n    }\n\n    if use_llm:\n        user_config[\"llm\"] = {\n            \"provider\": llm_provider,\n            \"api_key\": api_key if llm_provider in [\"openai\", \"anthropic\"] else None,\n        }\n\n    # Create internal metadata\n    metadata = {\n        \"project_name\": project_name,\n        \"created_at\": datetime.now(timezone.utc).isoformat(),\n        \"biotope_version\": click.get_current_context().obj.get(\"version\", \"unknown\"),\n        \"last_modified\": datetime.now(timezone.utc).isoformat(),\n        \"builds\": [],\n        \"knowledge_sources\": knowledge_sources,\n    }\n\n    # Create project structure\n    try:\n        dir.mkdir(parents=True, exist_ok=True)\n        create_project_structure(dir, user_config, metadata, project_metadata)\n\n        # Initialize Git if not already initialized\n        if not is_git_repo(dir):\n            if click.confirm(\"\\nWould you like to initialize Git for version control?\", default=True):\n                _init_git_repo(dir)\n                click.echo(\"\u2705 Git repository initialized\")\n\n        click.echo(\"\\n\u2728 Biotope established successfully! \u2728\")\n        click.echo(\n            f\"\\nYour biotope '{project_name}' has been established. Make sure to water regularly.\",\n        )\n        click.echo(\"\\nNext steps:\")\n        click.echo(\"1. Review the configuration in config/biotope.yaml\")\n        if use_knowledge_graph:\n            click.echo(\"2. Add your knowledge sources\")\n        click.echo(\"3. Run 'biotope add &lt;file&gt;' to stage data files\")\n        click.echo(\"4. Run 'biotope annotate interactive --staged' to create metadata\")\n        click.echo(\"5. Run 'biotope commit -m \\\"message\\\"' to save changes\")\n\n        if collect_project_metadata and project_metadata:\n            click.echo(\"\\n\ud83d\udca1 Project metadata has been saved and will be used to pre-fill annotation forms.\")\n            click.echo(\"   You can update it later with 'biotope config set-project-metadata'\")\n    except (OSError, yaml.YAMLError) as e:\n        click.echo(f\"\\n\u274c Error initializing project: {e!s}\", err=True)\n        raise click.Abort from e\n</code></pre>"},{"location":"api-docs/read/","title":"Biotope Read","text":"<p>Draft stage</p> <p>Biotope is in draft stage. Functionality may be missing or incomplete. The API is subject to change.</p> <p>Read command implementation.</p>"},{"location":"api-docs/read/#biotope.commands.read.extract_knowledge","title":"<code>extract_knowledge(text)</code>","text":"<p>Extract knowledge using NLP and other methods.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Input text to process</p> required <p>Returns:</p> Type Description <code>str</code> <p>Extracted knowledge (currently just returns input)</p> Source code in <code>biotope/commands/read.py</code> <pre><code>def extract_knowledge(text: str) -&gt; str:\n    \"\"\"\n    Extract knowledge using NLP and other methods.\n\n    Args:\n        text: Input text to process\n\n    Returns:\n        Extracted knowledge (currently just returns input)\n\n    \"\"\"\n    return f\"Extracted knowledge: {text}\"\n</code></pre>"},{"location":"api-docs/read/#biotope.commands.read.read","title":"<code>read(text, file)</code>","text":"<p>Extract knowledge from input text or file using NLP.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str | None</code> <p>Input text to process</p> required <code>file</code> <code>str | None</code> <p>Input file to process</p> required <p>Raises:</p> Type Description <code>UsageError</code> <p>If neither --text nor --file is provided.</p> Source code in <code>biotope/commands/read.py</code> <pre><code>@click.command()\n@click.option(\n    \"--text\",\n    \"-t\",\n    type=str,\n    help=\"Text to extract knowledge from\",\n    required=False,\n)\n@click.option(\n    \"--file\",\n    \"-f\",\n    type=click.Path(exists=True, dir_okay=False, path_type=str),\n    help=\"File to extract knowledge from\",\n    required=False,\n)\ndef read(text: str | None, file: str | None) -&gt; None:\n    \"\"\"\n    Extract knowledge from input text or file using NLP.\n\n    Args:\n        text: Input text to process\n        file: Input file to process\n\n    Raises:\n        click.UsageError: If neither --text nor --file is provided.\n\n    \"\"\"\n    if text is None and file is None:\n        msg = \"Either --text or --file must be provided\"\n        raise click.UsageError(msg)\n\n    if file is not None:\n        with open(file) as f:\n            text = f.read()\n\n    if text is not None:  # This will now be true in both cases\n        result = extract_knowledge(text)\n        click.echo(result)\n</code></pre>"},{"location":"api-docs/view/","title":"Biotope View","text":"<p>Draft stage</p> <p>Biotope is in draft stage. Functionality may be missing or incomplete. The API is subject to change.</p> <p>View command implementation.</p>"},{"location":"api-docs/view/#biotope.commands.view.view_graph","title":"<code>view_graph()</code>","text":"<p>View and analyze knowledge graphs.</p> Source code in <code>biotope/commands/view.py</code> <pre><code>def view_graph() -&gt; None:\n    \"\"\"View and analyze knowledge graphs.\"\"\"\n</code></pre>"},{"location":"examples/","title":"Biotope Examples","text":"<p>This directory contains examples and utilities for extending biotope functionality.</p>"},{"location":"examples/#remote-validation-server","title":"Remote Validation Server","text":"<p>The <code>remote-validation-server.py</code> script demonstrates how to set up a remote validation server for cluster-wide metadata policies.</p>"},{"location":"examples/#features","title":"Features","text":"<ul> <li>Multiple Validation Policies: Serve different validation requirements for different use cases</li> <li>RESTful API: Simple HTTP endpoints for validation configuration</li> <li>Caching Support: Built-in caching for performance</li> <li>Error Handling: Graceful fallbacks and error reporting</li> </ul>"},{"location":"examples/#usage","title":"Usage","text":"<pre><code># Start the server\npython remote-validation-server.py\n\n# Configure biotope to use remote validation\nbiotope config set-remote-validation --url http://localhost:5000/validation/cluster-strict\n</code></pre>"},{"location":"examples/#api-endpoints","title":"API Endpoints","text":"<ul> <li><code>GET /validation/cluster-strict</code> - Strict cluster validation requirements</li> <li><code>GET /validation/storage-management</code> - Storage management requirements  </li> <li><code>GET /validation/academic</code> - Academic research requirements</li> <li><code>GET /validation/</code> - List all available policies</li> </ul>"},{"location":"examples/#cluster-compliance-checking","title":"Cluster Compliance Checking","text":"<p>The cluster compliance checker helps administrators verify that biotope projects are using appropriate validation patterns.</p>"},{"location":"examples/#features_1","title":"Features","text":"<ul> <li>Project Scanning: Automatically find all biotope projects in a directory</li> <li>Compliance Checking: Verify projects meet cluster requirements</li> <li>Detailed Reporting: Generate comprehensive compliance reports</li> <li>Custom Requirements: Define cluster-specific compliance rules</li> </ul>"},{"location":"examples/#usage_1","title":"Usage","text":"<pre><code># Check all projects in a directory\npython cluster-compliance-checker.py --scan-dir /cluster/projects\n\n# Check specific project\npython cluster-compliance-checker.py --project /path/to/project\n\n# Generate compliance report\npython cluster-compliance-checker.py --scan-dir /cluster/projects --report compliance_report.txt\n\n# Use custom requirements\npython cluster-compliance-checker.py --scan-dir /cluster/projects --requirements cluster-requirements.json\n</code></pre>"},{"location":"examples/#example-output","title":"Example Output","text":"<pre><code>================================================================================\nBIOTOPE CLUSTER COMPLIANCE REPORT\n================================================================================\n\nSUMMARY:\n  Total projects: 25\n  Compliant projects: 18\n  Using default pattern: 5\n  Errors: 2\n  Compliance rate: 72.0%\n\nDETAILED REPORT:\n--------------------------------------------------------------------------------\n\nProject: /cluster/projects/user1/experiment\n  Pattern: cluster-strict\n  Status: cluster_compliant\n  Remote validation: https://cluster.example.com/validation/cluster-strict\n  Required fields: name, description, creator, dateCreated, distribution, license, project_id\n  \u2705 COMPLIANT\n\nProject: /cluster/projects/user2/data\n  Pattern: default\n  Status: default_pattern\n  Required fields: name, description, creator, dateCreated, distribution\n  \u274c NON-COMPLIANT\n    - Wrong validation pattern: default (required: cluster-strict)\n    - Missing required fields: license, project_id\n    - Remote validation not configured\n\n================================================================================\nRECOMMENDATIONS:\n- 5 projects are using default validation pattern\n  Consider configuring cluster-specific validation for these projects\n- 2 projects have configuration errors\n  Review these projects and fix configuration issues\n- 7 projects are non-compliant\n  Contact project owners to update validation configuration\n</code></pre>"},{"location":"examples/#configuration","title":"Configuration","text":"<p>Create a <code>cluster-requirements.json</code> file to define your cluster's requirements:</p> <pre><code>{\n  \"cluster_name\": \"Example HPC Cluster\",\n  \"required_pattern\": \"cluster-strict\",\n  \"required_fields\": [\n    \"name\", \"description\", \"creator\", \"dateCreated\", \n    \"distribution\", \"license\", \"project_id\"\n  ],\n  \"require_remote_validation\": true\n}\n</code></pre>"},{"location":"examples/#validation-patterns","title":"Validation Patterns","text":"<p>Biotope supports different validation patterns for different use cases:</p>"},{"location":"examples/#default-pattern","title":"Default Pattern","text":"<ul> <li>Basic validation requirements</li> <li>Suitable for local development and simple projects</li> <li>No remote validation required</li> </ul>"},{"location":"examples/#cluster-strict-pattern","title":"Cluster-Strict Pattern","text":"<ul> <li>Enhanced validation for cluster environments</li> <li>Requires remote validation configuration</li> <li>Additional required fields for compliance</li> </ul>"},{"location":"examples/#storage-management-pattern","title":"Storage-Management Pattern","text":"<ul> <li>Validation for long-term storage systems</li> <li>Requires retention policies and backup information</li> <li>Enhanced metadata for archival purposes</li> </ul>"},{"location":"examples/#setting-validation-patterns","title":"Setting Validation Patterns","text":"<pre><code># Set validation pattern for a project\nbiotope config set-validation-pattern --pattern cluster-strict\n\n# Show current validation pattern\nbiotope config show-validation-pattern\n\n# Show detailed validation information\nbiotope config show-validation\n</code></pre>"},{"location":"examples/#integration-with-cluster-management","title":"Integration with Cluster Management","text":""},{"location":"examples/#automated-compliance-checking","title":"Automated Compliance Checking","text":"<p>Set up automated compliance checking in your cluster environment:</p> <pre><code>#!/bin/bash\n# /etc/cron.daily/biotope-compliance-check\n\n# Check all user projects\npython /opt/biotope/examples/cluster-compliance-checker.py \\\n  --scan-dir /cluster/projects \\\n  --requirements /etc/biotope/cluster-requirements.json \\\n  --report /var/log/biotope/compliance-$(date +%Y%m%d).txt\n\n# Send report to administrators\nmail -s \"Biotope Compliance Report $(date +%Y-%m-%d)\" \\\n  admin@cluster.example.com &lt; /var/log/biotope/compliance-$(date +%Y%m%d).txt\n</code></pre>"},{"location":"examples/#user-onboarding","title":"User Onboarding","text":"<p>Provide users with setup instructions:</p> <pre><code># 1. Initialize biotope project\nbiotope init\n\n# 2. Set cluster validation pattern\nbiotope config set-validation-pattern --pattern cluster-strict\n\n# 3. Configure remote validation\nbiotope config set-remote-validation --url https://cluster.example.com/validation/cluster-strict\n\n# 4. Verify configuration\nbiotope config show-validation-pattern\n</code></pre>"},{"location":"examples/#monitoring-and-alerts","title":"Monitoring and Alerts","text":"<p>Monitor compliance rates and alert administrators when compliance drops:</p> <pre><code># compliance_monitor.py\nimport json\nimport subprocess\nfrom pathlib import Path\n\ndef check_compliance_rate():\n    result = subprocess.run([\n        \"python\", \"cluster-compliance-checker.py\",\n        \"--scan-dir\", \"/cluster/projects\",\n        \"--json\"\n    ], capture_output=True, text=True)\n\n    projects = json.loads(result.stdout)\n    compliant = sum(1 for p in projects if p.get(\"compliance_status\") in [\"cluster_compliant\", \"storage_compliant\"])\n    rate = compliant / len(projects) if projects else 0\n\n    if rate &lt; 0.8:  # Alert if compliance drops below 80%\n        send_alert(f\"Biotope compliance rate: {rate:.1%}\")\n\n    return rate\n</code></pre>"},{"location":"examples/#best-practices","title":"Best Practices","text":""},{"location":"examples/#for-cluster-administrators","title":"For Cluster Administrators","text":"<ol> <li>Define Clear Requirements: Create comprehensive requirements files</li> <li>Automate Checking: Set up regular compliance monitoring</li> <li>Provide Documentation: Give users clear setup instructions</li> <li>Monitor Trends: Track compliance rates over time</li> <li>Support Users: Help users configure their projects correctly</li> </ol>"},{"location":"examples/#for-users","title":"For Users","text":"<ol> <li>Set Validation Pattern: Configure appropriate pattern for your use case</li> <li>Use Remote Validation: Connect to cluster validation services</li> <li>Complete Metadata: Ensure all required fields are properly filled</li> <li>Regular Checks: Use <code>biotope config show-validation-pattern</code> to verify setup</li> <li>Seek Help: Contact administrators if you need assistance</li> </ol>"},{"location":"examples/#for-developers","title":"For Developers","text":"<ol> <li>Extend Patterns: Add new validation patterns for specific use cases</li> <li>Custom Requirements: Create requirements files for different environments</li> <li>Integration: Integrate compliance checking into existing workflows</li> <li>Documentation: Document new patterns and requirements</li> <li>Testing: Test compliance checking with various project configurations </li> </ol>"},{"location":"learn/tutorials/","title":"Biotope Tutorials","text":"<p>Welcome to the Biotope tutorials! This guide will help you understand how to work with Biotope for metadata annotation.</p>"},{"location":"learn/tutorials/#workflow-overview","title":"Workflow Overview","text":"<p>Biotope supports multiple workflows for managing your data and metadata:</p>"},{"location":"learn/tutorials/#git-integrated-workflow-recommended","title":"Git-Integrated Workflow (Recommended)","text":"<pre><code>graph LR\n    subgraph \"biotope init workflow\"\n        direction TB\n        A[Start] --&gt; B[Initialize Project]\n        B --&gt; C[Set Project Metadata]\n        C --&gt; D[Configure Validation]\n    end\n\n    subgraph \"biotope add/get workflow\"\n        direction TB\n        E[Add or Download Files] --&gt; F[Calculate SHA256 Hash]\n        F --&gt; G[Create Basic Metadata]\n        G --&gt; H[Stage in Git]\n\n        subgraph \"Enhanced Metadata\"\n            direction TB\n            H --&gt; I[Interactive Annotation]\n            I --&gt; J[Pre-filled with Project Metadata]\n            J --&gt; K[Complete Metadata]\n        end\n\n        K --&gt; L[Commit Changes]\n        L --&gt; M[Share with Team]\n    end</code></pre>"},{"location":"learn/tutorials/#workflow-description","title":"Workflow Description","text":"<p>The enhanced biotope workflow now includes project-level metadata management:</p> <ol> <li>Initialize Project: Use <code>biotope init</code> to set up your project with optional project metadata</li> <li>Set Project Metadata: Configure project-level metadata (description, URL, creator, license, citation) for annotation pre-filling</li> <li>Add or Download Files: Add local files with <code>biotope add</code> or download remote files with <code>biotope get</code></li> <li>Calculate SHA256 Hash: Generate checksums for data integrity</li> <li>Create Basic Metadata: Automatically generate initial Croissant ML metadata</li> <li>Stage in Git: Prepare metadata changes for version control</li> <li>Enhanced Metadata: Use <code>biotope annotate</code> to add detailed metadata with project metadata pre-fill</li> <li>Commit Changes: Save metadata changes with Git</li> <li>Share with Team: Use standard Git workflows for collaboration</li> </ol>"},{"location":"learn/tutorials/#getting-started","title":"Getting Started","text":""},{"location":"learn/tutorials/#for-local-files-recommended","title":"For Local Files (Recommended)","text":"<p>To get started with local files, use the Git-integrated workflow:</p> <pre><code># Initialize project with project metadata\nbiotope init\n\n# Add local data files\nbiotope add data/raw/experiment.csv\n\n# Annotate with project metadata pre-fill\nbiotope annotate interactive --staged\n\n# Commit changes\nbiotope commit -m \"Add experiment dataset\"\n</code></pre>"},{"location":"learn/tutorials/#for-downloaded-files","title":"For Downloaded Files","text":"<p>To get started with downloaded files, use the download workflow:</p> <pre><code># Initialize project (if not already done)\nbiotope init\n\n# Download and stage files\nbiotope get https://example.com/data/file.csv\n\n# Check status\nbiotope status\n\n# Annotate with project metadata pre-fill\nbiotope annotate interactive --staged\n\n# Commit changes\nbiotope commit -m \"Add downloaded dataset\"\n</code></pre>"},{"location":"learn/tutorials/#project-metadata-management","title":"Project Metadata Management","text":"<p>Set up project-level metadata for consistent annotation:</p> <pre><code># Set project metadata during init or later\nbiotope config set-project-metadata\n\n# View current project metadata\nbiotope config show-project-metadata\n\n# Use in annotation (automatically pre-filled)\nbiotope annotate interactive --staged\n</code></pre>"},{"location":"learn/tutorials/#tutorials","title":"Tutorials","text":"<p>For detailed information about each workflow, please refer to the specific tutorial pages:</p> <ul> <li>Adding Files: Learn how to add local files to your biotope project</li> <li>Downloading Files: Learn how to download and annotate files from URLs</li> <li>Annotating Data: Learn how to create detailed metadata for your data with project metadata pre-fill</li> </ul>"},{"location":"learn/tutorials/add-files/","title":"Adding Files to Your Biotope Project","text":"<p>The <code>biotope add</code> command is your first step in managing data files with biotope. It prepares your files for metadata creation and version control. This tutorial will show you how to use it effectively.</p>"},{"location":"learn/tutorials/add-files/#prerequisites","title":"Prerequisites","text":"<p>Before you start, make sure you have:</p> <ol> <li>A biotope project initialized: Run <code>biotope init</code> if you haven't already</li> <li>Git repository: Your project should be a Git repository (biotope init can set this up)</li> <li>Data files: Some files you want to track</li> </ol>"},{"location":"learn/tutorials/add-files/#basic-usage","title":"Basic Usage","text":""},{"location":"learn/tutorials/add-files/#adding-a-single-file","title":"Adding a Single File","text":"<p>The simplest way to add a file is to provide its path:</p> <pre><code>biotope add data/raw/experiment.csv\n</code></pre> <p>This will: - Calculate a SHA256 checksum for data integrity - Create a basic metadata file in <code>.biotope/datasets/</code> - Stage the metadata changes in Git - Show you what happened</p>"},{"location":"learn/tutorials/add-files/#adding-remote-files","title":"Adding Remote Files","text":"<p>If you want to add files from a URL, use <code>biotope get</code> instead:</p> <pre><code>biotope get https://example.com/data/experiment.csv\n</code></pre> <p>This downloads the file and stages it for metadata creation, just like <code>biotope add</code>. The workflow after downloading is the same: check status, annotate, and commit.</p>"},{"location":"learn/tutorials/add-files/#adding-multiple-files","title":"Adding Multiple Files","text":"<p>You can add several files at once:</p> <pre><code>biotope add data/raw/experiment1.csv data/raw/experiment2.csv data/raw/experiment3.csv\n</code></pre>"},{"location":"learn/tutorials/add-files/#adding-entire-directories","title":"Adding Entire Directories","text":"<p>To add all files in a directory, use the <code>--recursive</code> flag:</p> <pre><code>biotope add data/raw/ --recursive\n</code></pre> <p>This will add all files in <code>data/raw/</code> and any subdirectories.</p>"},{"location":"learn/tutorials/add-files/#understanding-the-output","title":"Understanding the Output","text":"<p>When you run <code>biotope add</code>, you'll see output like this:</p> <pre><code>\ud83d\udcc1 Added data/raw/experiment.csv (SHA256: e471e5fc...)\n\n\u2705 Added 1 file(s) to biotope project:\n  + data/raw/experiment.csv\n\n\ud83d\udca1 Next steps:\n  1. Run 'biotope status' to see staged files\n  2. Run 'biotope annotate interactive --staged' to create metadata\n  3. Run 'biotope commit -m \"message\"' to save changes\n\n\ud83d\udca1 For incomplete annotations:\n  1. Run 'biotope status' to see which files need annotation\n  2. Run 'biotope annotate interactive --incomplete' to complete them\n</code></pre> <p>This tells you: - Which files were successfully added - Their checksums for data integrity - What to do next in your workflow</p>"},{"location":"learn/tutorials/add-files/#working-with-different-path-types","title":"Working with Different Path Types","text":""},{"location":"learn/tutorials/add-files/#relative-paths-recommended","title":"Relative Paths (Recommended)","text":"<p>Relative paths are preferred for better portability:</p> <pre><code># From your project root\nbiotope add data/raw/experiment.csv\nbiotope add ./data/raw/experiment.csv\n\n# From a subdirectory\ncd data/raw/\nbiotope add experiment.csv\n</code></pre>"},{"location":"learn/tutorials/add-files/#absolute-paths","title":"Absolute Paths","text":"<p>You can also use absolute paths:</p> <pre><code>biotope add /Users/username/project/data/raw/experiment.csv\n</code></pre>"},{"location":"learn/tutorials/add-files/#paths-with-spaces","title":"Paths with Spaces","text":"<p>For files with spaces in their names, use quotes:</p> <pre><code>biotope add \"data/raw/my experiment data.csv\"\n</code></pre>"},{"location":"learn/tutorials/add-files/#handling-common-scenarios","title":"Handling Common Scenarios","text":""},{"location":"learn/tutorials/add-files/#adding-already-tracked-files","title":"Adding Already Tracked Files","text":"<p>If you try to add a file that's already tracked, you'll see:</p> <pre><code>\u26a0\ufe0f  File 'data/raw/experiment.csv' already tracked (use --force to override)\n</code></pre> <p>To force add it anyway (useful if the file has changed):</p> <pre><code>biotope add data/raw/experiment.csv --force\n</code></pre>"},{"location":"learn/tutorials/add-files/#adding-directories-without-recursive-flag","title":"Adding Directories Without Recursive Flag","text":"<p>If you try to add a directory without <code>--recursive</code>:</p> <pre><code>\u26a0\ufe0f  Skipping directory 'data/raw/' (use --recursive to add contents)\n</code></pre> <p>To add the directory contents:</p> <pre><code>biotope add data/raw/ --recursive\n</code></pre>"},{"location":"learn/tutorials/add-files/#mixed-results","title":"Mixed Results","text":"<p>When adding multiple files, some might succeed and others might fail:</p> <pre><code>\ud83d\udcc1 Added data/raw/experiment1.csv (SHA256: abc123...)\n\u26a0\ufe0f  File 'data/raw/experiment2.csv' already tracked (use --force to override)\n\n\u2705 Added 1 file(s) to biotope project:\n  + data/raw/experiment1.csv\n\n\u26a0\ufe0f  Skipped 1 file(s):\n  - data/raw/experiment2.csv\n</code></pre>"},{"location":"learn/tutorials/add-files/#organizing-your-data","title":"Organizing Your Data","text":""},{"location":"learn/tutorials/add-files/#recommended-directory-structure","title":"Recommended Directory Structure","text":"<pre><code>your-project/\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 raw/           # Original data files\n\u2502   \u2502   \u251c\u2500\u2500 experiment1/\n\u2502   \u2502   \u2514\u2500\u2500 experiment2/\n\u2502   \u2514\u2500\u2500 processed/     # Processed data files\n\u251c\u2500\u2500 .biotope/          # Metadata (auto-created)\n\u2514\u2500\u2500 .git/              # Git repository\n</code></pre>"},{"location":"learn/tutorials/add-files/#adding-different-data-types","title":"Adding Different Data Types","text":"<pre><code># Add raw data\nbiotope add data/raw/ --recursive\n\n# Add processed data\nbiotope add data/processed/ --recursive\n\n# Add specific file types\nbiotope add data/raw/*.csv\nbiotope add data/raw/*.fasta\n</code></pre>"},{"location":"learn/tutorials/add-files/#integration-with-other-commands","title":"Integration with Other Commands","text":""},{"location":"learn/tutorials/add-files/#check-what-was-added","title":"Check What Was Added","text":"<p>After adding files, check their status:</p> <pre><code>biotope status\n</code></pre> <p>This shows you what metadata files are staged for commit.</p>"},{"location":"learn/tutorials/add-files/#create-detailed-metadata","title":"Create Detailed Metadata","text":"<p>The basic metadata created by <code>add</code> is minimal. Enhance it:</p> <pre><code>biotope annotate interactive --staged\n</code></pre> <p>This opens an interactive session to add detailed metadata.</p>"},{"location":"learn/tutorials/add-files/#commit-your-changes","title":"Commit Your Changes","text":"<p>Once you're satisfied with the metadata:</p> <pre><code>biotope commit -m \"Add experiment dataset with 24 samples\"\n</code></pre>"},{"location":"learn/tutorials/add-files/#verify-data-integrity","title":"Verify Data Integrity","text":"<p>Later, you can verify your files haven't been corrupted:</p> <pre><code>biotope check-data\n</code></pre>"},{"location":"learn/tutorials/add-files/#best-practices","title":"Best Practices","text":""},{"location":"learn/tutorials/add-files/#1-use-relative-paths","title":"1. Use Relative Paths","text":"<p>Relative paths make your project more portable:</p> <pre><code># Good\nbiotope add data/raw/experiment.csv\n\n# Avoid\nbiotope add /absolute/path/to/experiment.csv\n</code></pre>"},{"location":"learn/tutorials/add-files/#2-organize-your-data","title":"2. Organize Your Data","text":"<p>Keep your data organized in logical directories:</p> <pre><code>data/\n\u251c\u2500\u2500 raw/\n\u2502   \u251c\u2500\u2500 experiment_2024_01/\n\u2502   \u2514\u2500\u2500 experiment_2024_02/\n\u2514\u2500\u2500 processed/\n    \u2514\u2500\u2500 combined_results/\n</code></pre>"},{"location":"learn/tutorials/add-files/#3-add-files-incrementally","title":"3. Add Files Incrementally","text":"<p>Add files as you work with them rather than all at once:</p> <pre><code># Add files as you create them\nbiotope add data/raw/new_experiment.csv\nbiotope annotate interactive --staged\nbiotope commit -m \"Add new experiment data\"\n</code></pre>"},{"location":"learn/tutorials/add-files/#4-use-descriptive-commit-messages","title":"4. Use Descriptive Commit Messages","text":"<p>When you commit after adding files:</p> <pre><code># Good\nbiotope commit -m \"Add RNA-seq dataset: 24 samples, 3 conditions\"\n\n# Better\nbiotope commit -m \"Add RNA-seq dataset: 24 samples, 3 conditions, QC passed, ready for analysis\"\n</code></pre>"},{"location":"learn/tutorials/add-files/#troubleshooting","title":"Troubleshooting","text":""},{"location":"learn/tutorials/add-files/#not-in-a-biotope-project","title":"\"Not in a biotope project\"","text":"<pre><code>\u274c Not in a biotope project. Run 'biotope init' first.\n</code></pre> <p>Solution: Run <code>biotope init</code> to initialize a biotope project.</p>"},{"location":"learn/tutorials/add-files/#not-in-a-git-repository","title":"\"Not in a Git repository\"","text":"<pre><code>\u274c Not in a Git repository. Initialize Git first with 'git init'.\n</code></pre> <p>Solution: Initialize Git in your project directory:</p> <pre><code>git init\ngit config user.name \"Your Name\"\ngit config user.email \"your.email@example.com\"\n</code></pre>"},{"location":"learn/tutorials/add-files/#file-already-tracked","title":"\"File already tracked\"","text":"<pre><code>\u26a0\ufe0f  File 'data/raw/experiment.csv' already tracked (use --force to override)\n</code></pre> <p>Solution: Use <code>--force</code> if you want to update the file's metadata:</p> <pre><code>biotope add data/raw/experiment.csv --force\n</code></pre>"},{"location":"learn/tutorials/add-files/#path-does-not-exist","title":"\"Path does not exist\"","text":"<pre><code>\u274c Path 'data/raw/experiment.csv' does not exist.\n</code></pre> <p>Solution: Check the file path and make sure the file exists.</p>"},{"location":"learn/tutorials/add-files/#related-commands","title":"Related Commands","text":"<ul> <li>Downloading Files: Learn how to download and stage files from URLs</li> <li>Annotating Data: Learn how to create detailed metadata for your data</li> <li>Project Status: Learn how to check your project status and manage metadata</li> </ul>"},{"location":"learn/tutorials/add-files/#getting-help","title":"Getting Help","text":"<p>For additional help, use:</p> <pre><code>biotope add --help\n</code></pre> <p>This will show all available options and usage examples. </p>"},{"location":"learn/tutorials/annotate-omics/","title":"Annotate Omics","text":"<p>The <code>biotope annotate</code> module provides tools for creating and managing metadata annotations using the Croissant ML schema. This document provides detailed examples and instructions for working with different layers of Croissant ML.</p>"},{"location":"learn/tutorials/annotate-omics/#installation","title":"Installation","text":"<pre><code>pip install biotope\n</code></pre>"},{"location":"learn/tutorials/annotate-omics/#basic-usage","title":"Basic Usage","text":"<p>The annotation module can be used in several ways:</p> <pre><code># Interactive mode with project metadata pre-fill\nbiotope annotate interactive\n\n# Interactive mode for staged files\nbiotope annotate interactive --staged\n\n# Interactive mode for incomplete tracked files\nbiotope annotate interactive --incomplete\n\n# Create metadata from CLI parameters\nbiotope annotate create\n\n# Validate existing metadata\nbiotope annotate validate --jsonld &lt;file_name.json&gt;\n\n# Load existing record\nbiotope annotate load\n</code></pre>"},{"location":"learn/tutorials/annotate-omics/#project-metadata-pre-fill","title":"Project Metadata Pre-fill","text":"<p>Biotope supports automatic pre-filling of annotation fields using project-level metadata. This feature makes the annotation process faster and ensures consistency across all datasets in your project.</p>"},{"location":"learn/tutorials/annotate-omics/#setting-up-project-metadata","title":"Setting Up Project Metadata","text":"<p>Project metadata can be set during initialization or later using the config command:</p> <pre><code># During initialization\nbiotope init\n\n# Or set project metadata later\nbiotope config set-project-metadata\n</code></pre>"},{"location":"learn/tutorials/annotate-omics/#pre-fill-fields","title":"Pre-fill Fields","text":"<p>The following fields are automatically pre-filled from project metadata:</p> <ul> <li>Description: Project description (if not already specified)</li> <li>URL: Project homepage or repository URL</li> <li>Creator: Project creator name and email</li> <li>License: Project license</li> <li>Citation: Project citation information</li> </ul>"},{"location":"learn/tutorials/annotate-omics/#pre-fill-priority","title":"Pre-fill Priority","text":"<p>When pre-filling metadata, the following priority order is used:</p> <ol> <li>Command-line prefill: Metadata provided via <code>--prefill-metadata</code></li> <li>Project metadata: Metadata from <code>.biotope/config/biotope.yaml</code></li> <li>Default values: Built-in defaults for required fields</li> </ol>"},{"location":"learn/tutorials/annotate-omics/#example-workflow","title":"Example Workflow","text":"<pre><code># 1. Set up project metadata\nbiotope config set-project-metadata\n# Enter: Project description, URL, creator, license, citation\n\n# 2. Add files to your project\nbiotope add data/raw/experiment.csv\n\n# 3. Annotate with pre-filled metadata\nbiotope annotate interactive --staged\n# Form will be pre-filled with project metadata\n</code></pre>"},{"location":"learn/tutorials/annotate-omics/#croissant-ml-layers","title":"Croissant ML Layers","text":"<p>Croissant ML organizes metadata in several layers, each serving a specific purpose in describing your dataset.</p>"},{"location":"learn/tutorials/annotate-omics/#1-dataset-layer","title":"1. Dataset Layer","text":"<p>The dataset layer provides high-level information about your entire dataset.</p> <p>Example: <pre><code>{\n  \"@type\": \"sc:Dataset\",\n  \"name\": \"Example Dataset\",\n  \"description\": \"A sample dataset for demonstration\",\n  \"license\": \"MIT\",\n  \"version\": \"1.0.0\",\n  \"datePublished\": \"2024-03-20\",\n  \"creator\": {\n    \"@type\": \"Person\",\n    \"name\": \"John Doe\"\n  }\n}\n</code></pre></p>"},{"location":"learn/tutorials/annotate-omics/#2-distribution-layer","title":"2. Distribution Layer","text":"<p>The distribution layer describes how the dataset is distributed and accessed.</p> <p>Example: <pre><code>{\n  \"@type\": \"sc:DataDownload\",\n  \"name\": \"Dataset Distribution\",\n  \"contentUrl\": \"https://example.com/dataset.zip\",\n  \"encodingFormat\": \"application/zip\",\n  \"contentSize\": \"1.2GB\",\n  \"sha256\": \"abc123...\"\n}\n</code></pre></p>"},{"location":"learn/tutorials/annotate-omics/#3-record-set-layer","title":"3. Record Set Layer","text":"<p>The record set layer defines the structure of your data records.</p> <p>Example: <pre><code>{\n  \"@type\": \"sc:RecordSet\",\n  \"name\": \"Main Records\",\n  \"description\": \"Primary data records\",\n  \"field\": [\n    {\n      \"@type\": \"sc:Field\",\n      \"name\": \"id\",\n      \"description\": \"Unique identifier\",\n      \"dataType\": \"string\"\n    },\n    {\n      \"@type\": \"sc:Field\",\n      \"name\": \"value\",\n      \"description\": \"Numerical value\",\n      \"dataType\": \"float\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"learn/tutorials/annotate-omics/#4-field-layer","title":"4. Field Layer","text":"<p>The field layer provides detailed information about individual data fields.</p> <p>Example: <pre><code>{\n  \"@type\": \"sc:Field\",\n  \"name\": \"temperature\",\n  \"description\": \"Temperature measurement in Celsius\",\n  \"dataType\": \"float\",\n  \"unit\": \"celsius\",\n  \"minimum\": -273.15,\n  \"maximum\": 100.0\n}\n</code></pre></p>"},{"location":"learn/tutorials/annotate-omics/#best-practices","title":"Best Practices","text":"<ol> <li>Set Project Metadata Early: Configure project-level metadata during initialization or early in the project lifecycle</li> <li>Completeness: Always provide as much metadata as possible for each layer</li> <li>Consistency: Use consistent naming conventions and data types</li> <li>Validation: Regularly validate your metadata using <code>biotope annotate validate</code></li> <li>Versioning: Include version information for both the dataset and metadata</li> <li>Team Coordination: Ensure all team members use the same project metadata for consistency</li> </ol>"},{"location":"learn/tutorials/annotate-omics/#common-use-cases","title":"Common Use Cases","text":""},{"location":"learn/tutorials/annotate-omics/#creating-a-new-dataset-annotation","title":"Creating a New Dataset Annotation","text":"<ol> <li> <p>Start with the interactive mode: <pre><code>biotope annotate interactive\n</code></pre></p> </li> <li> <p>Follow the prompts to enter:</p> </li> <li>Dataset information (name, description, license) - pre-filled from project metadata</li> <li>Distribution details (format, size, URL)</li> <li>Record structure (fields, data types)</li> <li>Field-specific metadata (units, ranges, descriptions)</li> </ol>"},{"location":"learn/tutorials/annotate-omics/#annotating-staged-files","title":"Annotating Staged Files","text":"<p>If you have files staged with <code>biotope add</code>, you can annotate them all at once:</p> <pre><code># Add files to staging\nbiotope add data/*.csv\n\n# Annotate all staged files interactively with project metadata pre-fill\nbiotope annotate interactive --staged\n</code></pre> <p>This will run the interactive annotation process for each staged file, pre-filling metadata with both file information and project metadata.</p>"},{"location":"learn/tutorials/annotate-omics/#completing-incomplete-annotations","title":"Completing Incomplete Annotations","text":"<p>If you have tracked files with incomplete metadata (missing required fields), you can complete them:</p> <pre><code># Check which files need annotation\nbiotope status\n\n# Complete annotations for all incomplete tracked files\nbiotope annotate interactive --incomplete\n</code></pre> <p>This will find all tracked files that don't meet the minimum annotation requirements and allow you to complete their metadata interactively with project metadata pre-fill.</p>"},{"location":"learn/tutorials/annotate-omics/#custom-pre-fill-metadata","title":"Custom Pre-fill Metadata","text":"<p>You can override project metadata with custom values:</p> <pre><code># Pre-fill with custom metadata\nbiotope annotate interactive --prefill-metadata '{\"description\": \"Custom description\", \"license\": \"CC-BY\"}'\n</code></pre>"},{"location":"learn/tutorials/annotate-omics/#validating-existing-annotations","title":"Validating Existing Annotations","text":"<pre><code>biotope annotate validate --jsonld my_dataset.json\n</code></pre> <p>This will check your metadata against the Croissant ML schema and report any issues.</p>"},{"location":"learn/tutorials/annotate-omics/#managing-project-metadata","title":"Managing Project Metadata","text":""},{"location":"learn/tutorials/annotate-omics/#view-current-project-metadata","title":"View Current Project Metadata","text":"<pre><code>biotope config show-project-metadata\n</code></pre>"},{"location":"learn/tutorials/annotate-omics/#update-project-metadata","title":"Update Project Metadata","text":"<pre><code>biotope config set-project-metadata\n</code></pre>"},{"location":"learn/tutorials/annotate-omics/#example-project-metadata-configuration","title":"Example Project Metadata Configuration","text":"<pre><code>project_metadata:\n  description: \"A comprehensive dataset for protein structure analysis\"\n  url: \"https://github.com/example/protein-data\"\n  creator:\n    name: \"Dr. Jane Smith\"\n    email: \"jane.smith@university.edu\"\n  license: \"MIT\"\n  citation: \"Smith, J. et al. (2024). Protein Structure Dataset. Nature Data.\"\n</code></pre>"},{"location":"learn/tutorials/annotate-omics/#future-improvements","title":"Future Improvements","text":"<p>The following features are planned for future releases: - Automatic metadata extraction from file contents - Integration with LLMs for automated annotation - File download and automatic annotation - Enhanced validation capabilities - Support for additional Croissant ML fields - Advanced project metadata templates</p>"},{"location":"learn/tutorials/annotate-omics/#related-resources","title":"Related Resources","text":"<ul> <li>Croissant ML Documentation</li> <li>BioCypher Documentation</li> <li>Unit Tests </li> </ul>"},{"location":"learn/tutorials/get-files/","title":"Downloading and Staging Files with <code>get</code>","text":"<p>The <code>get</code> command in Biotope provides a convenient way to download files from a URL and immediately stage them for metadata creation and version control. It integrates seamlessly with Biotope's git-on-top workflow. See also the annotation tutorial for more information on annotating your data.</p>"},{"location":"learn/tutorials/get-files/#basic-usage","title":"Basic Usage","text":"<p>The simplest way to use the <code>get</code> command is to provide a URL:</p> <pre><code>biotope get https://raw.githubusercontent.com/biocypher/biotope/refs/heads/main/tests/example_gene_expression.csv\n</code></pre> <p>or </p> <pre><code>biotope get https://raw.githubusercontent.com/biocypher/biotope/refs/heads/main/tests/example_protein_sequences.fasta\n</code></pre> <p>This will: 1. Download the file to the <code>data/raw</code> directory (or a custom location) 2. Add the file to your biotope project and stage it for metadata creation (using the same mechanism as <code>biotope add</code>) 3. Show you the next steps: annotate and commit</p> <p>Note: The annotation process is now a separate, explicit step. After downloading, you should run <code>biotope annotate --staged</code> to create or complete the metadata, and then commit your changes.</p>"},{"location":"learn/tutorials/get-files/#command-options","title":"Command Options","text":"<p>The <code>get</code> command supports the following options:</p> <pre><code>biotope get [OPTIONS] URL\n</code></pre>"},{"location":"learn/tutorials/get-files/#available-options","title":"Available Options","text":"<ul> <li><code>--output-dir</code>, <code>-o</code>: Specify a custom directory for downloaded files (default: <code>data/raw</code>)   <pre><code>biotope get https://example.com/data/file.txt --output-dir /path/to/dir\n</code></pre></li> <li><code>--no-add</code>: Download the file without adding it to the biotope project (advanced use)</li> </ul>"},{"location":"learn/tutorials/get-files/#download-locations","title":"Download Locations","text":""},{"location":"learn/tutorials/get-files/#default-location","title":"Default Location","text":"<p>By default, files are downloaded to a <code>data/raw</code> directory in your current working directory:</p> <pre><code>your-project/\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 raw/           # Default download location\n\u2502   \u2502   \u251c\u2500\u2500 file1.csv\n\u2502   \u2502   \u2514\u2500\u2500 file2.fasta\n\u2502   \u2514\u2500\u2500 processed/\n\u251c\u2500\u2500 .biotope/\n\u2514\u2500\u2500 .git/\n</code></pre> <p>This aligns with the recommended project structure and makes it easy to organize your data files.</p>"},{"location":"learn/tutorials/get-files/#custom-location","title":"Custom Location","text":"<p>You can specify a custom download location using the <code>--output-dir</code> option:</p> <pre><code># Download to a specific directory\nbiotope get https://example.com/data/file.csv --output-dir ./data/processed\n\n# Download to an absolute path\nbiotope get https://example.com/data/file.csv --output-dir /Users/username/project/data\n</code></pre>"},{"location":"learn/tutorials/get-files/#recommended-organization","title":"Recommended Organization","text":"<p>For better project organization, consider downloading files to appropriate subdirectories:</p> <pre><code># Download to raw data directory (default)\nbiotope get https://example.com/data/experiment.csv\n\n# Download to processed data directory\nbiotope get https://example.com/data/results.csv --output-dir ./data/processed\n\n# Download to specific experiment directory\nbiotope get https://example.com/data/experiment.csv --output-dir ./data/raw/experiment_2024_01\n</code></pre>"},{"location":"learn/tutorials/get-files/#file-tracking-and-moves","title":"File Tracking and Moves","text":"<p>Biotope tracks files by their relative path from the project root. This means:</p>"},{"location":"learn/tutorials/get-files/#how-file-tracking-works","title":"How File Tracking Works","text":"<ul> <li>Files are tracked using their relative path (e.g., <code>data/raw/experiment.csv</code>)</li> <li>The metadata stores this relative path in the <code>contentUrl</code> field</li> <li>Biotope can find files regardless of where you run commands from within the project</li> </ul>"},{"location":"learn/tutorials/get-files/#moving-files-after-download","title":"Moving Files After Download","text":"<p>If you download a file and later want to reorganize your project structure:</p> <ol> <li> <p>Move the file manually: <pre><code># Download to default location\nbiotope get https://example.com/data/experiment.csv\n\n# Later, move to a better location\nmkdir -p data/raw/experiment_2024_01\nmv data/raw/experiment.csv data/raw/experiment_2024_01/\n</code></pre></p> </li> <li> <p>Update the metadata: <pre><code># Check what's broken\nbiotope check-data\n\n# Re-add the file in its new location\nbiotope add data/raw/experiment_2024_01/experiment.csv --force\n</code></pre></p> </li> <li> <p>Commit the changes: <pre><code>biotope commit -m \"Reorganize experiment data into subdirectory\"\n</code></pre></p> </li> </ol>"},{"location":"learn/tutorials/get-files/#checking-file-integrity","title":"Checking File Integrity","text":"<p>Use <code>biotope check-data</code> to verify that all tracked files are still accessible:</p> <pre><code># Check all files\nbiotope check-data\n\n# Check specific file\nbiotope check-data -f data/raw/experiment.csv\n</code></pre> <p>This will report: - Valid: File exists and checksum matches - Missing: File not found at recorded location - Corrupted: File exists but checksum doesn't match - Untracked: File not tracked in biotope</p>"},{"location":"learn/tutorials/get-files/#automatic-metadata-generation-and-staging","title":"Automatic Metadata Generation and Staging","text":"<p>When downloading a file, the <code>get</code> command automatically generates initial metadata in Croissant ML format and stages it in git. This includes:</p> <ul> <li>File identification (name, path, SHA256 hash)</li> <li>File type detection</li> <li>Source URL</li> <li>Creator information</li> <li>Creation date</li> </ul> <p>The generated metadata follows the schema.org and Croissant ML standards, making it compatible with the rest of the Biotope ecosystem. Metadata is created in <code>.biotope/datasets/</code> and staged for commit.</p>"},{"location":"learn/tutorials/get-files/#example-generated-metadata","title":"Example Generated Metadata","text":"<pre><code>{\n    \"name\": \"Dataset_file.txt\",\n    \"description\": \"Dataset containing file downloaded from https://example.com/data/file.txt\",\n    \"url\": \"https://example.com/data/file.txt\",\n    \"creator\": {\n        \"@type\": \"Person\",\n        \"name\": \"username\"\n    },\n    \"dateCreated\": \"2024-03-21\",\n    \"distribution\": [\n        {\n            \"@type\": \"sc:FileObject\",\n            \"@id\": \"file_sha256hash\",\n            \"name\": \"file.txt\",\n            \"contentUrl\": \"data/raw/file.txt\",\n            \"encodingFormat\": \"text/plain\",\n            \"sha256\": \"sha256hash\"\n        }\n    ]\n}\n</code></pre>"},{"location":"learn/tutorials/get-files/#next-steps-annotate-and-commit","title":"Next Steps: Annotate and Commit","text":"<p>After downloading and staging the file, continue with the standard git-on-top workflow:</p> <ol> <li> <p>Check status: <pre><code>biotope status\n</code></pre>    This shows the staged file and its metadata status.</p> </li> <li> <p>Annotate the file: <pre><code>biotope annotate interactive --staged\n</code></pre>    This opens an interactive session to complete the metadata.</p> </li> <li> <p>Commit your changes: <pre><code>biotope commit -m \"Add new dataset from URL\"\n</code></pre></p> </li> </ol>"},{"location":"learn/tutorials/get-files/#examples","title":"Examples","text":""},{"location":"learn/tutorials/get-files/#download-and-stage-a-csv-file","title":"Download and Stage a CSV File","text":"<pre><code>biotope get https://example.com/data/expression.csv\nbiotope status\nbiotope annotate interactive --staged\nbiotope commit -m \"Add expression dataset\"\n</code></pre>"},{"location":"learn/tutorials/get-files/#download-to-a-specific-directory","title":"Download to a Specific Directory","text":"<pre><code>biotope get https://example.com/data/expression.csv --output-dir ./data/processed\n</code></pre>"},{"location":"learn/tutorials/get-files/#download-without-adding-to-project","title":"Download Without Adding to Project","text":"<pre><code>biotope get https://example.com/data/expression.csv --no-add\n# Later, manually add the file\nbiotope add data/raw/expression.csv\n</code></pre>"},{"location":"learn/tutorials/get-files/#integration-with-other-commands","title":"Integration with Other Commands","text":"<p>The <code>get</code> command integrates with the full git-on-top workflow:</p> <ul> <li>Use <code>biotope status</code> to see staged files and their annotation status</li> <li>Use <code>biotope annotate interactive --staged</code> to annotate all newly downloaded files</li> <li>Use <code>biotope commit</code> to save your changes</li> <li>Use <code>biotope check-data</code> to verify data integrity</li> </ul>"},{"location":"learn/tutorials/get-files/#troubleshooting","title":"Troubleshooting","text":""},{"location":"learn/tutorials/get-files/#common-issues","title":"Common Issues","text":"<ol> <li>Download Fails</li> <li>Check your internet connection</li> <li>Verify the URL is accessible</li> <li> <p>Ensure you have write permissions in the output directory</p> </li> <li> <p>Metadata Not Created</p> </li> <li>Make sure you are in a biotope project and a git repository</li> <li> <p>Check for error messages in the output</p> </li> <li> <p>Annotation Fails</p> </li> <li>Check if the file is corrupted</li> <li>Verify you have sufficient disk space</li> <li> <p>Ensure you have the required permissions</p> </li> <li> <p>Metadata Issues</p> </li> <li>Use <code>biotope annotate validate</code> to check metadata validity</li> <li>Review the pre-filled metadata carefully</li> <li> <p>Make sure all required fields are filled</p> </li> <li> <p>File Not Found After Move</p> </li> <li>Use <code>biotope check-data</code> to identify missing files</li> <li>Re-add files in their new locations with <code>biotope add --force</code></li> <li>Commit the changes to update metadata</li> </ol>"},{"location":"learn/tutorials/get-files/#getting-help","title":"Getting Help","text":"<p>For additional help, use:</p> <pre><code>biotope get --help\n</code></pre> <p>This will show all available options and usage examples. </p>"}]}