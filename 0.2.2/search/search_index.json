{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Biotope","text":"<p>CLI integration for BioCypher ecosystem packages</p> <p>Biotope is still under development</p> <p>Biotope is still under development and the API is subject to change. The package is currently only meant for developer use and prototyping.</p> <p>The Biotope CLI integration is our attempt to integrate BioCypher ecosystem packages into an accessible suite for scientific knowledge management. We are first approaching the project from a CLI perspective, as this is the most basic technology for prototyping automated workflows. We aim to extend this towards other user-interfaces, such as web apps, in the future.</p> <p>Biotope contains various modules for different tasks, some of which are straightfoward applications of existing BioCypher packages, while others are prototypes for new features. See more information in the API documentation.</p> <ul> <li><code>biotope init</code>: Initialize a new project in the BioCypher suite</li> <li><code>biotope build</code>: Build a BioCypher knowledge representation</li> <li><code>biotope chat</code>: Chat with a BioCypher project (BioChatter)</li> <li><code>biotope read</code>: Extract information from unstructured modalities (BioGather)</li> <li><code>biotope view</code>: Use visual analysis tools to interpret your data and metadata</li> <li><code>biotope get</code>: Download files and automatically start annotation</li> <li><code>biotope annotate</code>: Annotate your data with consistent metadata in Croissant ML</li> </ul>"},{"location":"#metadata-annotation-using-croissant-short-guide","title":"Metadata annotation using Croissant, short guide","text":"<p>The <code>biotope</code> package features a metadata annotation assistant using the recently introduced Croissant schema. It is available as the <code>biotope annotate</code> module. Usage:</p> <pre><code>pip install biotope\nbiotope annotate interactive\n</code></pre> <p>You can also use the <code>biotope get</code> command to download files and automatically start the annotation process:</p> <pre><code>biotope get https://example.com/data/file.txt\n</code></pre> <p>This will download the file and pre-fill metadata fields based on the file's properties.</p> <p>After creation, <code>biotope</code> can also be used to validate the JSON-LD (CAVE: being a prototype, biotope does not yet implement all croissant fields):</p> <pre><code>biotope annotate validate \u2013jsonld &lt;file_name.json&gt;\n</code></pre> <p><code>biotope</code> also has the method <code>biotope annotate create</code> to create metadata files from CLI parameters (no interactive mode) and <code>biotope annotate load</code> to load an existing record (the use of this is not well-defined yet). Further improvements would be the integration of LLMs for the automation of metadata annotations from file contents (using the <code>biochatter</code> module of <code>biotope</code>).</p> <p>Unit tests to inform about further functions and details can be found at https://github.com/biocypher/biotope/blob/main/tests/commands/test_annotate.py and https://github.com/biocypher/biotope/blob/main/tests/commands/test_get.py</p>"},{"location":"#copyright","title":"Copyright","text":"<ul> <li>Copyright \u00a9 2025 Sebastian Lobentanzer.</li> <li>Free software distributed under the MIT License.</li> </ul>"},{"location":"api-docs/annotate/","title":"Biotope Annotate","text":"<p>Draft stage</p> <p>Biotope is in draft stage. Functionality may be missing or incomplete. The API is subject to change.</p> <p>Command for creating dataset metadata definitions in Croissant format.</p>"},{"location":"api-docs/annotate/#biotope.commands.annotate.annotate","title":"<code>annotate()</code>","text":"<p>Create dataset metadata definitions in Croissant format.</p> Source code in <code>biotope/commands/annotate.py</code> <pre><code>@click.group()\ndef annotate() -&gt; None:\n    \"\"\"Create dataset metadata definitions in Croissant format.\"\"\"\n</code></pre>"},{"location":"api-docs/annotate/#biotope.commands.annotate.create","title":"<code>create(output, name, description, data_source, contact, date, access_restrictions, format, legal_obligations, collaboration_partner)</code>","text":"<p>Create a new Croissant metadata file with required scientific metadata fields.</p> Source code in <code>biotope/commands/annotate.py</code> <pre><code>@annotate.command()\n@click.option(\n    \"--output\",\n    \"-o\",\n    type=click.Path(),\n    default=\"metadata.json\",\n    help=\"Output file path for the metadata JSON-LD.\",\n)\n@click.option(\n    \"--name\",\n    \"-n\",\n    required=True,\n    help=\"Name of the dataset.\",\n)\n@click.option(\n    \"--description\",\n    \"-d\",\n    default=\"\",\n    help=\"Description of the dataset.\",\n)\n@click.option(\n    \"--data-source\",\n    \"-s\",\n    required=True,\n    help=\"URL or path to the data source.\",\n)\n@click.option(\n    \"--contact\",\n    \"-c\",\n    default=getpass.getuser(),\n    help=\"Responsible contact person for the dataset.\",\n)\n@click.option(\n    \"--date\",\n    default=datetime.datetime.now(tz=datetime.timezone.utc).date().isoformat(),\n    help=\"Date of creation (ISO format: YYYY-MM-DD).\",\n)\n@click.option(\n    \"--access-restrictions\",\n    \"-a\",\n    required=True,\n    help=\"Note on access restrictions (e.g., public, restricted, private).\",\n)\n@click.option(\n    \"--format\",\n    \"-f\",\n    help=\"Description of file format.\",\n)\n@click.option(\n    \"--legal-obligations\",\n    \"-l\",\n    help=\"Note on legal obligations.\",\n)\n@click.option(\n    \"--collaboration-partner\",\n    \"-p\",\n    help=\"Collaboration partner and institute.\",\n)\ndef create(\n    output,\n    name,\n    description,\n    data_source,\n    contact,\n    date,\n    access_restrictions,\n    format,\n    legal_obligations,\n    collaboration_partner,\n):\n    \"\"\"Create a new Croissant metadata file with required scientific metadata fields.\"\"\"\n    # Create a basic metadata structure with proper Croissant context\n    metadata = {\n        \"@context\": {\n            \"@vocab\": \"https://schema.org/\",\n            \"cr\": \"https://mlcommons.org/croissant/\",\n            \"ml\": \"http://ml-schema.org/\",\n            \"sc\": \"https://schema.org/\",\n            \"dct\": \"http://purl.org/dc/terms/\",\n            \"data\": \"https://mlcommons.org/croissant/data/\",\n            \"rai\": \"https://mlcommons.org/croissant/rai/\",\n            \"format\": \"https://mlcommons.org/croissant/format/\",\n            \"citeAs\": \"https://mlcommons.org/croissant/citeAs/\",\n            \"conformsTo\": \"https://mlcommons.org/croissant/conformsTo/\",\n            \"@language\": \"en\",\n            \"repeated\": \"https://mlcommons.org/croissant/repeated/\",\n            \"field\": \"https://mlcommons.org/croissant/field/\",\n            \"examples\": \"https://mlcommons.org/croissant/examples/\",\n            \"recordSet\": \"https://mlcommons.org/croissant/recordSet/\",\n            \"fileObject\": \"https://mlcommons.org/croissant/fileObject/\",\n            \"fileSet\": \"https://mlcommons.org/croissant/fileSet/\",\n            \"source\": \"https://mlcommons.org/croissant/source/\",\n            \"references\": \"https://mlcommons.org/croissant/references/\",\n            \"key\": \"https://mlcommons.org/croissant/key/\",\n            \"parentField\": \"https://mlcommons.org/croissant/parentField/\",\n            \"isLiveDataset\": \"https://mlcommons.org/croissant/isLiveDataset/\",\n            \"separator\": \"https://mlcommons.org/croissant/separator/\",\n            \"extract\": \"https://mlcommons.org/croissant/extract/\",\n            \"subField\": \"https://mlcommons.org/croissant/subField/\",\n            \"regex\": \"https://mlcommons.org/croissant/regex/\",\n            \"column\": \"https://mlcommons.org/croissant/column/\",\n            \"path\": \"https://mlcommons.org/croissant/path/\",\n            \"fileProperty\": \"https://mlcommons.org/croissant/fileProperty/\",\n            \"md5\": \"https://mlcommons.org/croissant/md5/\",\n            \"jsonPath\": \"https://mlcommons.org/croissant/jsonPath/\",\n            \"transform\": \"https://mlcommons.org/croissant/transform/\",\n            \"replace\": \"https://mlcommons.org/croissant/replace/\",\n            \"dataType\": \"https://mlcommons.org/croissant/dataType/\",\n        },\n        \"@type\": \"Dataset\",\n        \"name\": name,\n        \"description\": description,\n        \"url\": data_source,  # Changed from dataSource to url for schema.org compatibility\n        \"creator\": {\n            \"@type\": \"Person\",\n            \"name\": contact,\n        },\n        \"dateCreated\": date,\n        # Add recommended properties\n        \"datePublished\": date,  # Use creation date as publication date by default\n        \"version\": \"1.0\",  # Default version\n        \"license\": \"https://creativecommons.org/licenses/by/4.0/\",  # Default license\n        \"citation\": f\"Please cite this dataset as: {name} ({date.split('-')[0]})\",  # Simple citation\n    }\n\n    # Add custom fields with proper namespacing\n    metadata[\"cr:accessRestrictions\"] = access_restrictions\n\n    # Add optional fields if provided\n    if format:\n        metadata[\"encodingFormat\"] = format  # Using schema.org standard property\n    if legal_obligations:\n        metadata[\"cr:legalObligations\"] = legal_obligations\n    if collaboration_partner:\n        metadata[\"cr:collaborationPartner\"] = collaboration_partner\n\n    # Add distribution property with empty array for FileObjects/FileSets\n    metadata[\"distribution\"] = []\n\n    # Write to file\n    with open(output, \"w\") as f:\n        json.dump(metadata, f, indent=2)\n\n    click.echo(f\"Created Croissant metadata file at {output}\")\n</code></pre>"},{"location":"api-docs/annotate/#biotope.commands.annotate.get_standard_context","title":"<code>get_standard_context()</code>","text":"<p>Get the standard Croissant context.</p> Source code in <code>biotope/commands/annotate.py</code> <pre><code>def get_standard_context() -&gt; dict:\n    \"\"\"Get the standard Croissant context.\"\"\"\n    return {\n        \"@vocab\": \"https://schema.org/\",\n        \"cr\": \"https://mlcommons.org/croissant/\",\n        \"ml\": \"http://ml-schema.org/\",\n        \"sc\": \"https://schema.org/\",\n        \"dct\": \"http://purl.org/dc/terms/\",\n        \"data\": \"https://mlcommons.org/croissant/data/\",\n        \"rai\": \"https://mlcommons.org/croissant/rai/\",\n        \"format\": \"https://mlcommons.org/croissant/format/\",\n        \"citeAs\": \"https://mlcommons.org/croissant/citeAs/\",\n        \"conformsTo\": \"https://mlcommons.org/croissant/conformsTo/\",\n        \"@language\": \"en\",\n        \"repeated\": \"https://mlcommons.org/croissant/repeated/\",\n        \"field\": \"https://mlcommons.org/croissant/field/\",\n        \"examples\": \"https://mlcommons.org/croissant/examples/\",\n        \"recordSet\": \"https://mlcommons.org/croissant/recordSet/\",\n        \"fileObject\": \"https://mlcommons.org/croissant/fileObject/\",\n        \"fileSet\": \"https://mlcommons.org/croissant/fileSet/\",\n        \"source\": \"https://mlcommons.org/croissant/source/\",\n        \"references\": \"https://mlcommons.org/croissant/references/\",\n        \"key\": \"https://mlcommons.org/croissant/key/\",\n        \"parentField\": \"https://mlcommons.org/croissant/parentField/\",\n        \"isLiveDataset\": \"https://mlcommons.org/croissant/isLiveDataset/\",\n        \"separator\": \"https://mlcommons.org/croissant/separator/\",\n        \"extract\": \"https://mlcommons.org/croissant/extract/\",\n        \"subField\": \"https://mlcommons.org/croissant/subField/\",\n        \"regex\": \"https://mlcommons.org/croissant/regex/\",\n        \"column\": \"https://mlcommons.org/croissant/column/\",\n        \"path\": \"https://mlcommons.org/croissant/path/\",\n        \"fileProperty\": \"https://mlcommons.org/croissant/fileProperty/\",\n        \"md5\": \"https://mlcommons.org/croissant/md5/\",\n        \"jsonPath\": \"https://mlcommons.org/croissant/jsonPath/\",\n        \"transform\": \"https://mlcommons.org/croissant/transform/\",\n        \"replace\": \"https://mlcommons.org/croissant/replace/\",\n        \"dataType\": \"https://mlcommons.org/croissant/dataType/\",\n        \"includes\": \"https://mlcommons.org/croissant/includes/\",\n        \"excludes\": \"https://mlcommons.org/croissant/excludes/\",\n    }\n</code></pre>"},{"location":"api-docs/annotate/#biotope.commands.annotate.interactive","title":"<code>interactive(file_path=None, prefill_metadata=None)</code>","text":"<p>Interactive annotation process for files.</p> Source code in <code>biotope/commands/annotate.py</code> <pre><code>@annotate.command()\n@click.option(\n    \"--file-path\",\n    \"-f\",\n    type=click.Path(exists=True),\n    help=\"Path to the file to annotate\",\n)\n@click.option(\n    \"--prefill-metadata\",\n    \"-p\",\n    type=str,\n    help=\"JSON string containing pre-filled metadata\",\n)\ndef interactive(file_path: str | None = None, prefill_metadata: str | None = None) -&gt; None:\n    \"\"\"Interactive annotation process for files.\"\"\"\n    console = Console()\n\n    # Initialize metadata with pre-filled values if provided\n    dynamic_metadata = json.loads(prefill_metadata) if prefill_metadata else {}\n\n    # Merge with standard context and structure\n    metadata = merge_metadata(dynamic_metadata)\n\n    # If file path is provided, use it\n    if file_path:\n        metadata[\"file_path\"] = file_path\n\n    # Create a nice header\n    console.print(\n        Panel(\n            \"[bold blue]Biotope Dataset Metadata Creator[/]\",\n            subtitle=\"Create scientific dataset metadata in Croissant format\",\n        ),\n    )\n\n    console.print(Markdown(\"This wizard will help you document your scientific dataset with standardized metadata.\"))\n    console.print()\n\n    # Section: Basic Information\n    console.print(\"[bold green]Basic Dataset Information[/]\")\n    console.print(\"\u2500\" * 50)\n\n    # Use pre-filled name if available, otherwise prompt\n    dataset_name = metadata.get(\"name\", \"\")\n    if not dataset_name:\n        dataset_name = click.prompt(\n            \"Dataset name (a short, descriptive title; no spaces allowed)\",\n            default=\"\",\n        )\n    else:\n        dataset_name = click.prompt(\n            \"Dataset name (a short, descriptive title; no spaces allowed)\",\n            default=dataset_name,\n        )\n\n    description = click.prompt(\n        \"Dataset description (what does this dataset contain and what is it used for?)\",\n        default=metadata.get(\"description\", \"\"),\n    )\n\n    # Section: Source Information\n    console.print(\"\\n[bold green]Data Source Information[/]\")\n    console.print(\"\u2500\" * 50)\n    console.print(\"Where did this data come from? (e.g., a URL, database name, or experiment)\")\n    data_source = click.prompt(\"Data source\", default=metadata.get(\"url\", \"\"))\n\n    # Section: Ownership and Dates\n    console.print(\"\\n[bold green]Ownership and Dates[/]\")\n    console.print(\"\u2500\" * 50)\n\n    project_name = click.prompt(\n        \"Project name\",\n        default=metadata.get(\"cr:projectName\", Path.cwd().name),\n    )\n\n    contact = click.prompt(\n        \"Contact person (email preferred)\",\n        default=metadata.get(\"creator\", {}).get(\"name\", getpass.getuser()),\n    )\n\n    date = click.prompt(\n        \"Creation date (YYYY-MM-DD)\",\n        default=metadata.get(\"dateCreated\", datetime.date.today().isoformat()),\n    )\n\n    # Section: Access Information\n    console.print(\"\\n[bold green]Access Information[/]\")\n    console.print(\"\u2500\" * 50)\n\n    # Create a table for examples\n    table = Table(title=\"Access Restriction Examples\")\n    table.add_column(\"Type\", style=\"cyan\")\n    table.add_column(\"Description\", style=\"green\")\n    table.add_row(\"Public\", \"Anyone can access and use the data\")\n    table.add_row(\"Academic\", \"Restricted to academic/research use only\")\n    table.add_row(\"Approval\", \"Requires explicit approval from data owner\")\n    table.add_row(\"Embargo\", \"Will become public after a specific date\")\n    console.print(table)\n\n    has_access_restrictions = Confirm.ask(\n        \"Does this dataset have access restrictions?\",\n        default=bool(metadata.get(\"cr:accessRestrictions\")),\n    )\n\n    access_restrictions = None\n    if has_access_restrictions:\n        access_restrictions = Prompt.ask(\n            \"Please describe the access restrictions\",\n            default=metadata.get(\"cr:accessRestrictions\", \"\"),\n        )\n        if not access_restrictions.strip():\n            access_restrictions = None\n\n    # Section: Additional Information\n    console.print(\"\\n[bold green]Additional Information[/]\")\n    console.print(\"\u2500\" * 50)\n    console.print(\"[italic]The following fields are optional but recommended for scientific datasets[/]\")\n\n    format = click.prompt(\n        \"File format (MIME type, e.g., text/csv, application/json, application/x-hdf5, application/fastq)\",\n        default=metadata.get(\"encodingFormat\")\n        or metadata.get(\"format\")\n        or (metadata.get(\"distribution\", [{}])[0].get(\"encodingFormat\", \"\")),\n    )\n\n    legal_obligations = click.prompt(\n        \"Legal obligations (e.g., citation requirements, licenses)\",\n        default=metadata.get(\"cr:legalObligations\", \"\"),\n    )\n\n    collaboration_partner = click.prompt(\n        \"Collaboration partner and institute\",\n        default=metadata.get(\"cr:collaborationPartner\", \"\"),\n    )\n\n    # Section: Publication Information\n    console.print(\"\\n[bold green]Publication Information[/]\")\n    console.print(\"\u2500\" * 50)\n    console.print(\"[italic]The following fields are recommended for proper dataset citation[/]\")\n\n    publication_date = click.prompt(\n        \"Publication date (YYYY-MM-DD)\",\n        default=metadata.get(\"datePublished\", date),  # Use creation date as default\n    )\n\n    version = click.prompt(\n        \"Dataset version\",\n        default=metadata.get(\"version\", \"1.0\"),\n    )\n\n    license_url = click.prompt(\n        \"License URL\",\n        default=metadata.get(\"license\", \"https://creativecommons.org/licenses/by/4.0/\"),\n    )\n\n    citation = click.prompt(\n        \"Citation text\",\n        default=metadata.get(\"citation\", f\"Please cite this dataset as: {dataset_name} ({date.split('-')[0]})\"),\n    )\n\n    # Update metadata with new values while preserving any existing fields\n    new_metadata = {\n        \"@context\": get_standard_context(),  # Use the standard context\n        \"@type\": \"Dataset\",\n        \"name\": dataset_name,\n        \"description\": description,\n        \"url\": data_source,\n        \"creator\": {\n            \"@type\": \"Person\",\n            \"name\": contact,\n        },\n        \"dateCreated\": date,\n        \"cr:projectName\": project_name,\n        \"datePublished\": publication_date,\n        \"version\": version,\n        \"license\": license_url,\n        \"citation\": citation,\n    }\n\n    # Only add access restrictions if they exist\n    if access_restrictions:\n        new_metadata[\"cr:accessRestrictions\"] = access_restrictions\n\n    # Add optional fields if provided\n    if format:\n        new_metadata[\"encodingFormat\"] = format\n    if legal_obligations:\n        new_metadata[\"cr:legalObligations\"] = legal_obligations\n    if collaboration_partner:\n        new_metadata[\"cr:collaborationPartner\"] = collaboration_partner\n\n    # Update metadata while preserving pre-filled values\n    for key, value in new_metadata.items():\n        if key not in [\"distribution\"]:  # Don't overwrite distribution\n            metadata[key] = value\n\n    # Initialize distribution array for FileObjects/FileSets if it doesn't exist\n    if \"distribution\" not in metadata:\n        metadata[\"distribution\"] = []\n\n    # Section: File Resources\n    console.print(\"\\n[bold green]File Resources[/]\")\n    console.print(\"\u2500\" * 50)\n    console.print(\"Croissant datasets can include file resources (FileObject) and file collections (FileSet).\")\n\n    # If we have pre-filled distribution, use it\n    if prefill_metadata and \"distribution\" in dynamic_metadata:\n        # Create a table to display pre-filled file information\n        table = Table(title=\"Pre-filled File Resources\")\n        table.add_column(\"Type\", style=\"cyan\")\n        table.add_column(\"Name\", style=\"green\")\n        table.add_column(\"Format\", style=\"yellow\")\n        table.add_column(\"Hash\", style=\"magenta\")\n\n        for resource in dynamic_metadata[\"distribution\"]:\n            resource_type = resource.get(\"@type\", \"\").replace(\"sc:\", \"\").replace(\"cr:\", \"\")\n            name = resource.get(\"name\", \"\")\n            format = resource.get(\"encodingFormat\", \"\")\n            hash = resource.get(\"sha256\", \"\")[:8] + \"...\" if resource.get(\"sha256\") else \"\"\n\n            table.add_row(resource_type, name, format, hash)\n\n        console.print(table)\n\n        if click.confirm(\"Would you like to use these pre-filled file resources?\", default=True):\n            metadata[\"distribution\"] = dynamic_metadata[\"distribution\"]\n            console.print(\"[bold green]Using pre-filled file resources[/]\")\n        else:\n            console.print(\"[yellow]You can now add new file resources manually[/]\")\n            metadata[\"distribution\"] = []\n    elif click.confirm(\"Would you like to add file resources to your dataset?\", default=True):\n        while True:\n            resource_type = click.prompt(\n                \"Resource type\",\n                type=click.Choice([\"FileObject\", \"FileSet\"]),\n                default=\"FileObject\",\n            )\n\n            if resource_type == \"FileObject\":\n                file_id = click.prompt(\"File ID (unique identifier for this file)\")\n                file_name = click.prompt(\"File name (including extension)\")\n                content_url = click.prompt(\"Content URL (where the file can be accessed)\")\n                encoding_format = click.prompt(\n                    \"Encoding format (MIME type, e.g., text/csv, application/json, application/x-hdf5, application/fastq)\",\n                )\n\n                file_object = {\n                    \"@type\": \"sc:FileObject\",\n                    \"@id\": file_id,\n                    \"name\": file_name,\n                    \"contentUrl\": content_url,\n                    \"encodingFormat\": encoding_format,\n                    \"sha256\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n                }\n\n                # Optional SHA256 checksum\n                if click.confirm(\"Add SHA256 checksum?\", default=False):\n                    sha256 = click.prompt(\"SHA256 checksum\")\n                    file_object[\"sha256\"] = sha256\n\n                # Optional containedIn property\n                if click.confirm(\"Is this file contained in another file (e.g., in an archive)?\", default=False):\n                    container_id = click.prompt(\"Container file ID\")\n                    file_object[\"containedIn\"] = {\"@id\": container_id}\n\n                metadata[\"distribution\"].append(file_object)\n\n            else:  # FileSet\n                fileset_id = click.prompt(\"FileSet ID (unique identifier for this file set)\")\n\n                # Container information\n                container_id = click.prompt(\"Container file ID (archive or directory)\")\n\n                fileset = {\n                    \"@type\": \"cr:FileSet\",\n                    \"@id\": fileset_id,\n                    \"containedIn\": {\"@id\": container_id},\n                }\n\n                # File pattern information\n                encoding_format = click.prompt(\n                    \"Encoding format of files in this set (MIME type, e.g., text/csv, application/json, application/x-hdf5, application/fastq)\",\n                    default=\"\",\n                )\n                if encoding_format:\n                    fileset[\"encodingFormat\"] = encoding_format\n\n                includes_pattern = click.prompt(\"Include pattern (e.g., *.jpg, data/*.csv)\", default=\"\")\n                if includes_pattern:\n                    fileset[\"includes\"] = includes_pattern\n\n                # Optional exclude pattern\n                if click.confirm(\"Add exclude pattern?\", default=False):\n                    excludes_pattern = click.prompt(\"Exclude pattern\")\n                    fileset[\"excludes\"] = excludes_pattern\n\n                metadata[\"distribution\"].append(fileset)\n\n            if not click.confirm(\"Add another file resource?\", default=False):\n                break\n\n    # Section: Data Structure\n    console.print(\"\\n[bold green]Data Structure[/]\")\n    console.print(\"\u2500\" * 50)\n\n    # Create a table for record set examples\n    table = Table(title=\"Record Set Examples\")\n    table.add_column(\"Dataset Type\", style=\"cyan\")\n    table.add_column(\"Record Sets\", style=\"green\")\n    table.add_row(\"Genomics\", \"patients, samples, gene_expressions\")\n    table.add_row(\"Climate\", \"locations, time_series, measurements\")\n    table.add_row(\"Medical\", \"patients, visits, treatments, outcomes\")\n    console.print(table)\n\n    console.print(\"Record sets describe the structure of your data.\")\n\n    if click.confirm(\"Would you like to add a record set to describe your data structure?\", default=True):\n        metadata[\"cr:recordSet\"] = []\n\n        while True:\n            record_set_name = click.prompt(\"Record set name (e.g., 'patients', 'samples')\")\n            record_set_description = click.prompt(f\"Description of the '{record_set_name}' record set\", default=\"\")\n\n            # Create record set with proper Croissant format\n            record_set = {\n                \"@type\": \"cr:RecordSet\",\n                \"@id\": f\"#{record_set_name}\",\n                \"name\": record_set_name,\n                \"description\": record_set_description,\n            }\n\n            # Ask about data type\n            if click.confirm(\n                f\"Would you like to specify a data type for the '{record_set_name}' record set?\",\n                default=False,\n            ):\n                data_type = click.prompt(\"Data type (e.g., sc:GeoCoordinates, sc:Person)\")\n                record_set[\"dataType\"] = data_type\n\n            # Ask about fields with examples\n            console.print(f\"\\n[bold]Fields in '{record_set_name}'[/]\")\n            console.print(\"Fields describe the data columns or attributes in this record set.\")\n\n            if click.confirm(f\"Would you like to add fields to the '{record_set_name}' record set?\", default=True):\n                record_set[\"cr:field\"] = []\n\n                while True:\n                    field_name = click.prompt(\"Field name (column or attribute name)\")\n                    field_description = click.prompt(f\"Description of '{field_name}'\", default=\"\")\n\n                    # Create field with proper Croissant format\n                    field = {\n                        \"@type\": \"cr:Field\",\n                        \"@id\": f\"#{record_set_name}/{field_name}\",\n                        \"name\": field_name,\n                        \"description\": field_description,\n                    }\n\n                    # Ask about data type\n                    if click.confirm(\n                        f\"Would you like to specify a data type for the '{field_name}' field?\",\n                        default=False,\n                    ):\n                        data_type = click.prompt(\"Data type (e.g., sc:Text, sc:Integer, sc:Float, sc:ImageObject)\")\n                        field[\"dataType\"] = data_type\n\n                    # Ask about source\n                    if click.confirm(\n                        f\"Would you like to specify a data source for the '{field_name}' field?\",\n                        default=False,\n                    ):\n                        source_type = click.prompt(\n                            \"Source type\",\n                            type=click.Choice([\"FileObject\", \"FileSet\"]),\n                            default=\"FileObject\",\n                        )\n                        source_id = click.prompt(f\"{source_type} ID\")\n\n                        source = {\"source\": {}}\n                        if source_type == \"FileObject\":\n                            source[\"source\"][\"fileObject\"] = {\"@id\": source_id}\n                        else:\n                            source[\"source\"][\"fileSet\"] = {\"@id\": source_id}\n\n                        # Ask about extraction method\n                        extract_type = click.prompt(\n                            \"Extraction method\",\n                            type=click.Choice([\"column\", \"jsonPath\", \"fileProperty\", \"none\"]),\n                            default=\"none\",\n                        )\n\n                        if extract_type != \"none\":\n                            source[\"source\"][\"extract\"] = {}\n                            if extract_type == \"column\":\n                                column_name = click.prompt(\"Column name\")\n                                source[\"source\"][\"extract\"][\"column\"] = column_name\n                            elif extract_type == \"jsonPath\":\n                                json_path = click.prompt(\"JSONPath expression\")\n                                source[\"source\"][\"extract\"][\"jsonPath\"] = json_path\n                            elif extract_type == \"fileProperty\":\n                                file_property = click.prompt(\n                                    \"File property\",\n                                    type=click.Choice([\"fullpath\", \"filename\", \"content\", \"lines\", \"lineNumbers\"]),\n                                )\n                                source[\"source\"][\"extract\"][\"fileProperty\"] = file_property\n\n                        # Add source to field\n                        for key, value in source[\"source\"].items():\n                            field[key] = value\n\n                    # Ask if the field is repeated (array)\n                    if click.confirm(f\"Is '{field_name}' a repeated field (array/list)?\", default=False):\n                        field[\"repeated\"] = True\n\n                    # Ask if the field references another field\n                    if click.confirm(f\"Does '{field_name}' reference another field (foreign key)?\", default=False):\n                        ref_record_set = click.prompt(\"Referenced record set name\")\n                        ref_field = click.prompt(\"Referenced field name\")\n                        field[\"references\"] = {\"@id\": f\"#{ref_record_set}/{ref_field}\"}\n\n                    # Add field to record set\n                    record_set[\"cr:field\"].append(field)\n\n                    if not click.confirm(\"Add another field?\", default=True):\n                        break\n\n            # Ask about key fields\n            if click.confirm(\n                f\"Would you like to specify key fields for the '{record_set_name}' record set?\",\n                default=False,\n            ):\n                record_set[\"key\"] = []\n                while True:\n                    key_field = click.prompt(\"Key field name\")\n                    record_set[\"key\"].append({\"@id\": f\"#{record_set_name}/{key_field}\"})\n\n                    if not click.confirm(\"Add another key field?\", default=False):\n                        break\n\n            # Add record set to metadata\n            metadata[\"cr:recordSet\"].append(record_set)\n\n            if not click.confirm(\"Add another record set?\", default=False):\n                break\n\n    # Save metadata with a suggested filename\n    default_filename = f\"{dataset_name.lower().replace(' ', '_')}_metadata.json\"\n    output_path = click.prompt(\"Output file path\", default=default_filename)\n\n    with open(output_path, \"w\") as f:\n        json.dump(metadata, f, indent=2)\n\n    # Final success message with rich formatting\n    console.print()\n    console.print(\n        Panel(\n            f\"[bold green]\u2705 Created Croissant metadata file at:[/] [blue]{output_path}[/]\",\n            title=\"Success\",\n            border_style=\"green\",\n        ),\n    )\n\n    console.print(\"[italic]Validate this file with:[/]\")\n    console.print(f\"[bold yellow]biotope annotate validate --jsonld {output_path}[/]\")\n</code></pre>"},{"location":"api-docs/annotate/#biotope.commands.annotate.load","title":"<code>load(jsonld, record_set, num_records)</code>","text":"<p>Load records from a dataset using its Croissant metadata.</p> Source code in <code>biotope/commands/annotate.py</code> <pre><code>@annotate.command()\n@click.option(\n    \"--jsonld\",\n    \"-j\",\n    type=click.Path(exists=True),\n    required=True,\n    help=\"Path to the JSON-LD metadata file.\",\n)\n@click.option(\n    \"--record-set\",\n    \"-r\",\n    required=True,\n    help=\"Name of the record set to load.\",\n)\n@click.option(\n    \"--num-records\",\n    \"-n\",\n    type=int,\n    default=10,\n    help=\"Number of records to load.\",\n)\ndef load(jsonld, record_set, num_records):\n    \"\"\"Load records from a dataset using its Croissant metadata.\"\"\"\n    try:\n        # Use mlcroissant CLI to load the dataset\n        result = subprocess.run(\n            [\n                \"mlcroissant\",\n                \"load\",\n                \"--jsonld\",\n                jsonld,\n                \"--record_set\",\n                record_set,\n                \"--num_records\",\n                str(num_records),\n            ],\n            capture_output=True,\n            text=True,\n            check=True,\n        )\n\n        # Display the output\n        if result.stdout:\n            click.echo(result.stdout)\n\n        click.echo(f\"Loaded {num_records} records from record set '{record_set}'\")\n    except subprocess.CalledProcessError as e:\n        click.echo(f\"Error loading dataset: {e.stderr}\", err=True)\n        exit(1)\n    except Exception as e:\n        click.echo(f\"Error running load command: {e!s}\", err=True)\n        exit(1)\n</code></pre>"},{"location":"api-docs/annotate/#biotope.commands.annotate.merge_metadata","title":"<code>merge_metadata(dynamic_metadata)</code>","text":"<p>Merge dynamic metadata with standard context and structure.</p> Source code in <code>biotope/commands/annotate.py</code> <pre><code>def merge_metadata(dynamic_metadata: dict) -&gt; dict:\n    \"\"\"Merge dynamic metadata with standard context and structure.\"\"\"\n    # Start with standard context\n    metadata = {\n        \"@context\": get_standard_context(),\n        \"@type\": \"Dataset\",\n    }\n\n    # Update with dynamic content\n    metadata.update(dynamic_metadata)\n\n    return metadata\n</code></pre>"},{"location":"api-docs/annotate/#biotope.commands.annotate.validate","title":"<code>validate(jsonld)</code>","text":"<p>Validate a Croissant metadata file.</p> Source code in <code>biotope/commands/annotate.py</code> <pre><code>@annotate.command()\n@click.option(\n    \"--jsonld\",\n    \"-j\",\n    type=click.Path(exists=True),\n    required=True,\n    help=\"Path to the JSON-LD metadata file to validate.\",\n)\ndef validate(jsonld):\n    \"\"\"Validate a Croissant metadata file.\"\"\"\n    try:\n        # Use mlcroissant CLI to validate the file\n        result = subprocess.run(\n            [\"mlcroissant\", \"validate\", \"--jsonld\", jsonld],\n            capture_output=True,\n            text=True,\n            check=True,\n        )\n        click.echo(\"Validation successful! The metadata file is valid.\")\n        if result.stdout:\n            # Filter out informational log messages\n            filtered_output = \"\\n\".join(\n                line for line in result.stdout.splitlines() if not line.startswith(\"I\") or not line.endswith(\"Done.\")\n            )\n            if filtered_output:\n                click.echo(f\"Output: {filtered_output}\")\n        if result.stderr:\n            # Filter out informational log messages\n            filtered_stderr = \"\\n\".join(\n                line for line in result.stderr.splitlines() if not line.startswith(\"I\") or not line.endswith(\"Done.\")\n            )\n            if filtered_stderr:\n                click.echo(f\"Warnings: {filtered_stderr}\")\n    except subprocess.CalledProcessError as e:\n        click.echo(f\"Validation failed: {e.stderr}\", err=True)\n        exit(1)\n    except Exception as e:\n        click.echo(f\"Error running validation: {e!s}\", err=True)\n        exit(1)\n</code></pre>"},{"location":"api-docs/build/","title":"Biotope Build","text":"<p>Draft stage</p> <p>Biotope is in draft stage. Functionality may be missing or incomplete. The API is subject to change.</p> <p>Build command implementation.</p>"},{"location":"api-docs/build/#biotope.commands.build.build","title":"<code>build(config, output)</code>","text":"<p>Build knowledge representation from configured sources.</p> Source code in <code>biotope/commands/build.py</code> <pre><code>@click.command()\n@click.option(\n    \"--config\",\n    \"-c\",\n    type=click.Path(exists=True),\n    help=\"Path to configuration file\",\n)\n@click.option(\n    \"--output\",\n    \"-o\",\n    type=click.Path(),\n    help=\"Output directory for built knowledge graph\",\n)\ndef build(config: str, output: str) -&gt; None:\n    \"\"\"Build knowledge representation from configured sources.\"\"\"\n    click.echo(f\"Building using config from {config} to {output}\")\n</code></pre>"},{"location":"api-docs/build/#biotope.commands.build.build_knowledge","title":"<code>build_knowledge()</code>","text":"<p>Build knowledge representation from configured sources.</p> Source code in <code>biotope/commands/build.py</code> <pre><code>def build_knowledge() -&gt; None:\n    \"\"\"Build knowledge representation from configured sources.\"\"\"\n</code></pre>"},{"location":"api-docs/chat/","title":"Biotope Chat","text":"<p>Draft stage</p> <p>Biotope is in draft stage. Functionality may be missing or incomplete. The API is subject to change.</p> <p>Chat command implementation using biochatter.</p>"},{"location":"api-docs/chat/#biotope.commands.chat.chat","title":"<code>chat(ctx, model_name, prompts, interactive, correct, api_key)</code>","text":"<p>Start a chat session with biochatter.</p> <p>This command provides an interface to the biochatter library, allowing interactive conversations with LLMs about biomedical knowledge.</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Context</code> <p>The click context.</p> required <code>model_name</code> <code>str</code> <p>The name of the LLM model to use.</p> required <code>prompts</code> <code>dict | None</code> <p>A dictionary of prompts for the chat. Use 'primary_model_prompts' as the key for system prompts.</p> required <code>interactive</code> <code>bool</code> <p>Whether to run in interactive mode.</p> required <code>correct</code> <code>bool</code> <p>Whether to correct the output of the LLM.</p> required <code>api_key</code> <code>str | None</code> <p>The API key for the LLM.</p> required Source code in <code>biotope/commands/chat.py</code> <pre><code>@click.command()\n@click.option(\n    \"--model-name\",\n    \"-m\",\n    default=\"gpt-4o-mini\",\n    help=\"LLM model to use (default: gpt-4o-mini)\",\n)\n@click.option(\n    \"--prompts\",\n    \"-p\",\n    default=None,\n    help=\"Custom system prompts for the chat\",\n)\n@click.option(\n    \"--interactive/--no-interactive\",\n    \"-i/-n\",\n    default=True,\n    help=\"Run in interactive mode (default: True)\",\n)\n@click.option(\n    \"--correct/--no-correct\",\n    \"-c/-nc\",\n    default=False,\n    help=\"Correct the output of the LLM (default: False)\",\n)\n@click.option(\n    \"--api-key\",\n    \"-k\",\n    default=None,\n    help=\"API key for the LLM\",\n)\n@click.pass_context\ndef chat(\n    ctx: click.Context,\n    model_name: str,\n    prompts: dict | None,\n    interactive: bool,\n    correct: bool,\n    api_key: str | None,\n) -&gt; None:\n    \"\"\"\n    Start a chat session with biochatter.\n\n    This command provides an interface to the biochatter library, allowing\n    interactive conversations with LLMs about biomedical knowledge.\n\n    Args:\n        ctx: The click context.\n        model_name: The name of the LLM model to use.\n        prompts: A dictionary of prompts for the chat. Use\n            'primary_model_prompts' as the key for system prompts.\n        interactive: Whether to run in interactive mode.\n        correct: Whether to correct the output of the LLM.\n        api_key: The API key for the LLM.\n\n    \"\"\"\n    if not HAS_BIOCHATTER:\n        click.echo(\n            \"Error: biochatter is not installed. Install it with: pip install biotope[chat]\",\n            err=True,\n        )\n        ctx.exit(1)\n\n    try:\n        # Initialize biochatter with the specified model\n        conversation = GptConversation(\n            model_name=model_name,\n            prompts=prompts,\n            correct=correct,\n        )\n\n        if api_key:\n            conversation.set_api_key(api_key)\n        else:\n            conversation.set_api_key(os.getenv(\"OPENAI_API_KEY\"))\n\n        if not api_key and not os.getenv(\"OPENAI_API_KEY\"):\n            click.echo(\n                \"No API key provided. \"\n                \"Please provide an API key using the --api-key option or set the OPENAI_API_KEY environment variable.\",\n                err=True,\n            )\n            ctx.exit(1)\n\n        if interactive:\n            click.echo(\"Starting interactive chat session (Ctrl+C to exit)\")\n            click.echo(\"----------------------------------------\")\n\n            while True:\n                # Get user input\n                user_input = click.prompt(\"You\", type=str)\n\n                if user_input.lower() in [\"exit\", \"quit\"]:\n                    break\n\n                # Get response from biochatter\n                response, _, _ = conversation.query(user_input)\n                click.echo(\"\\nAssistant: \" + response + \"\\n\")\n\n        else:\n            # Read from stdin for non-interactive mode\n            user_input = click.get_text_stream(\"stdin\").read().strip()\n            response, _, _ = conversation.query(user_input)\n            click.echo(response)\n\n    except KeyboardInterrupt:\n        click.echo(\"\\nChat session ended.\")\n    except Exception as e:\n        click.echo(f\"Error: {e!s}\", err=True)\n        ctx.exit(1)\n</code></pre>"},{"location":"api-docs/init/","title":"Biotope Init","text":"<p>Draft stage</p> <p>Biotope is in draft stage. Functionality may be missing or incomplete. The API is subject to change.</p> <p>Initialize command implementation.</p>"},{"location":"api-docs/init/#biotope.commands.init.create_project_structure","title":"<code>create_project_structure(directory, config, metadata)</code>","text":"<p>Create the project directory structure and configuration files.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>Path</code> <p>Project directory path</p> required <code>config</code> <code>dict</code> <p>User-facing configuration dictionary</p> required <code>metadata</code> <code>dict</code> <p>Internal metadata dictionary</p> required Source code in <code>biotope/commands/init.py</code> <pre><code>def create_project_structure(directory: Path, config: dict, metadata: dict) -&gt; None:\n    \"\"\"\n    Create the project directory structure and configuration files.\n\n    Args:\n        directory: Project directory path\n        config: User-facing configuration dictionary\n        metadata: Internal metadata dictionary\n\n    \"\"\"\n    # Create directory structure\n    dirs = [\n        \".biotope\",\n        \".biotope/logs\",\n        \"config\",\n        \"data\",\n        \"data/raw\",\n        \"data/processed\",\n        \"schemas\",\n        \"outputs\",\n    ]\n\n    for d in dirs:\n        (directory / d).mkdir(parents=True, exist_ok=True)\n\n    # Create files\n    (directory / \"config\" / \"biotope.yaml\").write_text(\n        yaml.dump(config, default_flow_style=False),\n    )\n\n    (directory / \".biotope\" / \"metadata.yaml\").write_text(\n        yaml.dump(metadata, default_flow_style=False),\n    )\n\n    # Create README\n    readme_content = f\"\"\"# {config[\"project\"][\"name\"]}\n\nA BioCypher knowledge graph project.\n\n## Project Structure\n\n- `config/`: User configuration files\n- `data/`: Data files\n  - `raw/`: Raw input data\n  - `processed/`: Processed data\n- `schemas/`: Knowledge schema definitions\n- `outputs/`: Generated knowledge graphs\n\"\"\"\n    (directory / \"README.md\").write_text(readme_content)\n</code></pre>"},{"location":"api-docs/init/#biotope.commands.init.init","title":"<code>init(dir)</code>","text":"<p>Initialize a new biotope with interactive configuration.</p> <p>Parameters:</p> Name Type Description Default <code>dir</code> <code>Path</code> <p>Directory to initialize the project in</p> required <p>Raises:</p> Type Description <code>Abort</code> <p>If a biotope project already exists in the directory.</p> Source code in <code>biotope/commands/init.py</code> <pre><code>@click.command()\n@click.option(\n    \"--dir\",\n    \"-d\",\n    type=click.Path(file_okay=False, path_type=Path),\n    default=\".\",\n    help=\"Directory to initialize biotope project in\",\n)\ndef init(dir: Path) -&gt; None:  # noqa: A002\n    \"\"\"\n    Initialize a new biotope with interactive configuration.\n\n    Args:\n        dir: Directory to initialize the project in\n\n    Raises:\n        click.Abort: If a biotope project already exists in the directory.\n\n    \"\"\"\n    # Check if .biotope directory already exists\n    biotope_dir = dir / \".biotope\"\n    if biotope_dir.exists():\n        click.echo(\"\u274c A biotope project already exists in this directory.\")\n        click.echo(\"To start fresh, remove the .biotope directory first.\")\n        raise click.Abort\n\n    click.echo(\"Establishing biotope! Let's set up your project.\\n\")\n\n    # Project name\n    project_name = click.prompt(\n        \"What's your project name?\",\n        type=str,\n        default=dir.absolute().name,\n    )\n\n    # Knowledge sources\n    knowledge_sources = []\n    if click.confirm(\"Would you like to add knowledge sources now?\", default=True):\n        while True:\n            source = click.prompt(\n                \"\\nEnter knowledge source (or press enter to finish)\",\n                type=str,\n                default=\"\",\n                show_default=False,\n            )\n            if not source:\n                break\n            source_type = click.prompt(\n                \"What type of source is this?\",\n                type=click.Choice([\"database\", \"file\", \"api\"], case_sensitive=False),\n                default=\"database\",\n            )\n            knowledge_sources.append({\"name\": source, \"type\": source_type})\n\n    # Output preferences\n    output_format = click.prompt(\n        \"\\nPreferred output format\",\n        type=click.Choice([\"neo4j\", \"csv\", \"json\"], case_sensitive=False),\n        default=\"neo4j\",\n    )\n\n    # LLM integration\n    use_llm = click.confirm(\"\\nWould you like to set up LLM integration?\", default=True)\n    if use_llm:\n        llm_provider = click.prompt(\n            \"Which LLM provider would you like to use?\",\n            type=click.Choice([\"openai\", \"anthropic\", \"local\"], case_sensitive=False),\n            default=\"openai\",\n        )\n\n        if llm_provider in [\"openai\", \"anthropic\"]:\n            api_key = click.prompt(\n                f\"Please enter your {llm_provider} API key\",\n                type=str,\n                hide_input=True,\n            )\n\n    # Create user configuration\n    user_config = {\n        \"project\": {\n            \"name\": project_name,\n            \"output_format\": output_format,\n        },\n        \"knowledge_sources\": knowledge_sources,\n    }\n\n    if use_llm:\n        user_config[\"llm\"] = {\n            \"provider\": llm_provider,\n            \"api_key\": api_key if llm_provider in [\"openai\", \"anthropic\"] else None,\n        }\n\n    # Create internal metadata\n    metadata = {\n        \"project_name\": project_name,\n        \"created_at\": datetime.now(timezone.utc).isoformat(),\n        \"biotope_version\": click.get_current_context().obj.get(\"version\", \"unknown\"),\n        \"last_modified\": datetime.now(timezone.utc).isoformat(),\n        \"builds\": [],\n        \"knowledge_sources\": knowledge_sources,\n    }\n\n    # Create project structure\n    try:\n        dir.mkdir(parents=True, exist_ok=True)\n        create_project_structure(dir, user_config, metadata)\n        click.echo(\"\\n\u2728 Biotope established successfully! \u2728\")\n        click.echo(\n            f\"\\nYour biotope '{project_name}' has been established. Make sure to water regularly.\",\n        )\n        click.echo(\"\\nNext steps:\")\n        click.echo(\"1. Review the configuration in config/biotope.yaml\")\n        click.echo(\"2. Add your knowledge sources\")\n        click.echo(\"3. Run 'biotope build' to create your knowledge graph\")\n    except (OSError, yaml.YAMLError) as e:\n        click.echo(f\"\\n\u274c Error initializing project: {e!s}\", err=True)\n        raise click.Abort from e\n</code></pre>"},{"location":"api-docs/read/","title":"Biotope Read","text":"<p>Draft stage</p> <p>Biotope is in draft stage. Functionality may be missing or incomplete. The API is subject to change.</p> <p>Read command implementation.</p>"},{"location":"api-docs/read/#biotope.commands.read.extract_knowledge","title":"<code>extract_knowledge(text)</code>","text":"<p>Extract knowledge using NLP and other methods.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Input text to process</p> required <p>Returns:</p> Type Description <code>str</code> <p>Extracted knowledge (currently just returns input)</p> Source code in <code>biotope/commands/read.py</code> <pre><code>def extract_knowledge(text: str) -&gt; str:\n    \"\"\"\n    Extract knowledge using NLP and other methods.\n\n    Args:\n        text: Input text to process\n\n    Returns:\n        Extracted knowledge (currently just returns input)\n\n    \"\"\"\n    return f\"Extracted knowledge: {text}\"\n</code></pre>"},{"location":"api-docs/read/#biotope.commands.read.read","title":"<code>read(text, file)</code>","text":"<p>Extract knowledge from input text or file using NLP.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str | None</code> <p>Input text to process</p> required <code>file</code> <code>str | None</code> <p>Input file to process</p> required <p>Raises:</p> Type Description <code>UsageError</code> <p>If neither --text nor --file is provided.</p> Source code in <code>biotope/commands/read.py</code> <pre><code>@click.command()\n@click.option(\n    \"--text\",\n    \"-t\",\n    type=str,\n    help=\"Text to extract knowledge from\",\n    required=False,\n)\n@click.option(\n    \"--file\",\n    \"-f\",\n    type=click.Path(exists=True, dir_okay=False, path_type=str),\n    help=\"File to extract knowledge from\",\n    required=False,\n)\ndef read(text: str | None, file: str | None) -&gt; None:\n    \"\"\"\n    Extract knowledge from input text or file using NLP.\n\n    Args:\n        text: Input text to process\n        file: Input file to process\n\n    Raises:\n        click.UsageError: If neither --text nor --file is provided.\n\n    \"\"\"\n    if text is None and file is None:\n        msg = \"Either --text or --file must be provided\"\n        raise click.UsageError(msg)\n\n    if file is not None:\n        with open(file) as f:\n            text = f.read()\n\n    if text is not None:  # This will now be true in both cases\n        result = extract_knowledge(text)\n        click.echo(result)\n</code></pre>"},{"location":"api-docs/view/","title":"Biotope View","text":"<p>Draft stage</p> <p>Biotope is in draft stage. Functionality may be missing or incomplete. The API is subject to change.</p> <p>View command implementation.</p>"},{"location":"api-docs/view/#biotope.commands.view.view_graph","title":"<code>view_graph()</code>","text":"<p>View and analyze knowledge graphs.</p> Source code in <code>biotope/commands/view.py</code> <pre><code>def view_graph() -&gt; None:\n    \"\"\"View and analyze knowledge graphs.\"\"\"\n</code></pre>"},{"location":"learn/tutorials/annotate-omics/","title":"Annotate Omics","text":"<p>The <code>biotope annotate</code> module provides tools for creating and managing metadata annotations using the Croissant ML schema. This document provides detailed examples and instructions for working with different layers of Croissant ML.</p>"},{"location":"learn/tutorials/annotate-omics/#installation","title":"Installation","text":"<pre><code>pip install biotope\n</code></pre>"},{"location":"learn/tutorials/annotate-omics/#basic-usage","title":"Basic Usage","text":"<p>The annotation module can be used in several ways:</p> <pre><code># Interactive mode\nbiotope annotate interactive\n\n# Create metadata from CLI parameters\nbiotope annotate create\n\n# Validate existing metadata\nbiotope annotate validate --jsonld &lt;file_name.json&gt;\n\n# Load existing record\nbiotope annotate load\n</code></pre>"},{"location":"learn/tutorials/annotate-omics/#croissant-ml-layers","title":"Croissant ML Layers","text":"<p>Croissant ML organizes metadata in several layers, each serving a specific purpose in describing your dataset.</p>"},{"location":"learn/tutorials/annotate-omics/#1-dataset-layer","title":"1. Dataset Layer","text":"<p>The dataset layer provides high-level information about your entire dataset.</p> <p>Example: <pre><code>{\n  \"@type\": \"sc:Dataset\",\n  \"name\": \"Example Dataset\",\n  \"description\": \"A sample dataset for demonstration\",\n  \"license\": \"MIT\",\n  \"version\": \"1.0.0\",\n  \"datePublished\": \"2024-03-20\",\n  \"creator\": {\n    \"@type\": \"Person\",\n    \"name\": \"John Doe\"\n  }\n}\n</code></pre></p>"},{"location":"learn/tutorials/annotate-omics/#2-distribution-layer","title":"2. Distribution Layer","text":"<p>The distribution layer describes how the dataset is distributed and accessed.</p> <p>Example: <pre><code>{\n  \"@type\": \"sc:DataDownload\",\n  \"name\": \"Dataset Distribution\",\n  \"contentUrl\": \"https://example.com/dataset.zip\",\n  \"encodingFormat\": \"application/zip\",\n  \"contentSize\": \"1.2GB\",\n  \"sha256\": \"abc123...\"\n}\n</code></pre></p>"},{"location":"learn/tutorials/annotate-omics/#3-record-set-layer","title":"3. Record Set Layer","text":"<p>The record set layer defines the structure of your data records.</p> <p>Example: <pre><code>{\n  \"@type\": \"sc:RecordSet\",\n  \"name\": \"Main Records\",\n  \"description\": \"Primary data records\",\n  \"field\": [\n    {\n      \"@type\": \"sc:Field\",\n      \"name\": \"id\",\n      \"description\": \"Unique identifier\",\n      \"dataType\": \"string\"\n    },\n    {\n      \"@type\": \"sc:Field\",\n      \"name\": \"value\",\n      \"description\": \"Numerical value\",\n      \"dataType\": \"float\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"learn/tutorials/annotate-omics/#4-field-layer","title":"4. Field Layer","text":"<p>The field layer provides detailed information about individual data fields.</p> <p>Example: <pre><code>{\n  \"@type\": \"sc:Field\",\n  \"name\": \"temperature\",\n  \"description\": \"Temperature measurement in Celsius\",\n  \"dataType\": \"float\",\n  \"unit\": \"celsius\",\n  \"minimum\": -273.15,\n  \"maximum\": 100.0\n}\n</code></pre></p>"},{"location":"learn/tutorials/annotate-omics/#best-practices","title":"Best Practices","text":"<ol> <li>Completeness: Always provide as much metadata as possible for each layer</li> <li>Consistency: Use consistent naming conventions and data types</li> <li>Validation: Regularly validate your metadata using <code>biotope annotate validate</code></li> <li>Versioning: Include version information for both the dataset and metadata</li> </ol>"},{"location":"learn/tutorials/annotate-omics/#common-use-cases","title":"Common Use Cases","text":""},{"location":"learn/tutorials/annotate-omics/#creating-a-new-dataset-annotation","title":"Creating a New Dataset Annotation","text":"<ol> <li> <p>Start with the interactive mode: <pre><code>biotope annotate interactive\n</code></pre></p> </li> <li> <p>Follow the prompts to enter:</p> </li> <li>Dataset information (name, description, license)</li> <li>Distribution details (format, size, URL)</li> <li>Record structure (fields, data types)</li> <li>Field-specific metadata (units, ranges, descriptions)</li> </ol>"},{"location":"learn/tutorials/annotate-omics/#validating-existing-annotations","title":"Validating Existing Annotations","text":"<pre><code>biotope annotate validate --jsonld my_dataset.json\n</code></pre> <p>This will check your metadata against the Croissant ML schema and report any issues.</p>"},{"location":"learn/tutorials/annotate-omics/#future-improvements","title":"Future Improvements","text":"<p>The following features are planned for future releases: - Automatic metadata extraction from file contents - Integration with LLMs for automated annotation - File download and automatic annotation - Enhanced validation capabilities - Support for additional Croissant ML fields</p>"},{"location":"learn/tutorials/annotate-omics/#related-resources","title":"Related Resources","text":"<ul> <li>Croissant ML Documentation</li> <li>BioCypher Documentation</li> <li>Unit Tests </li> </ul>"},{"location":"learn/tutorials/get-files/","title":"Downloading and Annotating Files with <code>get</code>","text":"<p>The <code>get</code> command in Biotope provides a convenient way to download files and automatically start the annotation process. It combines file downloading capabilities similar to <code>curl</code> or <code>wget</code> with Biotope's powerful annotation system.</p>"},{"location":"learn/tutorials/get-files/#basic-usage","title":"Basic Usage","text":"<p>The simplest way to use the <code>get</code> command is to provide a URL:</p> <pre><code>biotope get https://raw.githubusercontent.com/biocypher/biotope/refs/heads/main/tests/example_gene_expression.csv\n</code></pre> <p>or </p> <pre><code>biotope get https://raw.githubusercontent.com/biocypher/biotope/refs/heads/main/tests/example_protein_sequences.fasta\n</code></pre> <p>This will: 1. Download the file to the <code>downloads</code> directory 2. Calculate its MD5 hash 3. Detect the file type 4. Automatically start the annotation process with pre-filled metadata</p>"},{"location":"learn/tutorials/get-files/#command-options","title":"Command Options","text":"<p>The <code>get</code> command supports several options:</p> <pre><code>biotope get [OPTIONS] URL\n</code></pre>"},{"location":"learn/tutorials/get-files/#available-options","title":"Available Options","text":"<ul> <li> <p><code>--output-dir</code>, <code>-o</code>: Specify a custom directory for downloaded files   <pre><code>biotope get https://example.com/data/file.txt --output-dir /path/to/dir\n</code></pre></p> </li> <li> <p><code>--skip-annotation</code>, <code>-s</code>: Download the file without starting the annotation process   <pre><code>biotope get https://example.com/data/file.txt --skip-annotation\n</code></pre></p> </li> </ul>"},{"location":"learn/tutorials/get-files/#automatic-metadata-generation","title":"Automatic Metadata Generation","text":"<p>When downloading a file, the <code>get</code> command automatically generates initial metadata in Croissant ML format. This includes:</p> <ul> <li>File identification (name, path, MD5 hash)</li> <li>File type detection</li> <li>Source URL</li> <li>Basic record set structure</li> </ul> <p>The generated metadata follows the schema.org and Croissant ML standards, making it compatible with the rest of the Biotope ecosystem.</p>"},{"location":"learn/tutorials/get-files/#example-generated-metadata","title":"Example Generated Metadata","text":"<pre><code>{\n    \"@context\": {\n        \"@vocab\": \"https://schema.org/\",\n        \"cr\": \"https://mlcommons.org/croissant/\",\n        \"ml\": \"http://ml-schema.org/\",\n        \"sc\": \"https://schema.org/\"\n    },\n    \"@type\": \"Dataset\",\n    \"name\": \"file.txt\",\n    \"description\": \"Downloaded file from https://example.com/data/file.txt\",\n    \"url\": \"https://example.com/data/file.txt\",\n    \"encodingFormat\": \"text/plain\",\n    \"distribution\": [\n        {\n            \"@type\": \"sc:FileObject\",\n            \"@id\": \"file_md5hash\",\n            \"name\": \"file.txt\",\n            \"contentUrl\": \"/path/to/downloads/file.txt\",\n            \"encodingFormat\": \"text/plain\",\n            \"sha256\": \"md5hash\"\n        }\n    ],\n    \"cr:recordSet\": [\n        {\n            \"@type\": \"cr:RecordSet\",\n            \"@id\": \"#main\",\n            \"name\": \"main\",\n            \"description\": \"Records from file.txt\",\n            \"cr:field\": [\n                {\n                    \"@type\": \"cr:Field\",\n                    \"@id\": \"#main/content\",\n                    \"name\": \"content\",\n                    \"description\": \"File content\",\n                    \"dataType\": \"sc:Text\",\n                    \"source\": {\n                        \"fileObject\": {\"@id\": \"file_md5hash\"},\n                        \"extract\": {\"fileProperty\": \"content\"}\n                    }\n                }\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"learn/tutorials/get-files/#interactive-annotation","title":"Interactive Annotation","text":"<p>After downloading, the command automatically starts the interactive annotation process. You can:</p> <ol> <li>Review and modify the pre-filled metadata</li> <li>Add additional fields and record sets</li> <li>Specify access restrictions and legal obligations</li> <li>Add collaboration information</li> </ol> <p>The interactive process follows the same workflow as the <code>annotate</code> command, but with pre-filled information to save time.</p>"},{"location":"learn/tutorials/get-files/#error-handling","title":"Error Handling","text":"<p>The command handles various error cases gracefully:</p> <ul> <li>Download failures: Displays an error message and exits</li> <li>Annotation failures: Shows the error and allows you to retry</li> <li>Invalid URLs: Provides clear error messages</li> <li>File system issues: Handles permission problems and disk space issues</li> </ul>"},{"location":"learn/tutorials/get-files/#best-practices","title":"Best Practices","text":"<ol> <li>Use Meaningful URLs: When possible, use URLs that reflect the content or purpose of the file</li> <li>Organize Downloads: Use the <code>--output-dir</code> option to keep downloaded files organized</li> <li>Review Metadata: Always review the pre-filled metadata before saving</li> <li>Skip When Needed: Use <code>--skip-annotation</code> when you only need to download files</li> </ol>"},{"location":"learn/tutorials/get-files/#examples","title":"Examples","text":""},{"location":"learn/tutorials/get-files/#download-and-annotate-a-csv-file","title":"Download and Annotate a CSV File","text":"<pre><code>biotope get https://example.com/data/expression.csv\n</code></pre>"},{"location":"learn/tutorials/get-files/#download-to-a-specific-directory","title":"Download to a Specific Directory","text":"<pre><code>biotope get https://example.com/data/expression.csv --output-dir ./data/raw\n</code></pre>"},{"location":"learn/tutorials/get-files/#download-without-annotation","title":"Download Without Annotation","text":"<pre><code>biotope get https://example.com/data/expression.csv --skip-annotation\n</code></pre>"},{"location":"learn/tutorials/get-files/#integration-with-other-commands","title":"Integration with Other Commands","text":"<p>The <code>get</code> command integrates well with other Biotope commands:</p> <ul> <li>Use <code>biotope annotate validate</code> to validate the generated metadata</li> <li>Use <code>biotope read</code> to read the downloaded and annotated files</li> <li>Use <code>biotope chat</code> to ask questions about the downloaded data</li> </ul>"},{"location":"learn/tutorials/get-files/#troubleshooting","title":"Troubleshooting","text":""},{"location":"learn/tutorials/get-files/#common-issues","title":"Common Issues","text":"<ol> <li>Download Fails</li> <li>Check your internet connection</li> <li>Verify the URL is accessible</li> <li> <p>Ensure you have write permissions in the output directory</p> </li> <li> <p>Annotation Fails</p> </li> <li>Check if the file is corrupted</li> <li>Verify you have sufficient disk space</li> <li> <p>Ensure you have the required permissions</p> </li> <li> <p>Metadata Issues</p> </li> <li>Use <code>biotope annotate validate</code> to check metadata validity</li> <li>Review the pre-filled metadata carefully</li> <li>Make sure all required fields are filled</li> </ol>"},{"location":"learn/tutorials/get-files/#getting-help","title":"Getting Help","text":"<p>For additional help, use:</p> <pre><code>biotope get --help\n</code></pre> <p>This will show all available options and usage examples. </p>"}]}