{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Biotope","text":"<p>CLI integration for BioCypher ecosystem packages</p> <p>Biotope is still under development</p> <p>Biotope is still under development and the API is subject to change.</p>"},{"location":"#metadata-annotation-using-croissant-short-guide","title":"Metadata annotation using Croissant, short guide","text":"<p>The <code>biotope</code> package features a metadata annotation assistant using the recently introduced Croissant schema. It is available as the <code>biotope annotate</code> module. Usage:</p> <pre><code>pip install biotope\nbiotope annotate interactive\n</code></pre> <p>After creation, <code>biotope</code> can also be used to validate the JSON-LD (CAVE: being a prototype, biotope does not yet implement all croissant fields):</p> <pre><code>biotope annotate validate \u2013jsonld &lt;file_name.json&gt;\n</code></pre> <p><code>biotope</code> also has the method <code>biotope annotate create</code> to create metadata files from CLI parameters (no interactive mode) and <code>biotope annotate load</code> to load an existing record (the use of this is not well-defined yet). Obvious improvements would be to integrate file download (something like <code>biotope annotate get</code>) with automatic annotation functionalities, and the integration of LLMs for the further automation of metadata annotations from file contents (using the <code>biochatter</code> module of <code>biotope</code>).</p> <p>Unit tests to inform about further functions and details can be found at https://github.com/biocypher/biotope/blob/main/tests/commands/test_annotate.py</p>"},{"location":"#copyright","title":"Copyright","text":"<ul> <li>Copyright \u00a9 2025 Sebastian Lobentanzer.</li> <li>Free software distributed under the MIT License.</li> </ul>"},{"location":"api-docs/annotate/","title":"Biotope Annotate","text":"<p>Draft stage</p> <p>Biotope is in draft stage. Functionality may be missing or incomplete. The API is subject to change.</p> <p>Command for creating dataset metadata definitions in Croissant format.</p>"},{"location":"api-docs/annotate/#biotope.commands.annotate.annotate","title":"<code>annotate()</code>","text":"<p>Create dataset metadata definitions in Croissant format.</p> Source code in <code>biotope/commands/annotate.py</code> <pre><code>@click.group()\ndef annotate() -&gt; None:\n    \"\"\"Create dataset metadata definitions in Croissant format.\"\"\"\n</code></pre>"},{"location":"api-docs/annotate/#biotope.commands.annotate.create","title":"<code>create(output, name, description, data_source, contact, date, access_restrictions, format, legal_obligations, collaboration_partner)</code>","text":"<p>Create a new Croissant metadata file with required scientific metadata fields.</p> Source code in <code>biotope/commands/annotate.py</code> <pre><code>@annotate.command()\n@click.option(\n    \"--output\",\n    \"-o\",\n    type=click.Path(),\n    default=\"metadata.json\",\n    help=\"Output file path for the metadata JSON-LD.\",\n)\n@click.option(\n    \"--name\",\n    \"-n\",\n    required=True,\n    help=\"Name of the dataset.\",\n)\n@click.option(\n    \"--description\",\n    \"-d\",\n    default=\"\",\n    help=\"Description of the dataset.\",\n)\n@click.option(\n    \"--data-source\",\n    \"-s\",\n    required=True,\n    help=\"URL or path to the data source.\",\n)\n@click.option(\n    \"--contact\",\n    \"-c\",\n    default=getpass.getuser(),\n    help=\"Responsible contact person for the dataset.\",\n)\n@click.option(\n    \"--date\",\n    default=datetime.datetime.now(tz=datetime.timezone.utc).date().isoformat(),\n    help=\"Date of creation (ISO format: YYYY-MM-DD).\",\n)\n@click.option(\n    \"--access-restrictions\",\n    \"-a\",\n    required=True,\n    help=\"Note on access restrictions (e.g., public, restricted, private).\",\n)\n@click.option(\n    \"--format\",\n    \"-f\",\n    help=\"Description of file format.\",\n)\n@click.option(\n    \"--legal-obligations\",\n    \"-l\",\n    help=\"Note on legal obligations.\",\n)\n@click.option(\n    \"--collaboration-partner\",\n    \"-p\",\n    help=\"Collaboration partner and institute.\",\n)\ndef create(\n    output,\n    name,\n    description,\n    data_source,\n    contact,\n    date,\n    access_restrictions,\n    format,\n    legal_obligations,\n    collaboration_partner,\n):\n    \"\"\"Create a new Croissant metadata file with required scientific metadata fields.\"\"\"\n    # Create a basic metadata structure with proper Croissant context\n    metadata = {\n        \"@context\": {\n            \"@vocab\": \"https://schema.org/\",\n            \"cr\": \"https://mlcommons.org/croissant/\",\n            \"ml\": \"http://ml-schema.org/\",\n            \"sc\": \"https://schema.org/\",\n        },\n        \"@type\": \"Dataset\",\n        \"name\": name,\n        \"description\": description,\n        \"url\": data_source,  # Changed from dataSource to url for schema.org compatibility\n        \"creator\": {\n            \"@type\": \"Person\",\n            \"name\": contact,\n        },\n        \"dateCreated\": date,\n        # Add recommended properties\n        \"datePublished\": date,  # Use creation date as publication date by default\n        \"version\": \"1.0\",  # Default version\n        \"license\": \"https://creativecommons.org/licenses/by/4.0/\",  # Default license\n        \"citation\": f\"Please cite this dataset as: {name} ({date.split('-')[0]})\",  # Simple citation\n    }\n\n    # Add custom fields with proper namespacing\n    metadata[\"cr:accessRestrictions\"] = access_restrictions\n\n    # Add optional fields if provided\n    if format:\n        metadata[\"encodingFormat\"] = format  # Using schema.org standard property\n    if legal_obligations:\n        metadata[\"cr:legalObligations\"] = legal_obligations\n    if collaboration_partner:\n        metadata[\"cr:collaborationPartner\"] = collaboration_partner\n\n    # Add distribution property with empty array for FileObjects/FileSets\n    metadata[\"distribution\"] = []\n\n    # Write to file\n    with open(output, \"w\") as f:\n        json.dump(metadata, f, indent=2)\n\n    click.echo(f\"Created Croissant metadata file at {output}\")\n</code></pre>"},{"location":"api-docs/annotate/#biotope.commands.annotate.interactive","title":"<code>interactive()</code>","text":"<p>Interactively create a Croissant metadata file with required scientific metadata fields.</p> Source code in <code>biotope/commands/annotate.py</code> <pre><code>@annotate.command()\ndef interactive():\n    \"\"\"Interactively create a Croissant metadata file with required scientific metadata fields.\"\"\"\n    console = Console()\n\n    # Create a nice header\n    console.print(\n        Panel(\n            \"[bold blue]Biotope Dataset Metadata Creator[/]\",\n            subtitle=\"Create scientific dataset metadata in Croissant format\",\n        ),\n    )\n\n    console.print(Markdown(\"This wizard will help you document your scientific dataset with standardized metadata.\"))\n    console.print()\n\n    # Section: Basic Information\n    console.print(\"[bold green]Basic Dataset Information[/]\")\n    console.print(\"\u2500\" * 50)\n\n    name = click.prompt(\"Dataset name (a short, descriptive title; no spaces allowed)\")\n    description = click.prompt(\n        \"Dataset description (what does this dataset contain and what is it used for?)\",\n        default=\"\",\n    )\n\n    # Section: Source Information\n    console.print(\"\\n[bold green]Data Source Information[/]\")\n    console.print(\"\u2500\" * 50)\n    console.print(\"Where did this data come from? (e.g., a URL, database name, or experiment)\")\n    data_source = click.prompt(\"Data source\")\n\n    # Section: Ownership and Dates\n    console.print(\"\\n[bold green]Ownership and Dates[/]\")\n    console.print(\"\u2500\" * 50)\n\n    project_name = click.prompt(\n        \"Project name\",\n        default=Path.cwd().name,\n    )\n\n    contact = click.prompt(\n        \"Contact person (email preferred)\",\n        default=getpass.getuser(),\n    )\n\n    date = click.prompt(\n        \"Creation date (YYYY-MM-DD)\",\n        default=datetime.date.today().isoformat(),\n    )\n\n    # Section: Access Information\n    console.print(\"\\n[bold green]Access Information[/]\")\n    console.print(\"\u2500\" * 50)\n\n    # Create a table for examples\n    table = Table(title=\"Access Restriction Examples\")\n    table.add_column(\"Type\", style=\"cyan\")\n    table.add_column(\"Description\", style=\"green\")\n    table.add_row(\"Public\", \"Anyone can access and use the data\")\n    table.add_row(\"Academic\", \"Restricted to academic/research use only\")\n    table.add_row(\"Approval\", \"Requires explicit approval from data owner\")\n    table.add_row(\"Embargo\", \"Will become public after a specific date\")\n    console.print(table)\n\n    has_access_restrictions = Confirm.ask(\n        \"Does this dataset have access restrictions?\",\n        default=False,\n    )\n\n    access_restrictions = None\n    if has_access_restrictions:\n        access_restrictions = Prompt.ask(\n            \"Please describe the access restrictions\",\n            default=\"\",\n        )\n        if not access_restrictions.strip():\n            access_restrictions = None\n\n    # Section: Additional Information\n    console.print(\"\\n[bold green]Additional Information[/]\")\n    console.print(\"\u2500\" * 50)\n    console.print(\"[italic]The following fields are optional but recommended for scientific datasets[/]\")\n\n    format = click.prompt(\n        \"File format (e.g., CSV, JSON, HDF5, FASTQ)\",\n        default=\"\",\n    )\n\n    legal_obligations = click.prompt(\n        \"Legal obligations (e.g., citation requirements, licenses)\",\n        default=\"\",\n    )\n\n    collaboration_partner = click.prompt(\n        \"Collaboration partner and institute\",\n        default=\"\",\n    )\n\n    # Section: Publication Information\n    console.print(\"\\n[bold green]Publication Information[/]\")\n    console.print(\"\u2500\" * 50)\n    console.print(\"[italic]The following fields are recommended for proper dataset citation[/]\")\n\n    publication_date = click.prompt(\n        \"Publication date (YYYY-MM-DD)\",\n        default=date,  # Use creation date as default\n    )\n\n    version = click.prompt(\n        \"Dataset version\",\n        default=\"1.0\",\n    )\n\n    license_url = click.prompt(\n        \"License URL\",\n        default=\"https://creativecommons.org/licenses/by/4.0/\",\n    )\n\n    citation = click.prompt(\n        \"Citation text\",\n        default=f\"Please cite this dataset as: {name} ({date.split('-')[0]})\",\n    )\n\n    # Create metadata structure with proper Croissant context\n    metadata = {\n        \"@context\": {\n            \"@vocab\": \"https://schema.org/\",\n            \"cr\": \"https://mlcommons.org/croissant/\",\n            \"ml\": \"http://ml-schema.org/\",\n            \"sc\": \"https://schema.org/\",\n        },\n        \"@type\": \"Dataset\",\n        \"name\": name,\n        \"description\": description,\n        \"url\": data_source,\n        \"creator\": {\n            \"@type\": \"Person\",\n            \"name\": contact,\n        },\n        \"dateCreated\": date,\n        \"cr:projectName\": project_name,\n        # Add recommended properties\n        \"datePublished\": publication_date,\n        \"version\": version,\n        \"license\": license_url,\n        \"citation\": citation,\n    }\n\n    # Only add access restrictions if they exist\n    if access_restrictions:\n        metadata[\"cr:accessRestrictions\"] = access_restrictions\n\n    # Add optional fields if provided\n    if format:\n        metadata[\"encodingFormat\"] = format\n    if legal_obligations:\n        metadata[\"cr:legalObligations\"] = legal_obligations\n    if collaboration_partner:\n        metadata[\"cr:collaborationPartner\"] = collaboration_partner\n\n    # Initialize distribution array for FileObjects/FileSets\n    metadata[\"distribution\"] = []\n\n    # Section: File Resources\n    console.print(\"\\n[bold green]File Resources[/]\")\n    console.print(\"\u2500\" * 50)\n    console.print(\"Croissant datasets can include file resources (FileObject) and file collections (FileSet).\")\n\n    if click.confirm(\"Would you like to add file resources to your dataset?\", default=True):\n        while True:\n            resource_type = click.prompt(\n                \"Resource type\",\n                type=click.Choice([\"FileObject\", \"FileSet\"]),\n                default=\"FileObject\",\n            )\n\n            if resource_type == \"FileObject\":\n                file_id = click.prompt(\"File ID (unique identifier for this file)\")\n                file_name = click.prompt(\"File name (including extension)\")\n                content_url = click.prompt(\"Content URL (where the file can be accessed)\")\n                encoding_format = click.prompt(\"Encoding format (e.g., text/csv, application/zip)\")\n\n                file_object = {\n                    \"@type\": \"sc:FileObject\",\n                    \"@id\": file_id,\n                    \"name\": file_name,\n                    \"contentUrl\": content_url,\n                    \"encodingFormat\": encoding_format,\n                    \"sha256\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n                }\n\n                # Optional SHA256 checksum\n                if click.confirm(\"Add SHA256 checksum?\", default=False):\n                    sha256 = click.prompt(\"SHA256 checksum\")\n                    file_object[\"sha256\"] = sha256\n\n                # Optional containedIn property\n                if click.confirm(\"Is this file contained in another file (e.g., in an archive)?\", default=False):\n                    container_id = click.prompt(\"Container file ID\")\n                    file_object[\"containedIn\"] = {\"@id\": container_id}\n\n                metadata[\"distribution\"].append(file_object)\n\n            else:  # FileSet\n                fileset_id = click.prompt(\"FileSet ID (unique identifier for this file set)\")\n\n                # Container information\n                container_id = click.prompt(\"Container file ID (archive or directory)\")\n\n                fileset = {\n                    \"@type\": \"cr:FileSet\",\n                    \"@id\": fileset_id,\n                    \"containedIn\": {\"@id\": container_id},\n                }\n\n                # File pattern information\n                encoding_format = click.prompt(\"Encoding format of files in this set\", default=\"\")\n                if encoding_format:\n                    fileset[\"encodingFormat\"] = encoding_format\n\n                includes_pattern = click.prompt(\"Include pattern (e.g., *.jpg, data/*.csv)\", default=\"\")\n                if includes_pattern:\n                    fileset[\"includes\"] = includes_pattern\n\n                # Optional exclude pattern\n                if click.confirm(\"Add exclude pattern?\", default=False):\n                    excludes_pattern = click.prompt(\"Exclude pattern\")\n                    fileset[\"excludes\"] = excludes_pattern\n\n                metadata[\"distribution\"].append(fileset)\n\n            if not click.confirm(\"Add another file resource?\", default=False):\n                break\n\n    # Section: Data Structure\n    console.print(\"\\n[bold green]Data Structure[/]\")\n    console.print(\"\u2500\" * 50)\n\n    # Create a table for record set examples\n    table = Table(title=\"Record Set Examples\")\n    table.add_column(\"Dataset Type\", style=\"cyan\")\n    table.add_column(\"Record Sets\", style=\"green\")\n    table.add_row(\"Genomics\", \"patients, samples, gene_expressions\")\n    table.add_row(\"Climate\", \"locations, time_series, measurements\")\n    table.add_row(\"Medical\", \"patients, visits, treatments, outcomes\")\n    console.print(table)\n\n    console.print(\"Record sets describe the structure of your data.\")\n\n    if click.confirm(\"Would you like to add a record set to describe your data structure?\", default=True):\n        metadata[\"cr:recordSet\"] = []\n\n        while True:\n            record_set_name = click.prompt(\"Record set name (e.g., 'patients', 'samples')\")\n            record_set_description = click.prompt(f\"Description of the '{record_set_name}' record set\", default=\"\")\n\n            # Create record set with proper Croissant format\n            record_set = {\n                \"@type\": \"cr:RecordSet\",\n                \"@id\": f\"#{record_set_name}\",\n                \"name\": record_set_name,\n                \"description\": record_set_description,\n            }\n\n            # Ask about data type\n            if click.confirm(\n                f\"Would you like to specify a data type for the '{record_set_name}' record set?\",\n                default=False,\n            ):\n                data_type = click.prompt(\"Data type (e.g., sc:GeoCoordinates, sc:Person)\")\n                record_set[\"dataType\"] = data_type\n\n            # Ask about fields with examples\n            console.print(f\"\\n[bold]Fields in '{record_set_name}'[/]\")\n            console.print(\"Fields describe the data columns or attributes in this record set.\")\n\n            if click.confirm(f\"Would you like to add fields to the '{record_set_name}' record set?\", default=True):\n                record_set[\"cr:field\"] = []\n\n                while True:\n                    field_name = click.prompt(\"Field name (column or attribute name)\")\n                    field_description = click.prompt(f\"Description of '{field_name}'\", default=\"\")\n\n                    # Create field with proper Croissant format\n                    field = {\n                        \"@type\": \"cr:Field\",\n                        \"@id\": f\"#{record_set_name}/{field_name}\",\n                        \"name\": field_name,\n                        \"description\": field_description,\n                    }\n\n                    # Ask about data type\n                    if click.confirm(\n                        f\"Would you like to specify a data type for the '{field_name}' field?\",\n                        default=False,\n                    ):\n                        data_type = click.prompt(\"Data type (e.g., sc:Text, sc:Integer, sc:Float, sc:ImageObject)\")\n                        field[\"dataType\"] = data_type\n\n                    # Ask about source\n                    if click.confirm(\n                        f\"Would you like to specify a data source for the '{field_name}' field?\",\n                        default=False,\n                    ):\n                        source_type = click.prompt(\n                            \"Source type\",\n                            type=click.Choice([\"FileObject\", \"FileSet\"]),\n                            default=\"FileObject\",\n                        )\n                        source_id = click.prompt(f\"{source_type} ID\")\n\n                        source = {\"source\": {}}\n                        if source_type == \"FileObject\":\n                            source[\"source\"][\"fileObject\"] = {\"@id\": source_id}\n                        else:\n                            source[\"source\"][\"fileSet\"] = {\"@id\": source_id}\n\n                        # Ask about extraction method\n                        extract_type = click.prompt(\n                            \"Extraction method\",\n                            type=click.Choice([\"column\", \"jsonPath\", \"fileProperty\", \"none\"]),\n                            default=\"none\",\n                        )\n\n                        if extract_type != \"none\":\n                            source[\"source\"][\"extract\"] = {}\n                            if extract_type == \"column\":\n                                column_name = click.prompt(\"Column name\")\n                                source[\"source\"][\"extract\"][\"column\"] = column_name\n                            elif extract_type == \"jsonPath\":\n                                json_path = click.prompt(\"JSONPath expression\")\n                                source[\"source\"][\"extract\"][\"jsonPath\"] = json_path\n                            elif extract_type == \"fileProperty\":\n                                file_property = click.prompt(\n                                    \"File property\",\n                                    type=click.Choice([\"fullpath\", \"filename\", \"content\", \"lines\", \"lineNumbers\"]),\n                                )\n                                source[\"source\"][\"extract\"][\"fileProperty\"] = file_property\n\n                        # Add source to field\n                        for key, value in source[\"source\"].items():\n                            field[key] = value\n\n                    # Ask if the field is repeated (array)\n                    if click.confirm(f\"Is '{field_name}' a repeated field (array/list)?\", default=False):\n                        field[\"repeated\"] = True\n\n                    # Ask if the field references another field\n                    if click.confirm(f\"Does '{field_name}' reference another field (foreign key)?\", default=False):\n                        ref_record_set = click.prompt(\"Referenced record set name\")\n                        ref_field = click.prompt(\"Referenced field name\")\n                        field[\"references\"] = {\"@id\": f\"#{ref_record_set}/{ref_field}\"}\n\n                    # Add field to record set\n                    record_set[\"cr:field\"].append(field)\n\n                    if not click.confirm(\"Add another field?\", default=True):\n                        break\n\n            # Ask about key fields\n            if click.confirm(\n                f\"Would you like to specify key fields for the '{record_set_name}' record set?\",\n                default=False,\n            ):\n                record_set[\"key\"] = []\n                while True:\n                    key_field = click.prompt(\"Key field name\")\n                    record_set[\"key\"].append({\"@id\": f\"#{record_set_name}/{key_field}\"})\n\n                    if not click.confirm(\"Add another key field?\", default=False):\n                        break\n\n            # Add record set to metadata\n            metadata[\"cr:recordSet\"].append(record_set)\n\n            if not click.confirm(\"Add another record set?\", default=False):\n                break\n\n    # Save metadata with a suggested filename\n    default_filename = f\"{name.lower().replace(' ', '_')}_metadata.json\"\n    output_path = click.prompt(\"Output file path\", default=default_filename)\n\n    with open(output_path, \"w\") as f:\n        json.dump(metadata, f, indent=2)\n\n    # Final success message with rich formatting\n    console.print()\n    console.print(\n        Panel(\n            f\"[bold green]\u2705 Created Croissant metadata file at:[/]\\n[blue]{output_path}[/]\",\n            title=\"Success\",\n            border_style=\"green\",\n        ),\n    )\n\n    console.print(\"[italic]Validate this file with:[/]\")\n    console.print(f\"[bold yellow]biotope annotate validate --jsonld {output_path}[/]\")\n</code></pre>"},{"location":"api-docs/annotate/#biotope.commands.annotate.load","title":"<code>load(jsonld, record_set, num_records)</code>","text":"<p>Load records from a dataset using its Croissant metadata.</p> Source code in <code>biotope/commands/annotate.py</code> <pre><code>@annotate.command()\n@click.option(\n    \"--jsonld\",\n    \"-j\",\n    type=click.Path(exists=True),\n    required=True,\n    help=\"Path to the JSON-LD metadata file.\",\n)\n@click.option(\n    \"--record-set\",\n    \"-r\",\n    required=True,\n    help=\"Name of the record set to load.\",\n)\n@click.option(\n    \"--num-records\",\n    \"-n\",\n    type=int,\n    default=10,\n    help=\"Number of records to load.\",\n)\ndef load(jsonld, record_set, num_records):\n    \"\"\"Load records from a dataset using its Croissant metadata.\"\"\"\n    try:\n        # Use mlcroissant CLI to load the dataset\n        result = subprocess.run(\n            [\n                \"mlcroissant\",\n                \"load\",\n                \"--jsonld\",\n                jsonld,\n                \"--record_set\",\n                record_set,\n                \"--num_records\",\n                str(num_records),\n            ],\n            capture_output=True,\n            text=True,\n            check=True,\n        )\n\n        # Display the output\n        if result.stdout:\n            click.echo(result.stdout)\n\n        click.echo(f\"Loaded {num_records} records from record set '{record_set}'\")\n    except subprocess.CalledProcessError as e:\n        click.echo(f\"Error loading dataset: {e.stderr}\", err=True)\n        exit(1)\n    except Exception as e:\n        click.echo(f\"Error running load command: {e!s}\", err=True)\n        exit(1)\n</code></pre>"},{"location":"api-docs/annotate/#biotope.commands.annotate.validate","title":"<code>validate(jsonld)</code>","text":"<p>Validate a Croissant metadata file.</p> Source code in <code>biotope/commands/annotate.py</code> <pre><code>@annotate.command()\n@click.option(\n    \"--jsonld\",\n    \"-j\",\n    type=click.Path(exists=True),\n    required=True,\n    help=\"Path to the JSON-LD metadata file to validate.\",\n)\ndef validate(jsonld):\n    \"\"\"Validate a Croissant metadata file.\"\"\"\n    try:\n        # Use mlcroissant CLI to validate the file\n        result = subprocess.run(\n            [\"mlcroissant\", \"validate\", \"--jsonld\", jsonld],\n            capture_output=True,\n            text=True,\n            check=True,\n        )\n        click.echo(\"Validation successful! The metadata file is valid.\")\n        if result.stdout:\n            click.echo(f\"Output: {result.stdout}\")\n        if result.stderr:\n            click.echo(f\"Warnings: {result.stderr}\")\n    except subprocess.CalledProcessError as e:\n        click.echo(f\"Validation failed: {e.stderr}\", err=True)\n        exit(1)\n    except Exception as e:\n        click.echo(f\"Error running validation: {e!s}\", err=True)\n        exit(1)\n</code></pre>"},{"location":"api-docs/build/","title":"Biotope Build","text":"<p>Draft stage</p> <p>Biotope is in draft stage. Functionality may be missing or incomplete. The API is subject to change.</p> <p>Build command implementation.</p>"},{"location":"api-docs/build/#biotope.commands.build.build","title":"<code>build(config, output)</code>","text":"<p>Build knowledge representation from configured sources.</p> Source code in <code>biotope/commands/build.py</code> <pre><code>@click.command()\n@click.option(\n    \"--config\",\n    \"-c\",\n    type=click.Path(exists=True),\n    help=\"Path to configuration file\",\n)\n@click.option(\n    \"--output\",\n    \"-o\",\n    type=click.Path(),\n    help=\"Output directory for built knowledge graph\",\n)\ndef build(config: str, output: str) -&gt; None:\n    \"\"\"Build knowledge representation from configured sources.\"\"\"\n    click.echo(f\"Building using config from {config} to {output}\")\n</code></pre>"},{"location":"api-docs/build/#biotope.commands.build.build_knowledge","title":"<code>build_knowledge()</code>","text":"<p>Build knowledge representation from configured sources.</p> Source code in <code>biotope/commands/build.py</code> <pre><code>def build_knowledge() -&gt; None:\n    \"\"\"Build knowledge representation from configured sources.\"\"\"\n</code></pre>"},{"location":"api-docs/chat/","title":"Biotope Chat","text":"<p>Draft stage</p> <p>Biotope is in draft stage. Functionality may be missing or incomplete. The API is subject to change.</p> <p>Chat command implementation using biochatter.</p>"},{"location":"api-docs/chat/#biotope.commands.chat.chat","title":"<code>chat(ctx, model_name, prompts, interactive, correct, api_key)</code>","text":"<p>Start a chat session with biochatter.</p> <p>This command provides an interface to the biochatter library, allowing interactive conversations with LLMs about biomedical knowledge.</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Context</code> <p>The click context.</p> required <code>model_name</code> <code>str</code> <p>The name of the LLM model to use.</p> required <code>prompts</code> <code>dict | None</code> <p>A dictionary of prompts for the chat. Use 'primary_model_prompts' as the key for system prompts.</p> required <code>interactive</code> <code>bool</code> <p>Whether to run in interactive mode.</p> required <code>correct</code> <code>bool</code> <p>Whether to correct the output of the LLM.</p> required <code>api_key</code> <code>str | None</code> <p>The API key for the LLM.</p> required Source code in <code>biotope/commands/chat.py</code> <pre><code>@click.command()\n@click.option(\n    \"--model-name\",\n    \"-m\",\n    default=\"gpt-4o-mini\",\n    help=\"LLM model to use (default: gpt-4o-mini)\",\n)\n@click.option(\n    \"--prompts\",\n    \"-p\",\n    default=None,\n    help=\"Custom system prompts for the chat\",\n)\n@click.option(\n    \"--interactive/--no-interactive\",\n    \"-i/-n\",\n    default=True,\n    help=\"Run in interactive mode (default: True)\",\n)\n@click.option(\n    \"--correct/--no-correct\",\n    \"-c/-nc\",\n    default=False,\n    help=\"Correct the output of the LLM (default: False)\",\n)\n@click.option(\n    \"--api-key\",\n    \"-k\",\n    default=None,\n    help=\"API key for the LLM\",\n)\n@click.pass_context\ndef chat(\n    ctx: click.Context,\n    model_name: str,\n    prompts: dict | None,\n    interactive: bool,\n    correct: bool,\n    api_key: str | None,\n) -&gt; None:\n    \"\"\"\n    Start a chat session with biochatter.\n\n    This command provides an interface to the biochatter library, allowing\n    interactive conversations with LLMs about biomedical knowledge.\n\n    Args:\n        ctx: The click context.\n        model_name: The name of the LLM model to use.\n        prompts: A dictionary of prompts for the chat. Use\n            'primary_model_prompts' as the key for system prompts.\n        interactive: Whether to run in interactive mode.\n        correct: Whether to correct the output of the LLM.\n        api_key: The API key for the LLM.\n\n    \"\"\"\n    if not HAS_BIOCHATTER:\n        click.echo(\n            \"Error: biochatter is not installed. Install it with: pip install biotope[chat]\",\n            err=True,\n        )\n        ctx.exit(1)\n\n    try:\n        # Initialize biochatter with the specified model\n        conversation = GptConversation(\n            model_name=model_name,\n            prompts=prompts,\n            correct=correct,\n        )\n\n        if api_key:\n            conversation.set_api_key(api_key)\n        else:\n            conversation.set_api_key(os.getenv(\"OPENAI_API_KEY\"))\n\n        if not api_key and not os.getenv(\"OPENAI_API_KEY\"):\n            click.echo(\n                \"No API key provided. \"\n                \"Please provide an API key using the --api-key option or set the OPENAI_API_KEY environment variable.\",\n                err=True,\n            )\n            ctx.exit(1)\n\n        if interactive:\n            click.echo(\"Starting interactive chat session (Ctrl+C to exit)\")\n            click.echo(\"----------------------------------------\")\n\n            while True:\n                # Get user input\n                user_input = click.prompt(\"You\", type=str)\n\n                if user_input.lower() in [\"exit\", \"quit\"]:\n                    break\n\n                # Get response from biochatter\n                response, _, _ = conversation.query(user_input)\n                click.echo(\"\\nAssistant: \" + response + \"\\n\")\n\n        else:\n            # Read from stdin for non-interactive mode\n            user_input = click.get_text_stream(\"stdin\").read().strip()\n            response, _, _ = conversation.query(user_input)\n            click.echo(response)\n\n    except KeyboardInterrupt:\n        click.echo(\"\\nChat session ended.\")\n    except Exception as e:\n        click.echo(f\"Error: {e!s}\", err=True)\n        ctx.exit(1)\n</code></pre>"},{"location":"api-docs/init/","title":"Biotope Init","text":"<p>Draft stage</p> <p>Biotope is in draft stage. Functionality may be missing or incomplete. The API is subject to change.</p> <p>Initialize command implementation.</p>"},{"location":"api-docs/init/#biotope.commands.init.create_project_structure","title":"<code>create_project_structure(directory, config, metadata)</code>","text":"<p>Create the project directory structure and configuration files.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>Path</code> <p>Project directory path</p> required <code>config</code> <code>dict</code> <p>User-facing configuration dictionary</p> required <code>metadata</code> <code>dict</code> <p>Internal metadata dictionary</p> required Source code in <code>biotope/commands/init.py</code> <pre><code>def create_project_structure(directory: Path, config: dict, metadata: dict) -&gt; None:\n    \"\"\"\n    Create the project directory structure and configuration files.\n\n    Args:\n        directory: Project directory path\n        config: User-facing configuration dictionary\n        metadata: Internal metadata dictionary\n\n    \"\"\"\n    # Create directory structure\n    dirs = [\n        \".biotope\",\n        \".biotope/logs\",\n        \"config\",\n        \"data\",\n        \"data/raw\",\n        \"data/processed\",\n        \"schemas\",\n        \"outputs\",\n    ]\n\n    for d in dirs:\n        (directory / d).mkdir(parents=True, exist_ok=True)\n\n    # Create files\n    (directory / \"config\" / \"biotope.yaml\").write_text(\n        yaml.dump(config, default_flow_style=False),\n    )\n\n    (directory / \".biotope\" / \"metadata.yaml\").write_text(\n        yaml.dump(metadata, default_flow_style=False),\n    )\n\n    # Create README\n    readme_content = f\"\"\"# {config[\"project\"][\"name\"]}\n\nA BioCypher knowledge graph project.\n\n## Project Structure\n\n- `config/`: User configuration files\n- `data/`: Data files\n  - `raw/`: Raw input data\n  - `processed/`: Processed data\n- `schemas/`: Knowledge schema definitions\n- `outputs/`: Generated knowledge graphs\n\"\"\"\n    (directory / \"README.md\").write_text(readme_content)\n</code></pre>"},{"location":"api-docs/init/#biotope.commands.init.init","title":"<code>init(dir)</code>","text":"<p>Initialize a new biotope with interactive configuration.</p> <p>Parameters:</p> Name Type Description Default <code>dir</code> <code>Path</code> <p>Directory to initialize the project in</p> required <p>Raises:</p> Type Description <code>Abort</code> <p>If a biotope project already exists in the directory.</p> Source code in <code>biotope/commands/init.py</code> <pre><code>@click.command()\n@click.option(\n    \"--dir\",\n    \"-d\",\n    type=click.Path(file_okay=False, path_type=Path),\n    default=\".\",\n    help=\"Directory to initialize biotope project in\",\n)\ndef init(dir: Path) -&gt; None:  # noqa: A002\n    \"\"\"\n    Initialize a new biotope with interactive configuration.\n\n    Args:\n        dir: Directory to initialize the project in\n\n    Raises:\n        click.Abort: If a biotope project already exists in the directory.\n\n    \"\"\"\n    # Check if .biotope directory already exists\n    biotope_dir = dir / \".biotope\"\n    if biotope_dir.exists():\n        click.echo(\"\u274c A biotope project already exists in this directory.\")\n        click.echo(\"To start fresh, remove the .biotope directory first.\")\n        raise click.Abort\n\n    click.echo(\"Establishing biotope! Let's set up your project.\\n\")\n\n    # Project name\n    project_name = click.prompt(\n        \"What's your project name?\",\n        type=str,\n        default=dir.absolute().name,\n    )\n\n    # Knowledge sources\n    knowledge_sources = []\n    if click.confirm(\"Would you like to add knowledge sources now?\", default=True):\n        while True:\n            source = click.prompt(\n                \"\\nEnter knowledge source (or press enter to finish)\",\n                type=str,\n                default=\"\",\n                show_default=False,\n            )\n            if not source:\n                break\n            source_type = click.prompt(\n                \"What type of source is this?\",\n                type=click.Choice([\"database\", \"file\", \"api\"], case_sensitive=False),\n                default=\"database\",\n            )\n            knowledge_sources.append({\"name\": source, \"type\": source_type})\n\n    # Output preferences\n    output_format = click.prompt(\n        \"\\nPreferred output format\",\n        type=click.Choice([\"neo4j\", \"csv\", \"json\"], case_sensitive=False),\n        default=\"neo4j\",\n    )\n\n    # LLM integration\n    use_llm = click.confirm(\"\\nWould you like to set up LLM integration?\", default=True)\n    if use_llm:\n        llm_provider = click.prompt(\n            \"Which LLM provider would you like to use?\",\n            type=click.Choice([\"openai\", \"anthropic\", \"local\"], case_sensitive=False),\n            default=\"openai\",\n        )\n\n        if llm_provider in [\"openai\", \"anthropic\"]:\n            api_key = click.prompt(\n                f\"Please enter your {llm_provider} API key\",\n                type=str,\n                hide_input=True,\n            )\n\n    # Create user configuration\n    user_config = {\n        \"project\": {\n            \"name\": project_name,\n            \"output_format\": output_format,\n        },\n        \"knowledge_sources\": knowledge_sources,\n    }\n\n    if use_llm:\n        user_config[\"llm\"] = {\n            \"provider\": llm_provider,\n            \"api_key\": api_key if llm_provider in [\"openai\", \"anthropic\"] else None,\n        }\n\n    # Create internal metadata\n    metadata = {\n        \"project_name\": project_name,\n        \"created_at\": datetime.now(timezone.utc).isoformat(),\n        \"biotope_version\": click.get_current_context().obj.get(\"version\", \"unknown\"),\n        \"last_modified\": datetime.now(timezone.utc).isoformat(),\n        \"builds\": [],\n        \"knowledge_sources\": knowledge_sources,\n    }\n\n    # Create project structure\n    try:\n        dir.mkdir(parents=True, exist_ok=True)\n        create_project_structure(dir, user_config, metadata)\n        click.echo(\"\\n\u2728 Biotope established successfully! \u2728\")\n        click.echo(\n            f\"\\nYour biotope '{project_name}' has been established. Make sure to water regularly.\",\n        )\n        click.echo(\"\\nNext steps:\")\n        click.echo(\"1. Review the configuration in config/biotope.yaml\")\n        click.echo(\"2. Add your knowledge sources\")\n        click.echo(\"3. Run 'biotope build' to create your knowledge graph\")\n    except (OSError, yaml.YAMLError) as e:\n        click.echo(f\"\\n\u274c Error initializing project: {e!s}\", err=True)\n        raise click.Abort from e\n</code></pre>"},{"location":"api-docs/read/","title":"Biotope Read","text":"<p>Draft stage</p> <p>Biotope is in draft stage. Functionality may be missing or incomplete. The API is subject to change.</p> <p>Read command implementation.</p>"},{"location":"api-docs/read/#biotope.commands.read.extract_knowledge","title":"<code>extract_knowledge(text)</code>","text":"<p>Extract knowledge using NLP and other methods.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Input text to process</p> required <p>Returns:</p> Type Description <code>str</code> <p>Extracted knowledge (currently just returns input)</p> Source code in <code>biotope/commands/read.py</code> <pre><code>def extract_knowledge(text: str) -&gt; str:\n    \"\"\"\n    Extract knowledge using NLP and other methods.\n\n    Args:\n        text: Input text to process\n\n    Returns:\n        Extracted knowledge (currently just returns input)\n\n    \"\"\"\n    return f\"Extracted knowledge: {text}\"\n</code></pre>"},{"location":"api-docs/read/#biotope.commands.read.read","title":"<code>read(text, file)</code>","text":"<p>Extract knowledge from input text or file using NLP.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str | None</code> <p>Input text to process</p> required <code>file</code> <code>str | None</code> <p>Input file to process</p> required <p>Raises:</p> Type Description <code>UsageError</code> <p>If neither --text nor --file is provided.</p> Source code in <code>biotope/commands/read.py</code> <pre><code>@click.command()\n@click.option(\n    \"--text\",\n    \"-t\",\n    type=str,\n    help=\"Text to extract knowledge from\",\n    required=False,\n)\n@click.option(\n    \"--file\",\n    \"-f\",\n    type=click.Path(exists=True, dir_okay=False, path_type=str),\n    help=\"File to extract knowledge from\",\n    required=False,\n)\ndef read(text: str | None, file: str | None) -&gt; None:\n    \"\"\"\n    Extract knowledge from input text or file using NLP.\n\n    Args:\n        text: Input text to process\n        file: Input file to process\n\n    Raises:\n        click.UsageError: If neither --text nor --file is provided.\n\n    \"\"\"\n    if text is None and file is None:\n        msg = \"Either --text or --file must be provided\"\n        raise click.UsageError(msg)\n\n    if file is not None:\n        with open(file) as f:\n            text = f.read()\n\n    if text is not None:  # This will now be true in both cases\n        result = extract_knowledge(text)\n        click.echo(result)\n</code></pre>"},{"location":"api-docs/view/","title":"Biotope View","text":"<p>Draft stage</p> <p>Biotope is in draft stage. Functionality may be missing or incomplete. The API is subject to change.</p> <p>View command implementation.</p>"},{"location":"api-docs/view/#biotope.commands.view.view_graph","title":"<code>view_graph()</code>","text":"<p>View and analyze knowledge graphs.</p> Source code in <code>biotope/commands/view.py</code> <pre><code>def view_graph() -&gt; None:\n    \"\"\"View and analyze knowledge graphs.\"\"\"\n</code></pre>"}]}